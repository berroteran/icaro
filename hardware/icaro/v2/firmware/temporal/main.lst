gplink-1.4.2 #1169 (Jun 26 2016)
Copyright (c) 1998-2015 gputils project
Listing File Generated: 4-26-2017  18:03:03
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_loopvar
                                           	global	_phase
                                           	global	_needreordering
                                           	global	_timingindex
                                           	global	_timedivision
                                           	global	_timings
                                           	global	_activatedservos
                                           	global	_servovalues
                                           	global	__pr2_plus1
                                           	global	__t2con
                                           	global	__i
                                           	global	_digitalwrite
                                           	global	_digitalread
                                           	global	_pinmode
                                           	global	_servos_init
                                           	global	_ServoAttach
                                           	global	_ServoDetach
                                           	global	_ServoWrite
                                           	global	_ServoRead
                                           	global	_ServoMinimumPulse
                                           	global	_ServoMaximumPulse
                                           	global	_servos_interrupt
                                           	global	_analog_init
                                           	global	_analogReference
                                           	global	_analogread
                                           	global	_Delayms
                                           	global	_Delayus
                                           	global	_PWM_set_frequency
                                           	global	_PWM_set_dutycycle
                                           	global	_PWM_set_percent_dutycycle
                                           	global	_init_PWM11
                                           	global	_init_PWM12
                                           	global	_set_PWM
                                           	global	_epap_in
                                           	global	_epap_out
                                           	global	_epapin_init
                                           	global	_epapout_init
                                           	global	_setup
                                           	global	_sensordigital
                                           	global	_loop
                                           	global	_pinguino_main
                                           	global	_high_priority_isr
                                           	global	_low_priority_isr
                                           	global	_mask
                                           	global	_port
                                           	global	_servomasks
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPDATAbits
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_TRISDbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_FSR2Hbits
                                           	extern	_BSRbits
                                           	extern	_FSR1Hbits
                                           	extern	_FSR0Hbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_TBLPTRUbits
                                           	extern	_PCLATHbits
                                           	extern	_PCLATUbits
                                           	extern	_STKPTRbits
                                           	extern	_TOSUbits
                                           	extern	_usb_device_state
                                           	extern	_usb_active_cfg
                                           	extern	_usb_active_alt_setting
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_TRISD
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay10ktcy
                                           	extern	__divulong
                                           	extern	__mulint
                                           	extern	__divuint
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _phase	db	0x00
                                           _needreordering	db	0x00
                                           _timedivision	db	0x00
                                           _activatedservos	db	0x00, 0x00, 0x00
                                           __pr2_plus1	db	0x00, 0x01
                                           __i	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_main_0	udata
                                           _loopvar	res	1
                                           
                                           udata_main_1	udata
                                           _servovalues	res	18
                                           
                                           udata_main_2	udata
                                           _timingindex	res	1
                                           
                                           udata_main_3	udata
                                           _timings	res	72
                                           
                                           udata_main_4	udata
                                           _SortServoTimings_mascaratotal_1_27	res	3
                                           
                                           udata_main_5	udata
                                           __t2con	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main__high_priority_isr	code	0X002020
                                           _high_priority_isr:
                                           ;	.line	98; /home/vbasel/.icaro/v2/firmware/source/main.c	void high_priority_isr(void) __interrupt
002020   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
002022   ffe5
002024   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
002026   ffe5
002028   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00202a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00202c   ffe5
00202e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
002030   ffe5
002032   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
002034   ffe5
002036   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
002038   ffe5
00203a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00203c   ffe5
00203e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
002040   ffe5
                                           ;	.line	134; /home/vbasel/.icaro/v2/firmware/source/main.c	servos_interrupt();
002042   ec8a     call    0x003b14, 0x0call    0x003b14, 0x0 	CALL	_servos_interrupt
002044   f01d
002046   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
002048   fffb
00204a   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
00204c   fffa
00204e   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
002050   ffea
002052   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
002054   ffe9
002056   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
002058   fff4
00205a   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
00205c   fff3
00205e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002060   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
002062   ffe0
002064   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
002066   ffd8
002068   0010     retfie  0x0              	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_main__low_priority_isr	code	0X004000
                                           _low_priority_isr:
                                           ;	.line	142; /home/vbasel/.icaro/v2/firmware/source/main.c	void low_priority_isr(void) __interrupt
004000   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
004002   ffe5
004004   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
004006   ffe5
004008   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00400a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00400c   ffe5
00400e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
004010   ffe5
004012   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
004014   ffe5
004016   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
004018   ffe5
00401a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00401c   ffe5
00401e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
004020   ffe5
                                           ;	.line	144; /home/vbasel/.icaro/v2/firmware/source/main.c	}
004022   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
004024   fffb
004026   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
004028   fffa
00402a   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
00402c   ffea
00402e   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
004030   ffe9
004032   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
004034   fff4
004036   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
004038   fff3
00403a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00403c   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
00403e   ffe0
004040   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
004042   ffd8
004044   0010     retfie  0x0              	RETFIE	
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__pinguino_main	code
                                           _pinguino_main:
                                           ;	.line	54; /home/vbasel/.icaro/v2/firmware/source/main.c	PIE1=0;
003c52   6a9d     clrf    0x9d, 0x0        	CLRF	_PIE1
                                           ;	.line	55; /home/vbasel/.icaro/v2/firmware/source/main.c	PIE2=0;
003c54   6aa0     clrf    0xa0, 0x0        	CLRF	_PIE2
                                           ;	.line	56; /home/vbasel/.icaro/v2/firmware/source/main.c	ADCON1=0x0F;
003c56   0e0f     movlw   0x0f             	MOVLW	0x0f
003c58   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1
                                           ;	.line	61; /home/vbasel/.icaro/v2/firmware/source/main.c	setup();
003c5a   ec64     call    0x0034c8, 0x0call    0x0034c8, 0x0 	CALL	_setup
003c5c   f01a
                                           ;	.line	63; /home/vbasel/.icaro/v2/firmware/source/main.c	analog_init();
003c5e   ec55     call    0x003caa, 0x0call    0x003caa, 0x0 	CALL	_analog_init
003c60   f01e
                                           ;	.line	69; /home/vbasel/.icaro/v2/firmware/source/main.c	servos_init();
003c62   ec66     call    0x003acc, 0x0call    0x003acc, 0x0 	CALL	_servos_init
003c64   f01d
                                           ;	.line	85; /home/vbasel/.icaro/v2/firmware/source/main.c	INTCONbits.PEIE=1;
003c66   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	86; /home/vbasel/.icaro/v2/firmware/source/main.c	INTCONbits.GIE=1;
003c68   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           _00783_DS_:
                                           ;	.line	91; /home/vbasel/.icaro/v2/firmware/source/main.c	loop();
003c6a   ec18     call    0x003a30, 0x0call    0x003a30, 0x0 	CALL	_loop
003c6c   f01d
003c6e   d7fd     bra     0x003c6a         	BRA	_00783_DS_
003c70   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__loop	code
                                           _loop:
                                           ;	.line	67; /home/vbasel/.icaro/v2/firmware/source/user.c	void loop()
003a30   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003a32   ffe5
003a34   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003a36   ffe5
003a38   0102     movlb   0x2              	BANKSEL	__i
                                           ;	.line	70; /home/vbasel/.icaro/v2/firmware/source/user.c	for(_i=0;_i<255;_i++){
003a3a   6b63     clrf    0x63, 0x1        	CLRF	__i, B
                                           ; removed redundant BANKSEL
003a3c   6b64     clrf    0x64, 0x1        	CLRF	(__i + 1), B
003a3e   0e01     movlw   0x01             	MOVLW	0x01
003a40   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003a42   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00769_DS_:
                                           ;	.line	71; /home/vbasel/.icaro/v2/firmware/source/user.c	PORTB=a;
003a44   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003a46   6e81     movwf   0x81, 0x0        	MOVWF	_PORTB
                                           ;	.line	72; /home/vbasel/.icaro/v2/firmware/source/user.c	Delayms(100);
003a48   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003a4a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003a4c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003a4e   0e64     movlw   0x64             	MOVLW	0x64
003a50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003a52   ecde     call    0x0037bc, 0x0call    0x0037bc, 0x0 	CALL	_Delayms
003a54   f01b
003a56   0e04     movlw   0x04             	MOVLW	0x04
003a58   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	73; /home/vbasel/.icaro/v2/firmware/source/user.c	a++;
003a5a   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
003a5c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
003a5e   0102     movlb   0x2              	BANKSEL	__i
                                           ;	.line	70; /home/vbasel/.icaro/v2/firmware/source/user.c	for(_i=0;_i<255;_i++){
003a60   3f63     incfsz  0x63, 0x1, 0x1   	INCFSZ	__i, F, B
003a62   d001     bra     0x003a66         	BRA	_10795_DS_
                                           ; removed redundant BANKSEL
003a64   2b64     incf    0x64, 0x1, 0x1   	INCF	(__i + 1), F, B
                                           _10795_DS_:
003a66   0102     movlb   0x2              	BANKSEL	(__i + 1)
003a68   5164     movf    0x64, 0x0, 0x1   	MOVF	(__i + 1), W, B
003a6a   0f80     addlw   0x80             	ADDLW	0x80
003a6c   0f80     addlw   0x80             	ADDLW	0x80
003a6e   e102     bnz     0x003a74         	BNZ	_00777_DS_
003a70   0eff     movlw   0xff             	MOVLW	0xff
                                           ; removed redundant BANKSEL
003a72   5d63     subwf   0x63, 0x0, 0x1   	SUBWF	__i, W, B
                                           _00777_DS_:
003a74   e3e7     bnc     0x003a44         	BNC	_00769_DS_
003a76   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003a78   f001
003a7a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003a7c   f000
003a7e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__sensordigital	code
                                           _sensordigital:
                                           ;	.line	98; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	int sensordigital(int valor)
003a80   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003a82   ffe5
003a84   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003a86   ffd9
003a88   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003a8a   ffe5
003a8c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003a8e   ffe5
003a90   0e02     movlw   0x02             	MOVLW	0x02
003a92   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003a94   f000
003a96   0e03     movlw   0x03             	MOVLW	0x03
003a98   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003a9a   f001
                                           ;	.line	102; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	temp=digitalread(valor);
003a9c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003a9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003aa0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003aa2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003aa4   ec93     call    0x002d26, 0x0call    0x002d26, 0x0 	CALL	_digitalread
003aa6   f016
003aa8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003aaa   f001
003aac   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003aae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	103; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	if (temp==0)
003ab0   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
003ab2   e103     bnz     0x003aba         	BNZ	_00761_DS_
                                           ;	.line	105; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	return 1;
003ab4   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003ab6   0e01     movlw   0x01             	MOVLW	0x01
003ab8   d002     bra     0x003abe         	BRA	_00763_DS_
                                           _00761_DS_:
                                           ;	.line	109; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	return 0;
003aba   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003abc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00763_DS_:
003abe   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003ac0   f001
003ac2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003ac4   f000
003ac6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003ac8   ffd9
003aca   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__setup	code
                                           _setup:
                                           ;	.line	67; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	TRISB=0; //defino PORTB como salida
0034c8   6a93     clrf    0x93, 0x0        	CLRF	_TRISB
                                           ;	.line	68; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	PORTB=0; 
0034ca   6a81     clrf    0x81, 0x0        	CLRF	_PORTB
                                           ;	.line	69; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	PORTD=0;
0034cc   6a83     clrf    0x83, 0x0        	CLRF	_PORTD
                                           ;	.line	70; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG1,INPUT);
0034ce   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034d0   0e01     movlw   0x01             	MOVLW	0x01
0034d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034d4   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034d6   0e15     movlw   0x15             	MOVLW	0x15
0034d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034da   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
0034dc   f013
0034de   0e04     movlw   0x04             	MOVLW	0x04
0034e0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	71; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG2,INPUT);
0034e2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034e4   0e01     movlw   0x01             	MOVLW	0x01
0034e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034e8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034ea   0e16     movlw   0x16             	MOVLW	0x16
0034ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034ee   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
0034f0   f013
0034f2   0e04     movlw   0x04             	MOVLW	0x04
0034f4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	73; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG3,TRIG);
0034f6   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034f8   0e01     movlw   0x01             	MOVLW	0x01
0034fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034fc   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0034fe   0e17     movlw   0x17             	MOVLW	0x17
003500   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003502   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
003504   f013
003506   0e04     movlw   0x04             	MOVLW	0x04
003508   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	74; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG4,ECHO);
00350a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00350c   0e01     movlw   0x01             	MOVLW	0x01
00350e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003510   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003512   0e18     movlw   0x18             	MOVLW	0x18
003514   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003516   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
003518   f013
00351a   0e04     movlw   0x04             	MOVLW	0x04
00351c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	75; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P1,OUTPUT);
00351e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003520   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003522   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003524   0e19     movlw   0x19             	MOVLW	0x19
003526   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003528   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
00352a   f013
00352c   0e04     movlw   0x04             	MOVLW	0x04
00352e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	76; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P2,OUTPUT);
003530   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003532   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003534   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003536   0e1a     movlw   0x1a             	MOVLW	0x1a
003538   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00353a   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
00353c   f013
00353e   0e04     movlw   0x04             	MOVLW	0x04
003540   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	77; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P3,OUTPUT);
003542   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003544   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003546   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003548   0e1b     movlw   0x1b             	MOVLW	0x1b
00354a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00354c   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
00354e   f013
003550   0e04     movlw   0x04             	MOVLW	0x04
003552   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	78; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P4,OUTPUT);
003554   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003556   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003558   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00355a   0e1c     movlw   0x1c             	MOVLW	0x1c
00355c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00355e   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
003560   f013
003562   0e04     movlw   0x04             	MOVLW	0x04
003564   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	79; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV1);
003566   0e0a     movlw   0x0a             	MOVLW	0x0a
003568   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00356a   ec7b     call    0x002ef6, 0x0call    0x002ef6, 0x0 	CALL	_ServoAttach
00356c   f017
00356e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	80; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV2);
003570   0e0b     movlw   0x0b             	MOVLW	0x0b
003572   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003574   ec7b     call    0x002ef6, 0x0call    0x002ef6, 0x0 	CALL	_ServoAttach
003576   f017
003578   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	81; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV3);
00357a   0e0c     movlw   0x0c             	MOVLW	0x0c
00357c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00357e   ec7b     call    0x002ef6, 0x0call    0x002ef6, 0x0 	CALL	_ServoAttach
003580   f017
003582   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	82; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV4);
003584   0e09     movlw   0x09             	MOVLW	0x09
003586   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003588   ec7b     call    0x002ef6, 0x0call    0x002ef6, 0x0 	CALL	_ServoAttach
00358a   f017
00358c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	83; /home/vbasel/.icaro/v2/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV5);
00358e   0e08     movlw   0x08             	MOVLW	0x08
003590   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003592   ec7b     call    0x002ef6, 0x0call    0x002ef6, 0x0 	CALL	_ServoAttach
003594   f017
003596   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003598   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__epapout_init	code
                                           _epapout_init:
                                           ;	.line	41; /home/vbasel/.icaro/v2/firmware/source/main.c	void epapout_init() { return; }
003cde   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__epapin_init	code
                                           _epapin_init:
                                           ;	.line	40; /home/vbasel/.icaro/v2/firmware/source/main.c	void epapin_init() { return; }
003ce0   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__epap_out	code
                                           _epap_out:
                                           ;	.line	39; /home/vbasel/.icaro/v2/firmware/source/main.c	void epap_out() { return; }
003ce2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__epap_in	code
                                           _epap_in:
                                           ;	.line	38; /home/vbasel/.icaro/v2/firmware/source/main.c	void epap_in() { return; }
003ce4   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__set_PWM	code
                                           _set_PWM:
                                           ;	.line	188; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	void set_PWM(int input, int value)
00359a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00359c   ffe5
00359e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0035a0   ffd9
0035a2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0035a4   ffe5
0035a6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0035a8   ffe5
0035aa   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0035ac   ffe5
0035ae   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0035b0   ffe5
0035b2   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0035b4   ffe5
0035b6   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0035b8   ffe5
0035ba   0e02     movlw   0x02             	MOVLW	0x02
0035bc   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0035be   f000
0035c0   0e03     movlw   0x03             	MOVLW	0x03
0035c2   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0035c4   f001
0035c6   0e04     movlw   0x04             	MOVLW	0x04
0035c8   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0035ca   f002
0035cc   0e05     movlw   0x05             	MOVLW	0x05
0035ce   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0035d0   f003
                                           ;	.line	192; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (input==11)
0035d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035d4   0a0b     xorlw   0x0b             	XORLW	0x0b
0035d6   e102     bnz     0x0035dc         	BNZ	_00722_DS_
0035d8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0035da   e001     bz      0x0035de         	BZ	_00723_DS_
                                           _00722_DS_:
0035dc   d018     bra     0x00360e         	BRA	_00703_DS_
                                           _00723_DS_:
                                           ;	.line	195; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if ((CCP2CON & 0x0F)==0) init_PWM11();
0035de   50ba     movf    0xba, 0x0, 0x0   	MOVF	_CCP2CON, W
                                           ; #	ANDLW	0x0f
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00701_DS_
                                           ; #	CALL	_init_PWM11
                                           ; #	MOVLW	0x03
                                           ;	.line	196; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet=value & 3;	// extract bit 0 and 1
0035e0   0b0f     andlw   0x0f             	ANDLW	0x0f
0035e2   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0035e4   ec4d     call    0x003c9a, 0x0call    0x003c9a, 0x0 	CALL	_init_PWM11
0035e6   f01e
0035e8   0e03     movlw   0x03             	MOVLW	0x03
0035ea   1402     andwf   0x02, 0x0, 0x0   	ANDWF	r0x02, W
0035ec   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0035ee   6a05     clrf    0x05, 0x0        	CLRF	r0x05
                                           ;	.line	197; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet<<=4;			// rotate left 4 bits
0035f0   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
0035f2   0bf0     andlw   0xf0             	ANDLW	0xf0
0035f4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ;	.line	198; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP2CON&=0x0F;		// reset bit 4:5
0035f6   0e0f     movlw   0x0f             	MOVLW	0x0f
0035f8   16ba     andwf   0xba, 0x1, 0x0   	ANDWF	_CCP2CON, F
                                           ;	.line	199; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP2CON|=octet;		// put in CCP2CON 4:5
0035fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0035fc   12ba     iorwf   0xba, 0x1, 0x0   	IORWF	_CCP2CON, F
                                           ;	.line	200; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	value>>=2;			// 8 MSB bits of value
0035fe   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
003600   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
003602   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003604   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
003606   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
003608   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
                                           ;	.line	201; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet=value;		// in octet
00360a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
                                           ; =DF= MOVFF: SRC op r0x04 replaced by WREG
                                           ;	.line	202; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR2L=octet;		// put in CCPR2L
00360c   6ebb     movwf   0xbb, 0x0        	MOVWF	_CCPR2L
                                           _00703_DS_:
                                           ;	.line	204; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (input==12)
00360e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003610   0a0c     xorlw   0x0c             	XORLW	0x0c
003612   e102     bnz     0x003618         	BNZ	_00728_DS_
003614   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003616   e001     bz      0x00361a         	BZ	_00729_DS_
                                           _00728_DS_:
003618   d01a     bra     0x00364e         	BRA	_00708_DS_
                                           _00729_DS_:
                                           ;	.line	207; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if ((CCP1CON & 0x0F)==0) init_PWM12();		
00361a   50bd     movf    0xbd, 0x0, 0x0   	MOVF	_CCP1CON, W
                                           ; #	ANDLW	0x0f
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00705_DS_
                                           ; #	CALL	_init_PWM12
                                           ; #	MOVLW	0x03
                                           ;	.line	208; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet=value & 3;	// extract bit 0 and 1
00361c   0b0f     andlw   0x0f             	ANDLW	0x0f
00361e   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
003620   ec45     call    0x003c8a, 0x0call    0x003c8a, 0x0 	CALL	_init_PWM12
003622   f01e
003624   0e03     movlw   0x03             	MOVLW	0x03
003626   1402     andwf   0x02, 0x0, 0x0   	ANDWF	r0x02, W
003628   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00362a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00362c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00362e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ;	.line	209; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet<<=4;			// rotate left 4 bits
003630   3804     swapf   0x04, 0x0, 0x0   	SWAPF	r0x04, W
003632   0bf0     andlw   0xf0             	ANDLW	0xf0
003634   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ;	.line	210; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP1CON&=0x0F;		// reset bit 4:5
003636   0e0f     movlw   0x0f             	MOVLW	0x0f
003638   16bd     andwf   0xbd, 0x1, 0x0   	ANDWF	_CCP1CON, F
                                           ;	.line	211; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP1CON|=octet;		// put in CCP2CON 4:5
00363a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00363c   12bd     iorwf   0xbd, 0x1, 0x0   	IORWF	_CCP1CON, F
                                           ;	.line	212; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	value>>=2;			// 8 MSB bits of value
00363e   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
003640   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
003642   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003644   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
003646   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
003648   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
                                           ;	.line	213; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	octet=value;		// in octet
00364a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00364c   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           _00708_DS_:
                                           ;	.line	214; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR1L=octet;		// put in CCPR1L			
00364e   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003650   f005
003652   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003654   f004
003656   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003658   f003
00365a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00365c   f002
00365e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003660   f001
003662   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003664   f000
003666   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003668   ffd9
00366a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__init_PWM12	code
                                           _init_PWM12:
                                           ;	.line	181; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	TRISCbits.TRISC2=0;		// C2 is an output
003c8a   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	182; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	PR2=0xFF;				// init timer 2 period
003c8c   68cb     setf    0xcb, 0x0        	SETF	_PR2
                                           ;	.line	183; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	T2CON=0x05;				// prescaler and timer 2 on
003c8e   0e05     movlw   0x05             	MOVLW	0x05
003c90   6eca     movwf   0xca, 0x0        	MOVWF	_T2CON
                                           ;	.line	184; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR1L=0;				// 8 bits MSB output = 0
003c92   6abe     clrf    0xbe, 0x0        	CLRF	_CCPR1L
                                           ;	.line	185; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP1CON=0x0F;			// configure for PWM 2 bits LSB = 0
003c94   0e0f     movlw   0x0f             	MOVLW	0x0f
003c96   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CON
003c98   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__init_PWM11	code
                                           _init_PWM11:
                                           ;	.line	172; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	TRISCbits.TRISC1=0;		// C1 is an output
003c9a   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	173; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	PR2=0xFF;				// init timer 2 period
003c9c   68cb     setf    0xcb, 0x0        	SETF	_PR2
                                           ;	.line	174; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	T2CON=0x05;				// prescaler and timer 2 on
003c9e   0e05     movlw   0x05             	MOVLW	0x05
003ca0   6eca     movwf   0xca, 0x0        	MOVWF	_T2CON
                                           ;	.line	175; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR2L=0;				// 8 bits MSB output = 0
003ca2   6abb     clrf    0xbb, 0x0        	CLRF	_CCPR2L
                                           ;	.line	176; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP2CON=0x0F;			// configure for PWM 2 bits LSB = 0	
003ca4   0e0f     movlw   0x0f             	MOVLW	0x0f
003ca6   6eba     movwf   0xba, 0x0        	MOVWF	_CCP2CON
003ca8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__PWM_set_percent_dutycycle	code
                                           _PWM_set_percent_dutycycle:
                                           ;	.line	151; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	void PWM_set_percent_dutycycle(u8 pin, u8 percent)
003246   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003248   ffe5
00324a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00324c   ffd9
00324e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003250   ffe5
003252   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003254   ffe5
003256   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003258   ffe5
00325a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00325c   ffe5
00325e   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003260   ffe5
003262   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003264   ffe5
003266   0e02     movlw   0x02             	MOVLW	0x02
003268   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00326a   f000
00326c   0e03     movlw   0x03             	MOVLW	0x03
00326e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003270   f001
                                           ;	.line	154; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (percent == 0)
003272   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003274   e103     bnz     0x00327c         	BNZ	_00675_DS_
                                           ;	.line	156; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	duty = 0;
003276   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003278   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00327a   d030     bra     0x0032dc         	BRA	_00676_DS_
                                           _00675_DS_:
                                           ;	.line	158; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	else if (percent >= 100)
00327c   0e64     movlw   0x64             	MOVLW	0x64
00327e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003280   e308     bnc     0x003292         	BNC	_00672_DS_
003282   0102     movlb   0x2              	BANKSEL	__pr2_plus1
                                           ;	.line	160; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	duty = _pr2_plus1 - 1;
003284   5161     movf    0x61, 0x0, 0x1   	MOVF	__pr2_plus1, W, B
003286   0fff     addlw   0xff             	ADDLW	0xff
003288   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00328a   0eff     movlw   0xff             	MOVLW	0xff
                                           ; removed redundant BANKSEL
00328c   2162     addwfc  0x62, 0x0, 0x1   	ADDWFC	(__pr2_plus1 + 1), W, B
00328e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003290   d025     bra     0x0032dc         	BRA	_00676_DS_
                                           _00672_DS_:
                                           ;	.line	164; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	duty = percent * (_pr2_plus1 / 4) / 25;	// (factor PR2/100)
003292   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
003294   0102     movlb   0x2              	BANKSEL	(__pr2_plus1 + 1)
003296   3162     rrcf    0x62, 0x0, 0x1   	RRCF	(__pr2_plus1 + 1), W, B
003298   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
                                           ; removed redundant BANKSEL
00329a   3161     rrcf    0x61, 0x0, 0x1   	RRCF	__pr2_plus1, W, B
00329c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00329e   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0032a0   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
0032a2   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0032a4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0032a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0032aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032ac   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0032ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0032b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032b2   ec27     call    0x00004e, 0x0call    0x00004e, 0x0 	CALL	__mulint
0032b4   f000
0032b6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0032b8   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
0032ba   f004
0032bc   0e04     movlw   0x04             	MOVLW	0x04
0032be   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0032c0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0032c2   0e19     movlw   0x19             	MOVLW	0x19
0032c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032c6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0032c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0032cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032ce   ec36     call    0x00366c, 0x0call    0x00366c, 0x0 	CALL	__divuint
0032d0   f01b
0032d2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0032d4   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0032d6   f003
0032d8   0e04     movlw   0x04             	MOVLW	0x04
0032da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00676_DS_:
                                           ;	.line	166; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	PWM_set_dutycycle(pin, duty << 2);
0032dc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0032de   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0032e0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0032e2   3403     rlcf    0x03, 0x0, 0x0   	RLCF	r0x03, W
0032e4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0032e6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0032e8   3601     rlcf    0x01, 0x1, 0x0   	RLCF	r0x01, F
0032ea   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
0032ec   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0032ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032f0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0032f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032f4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0032f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032f8   ec9d     call    0x00313a, 0x0call    0x00313a, 0x0 	CALL	_PWM_set_dutycycle
0032fa   f018
0032fc   0e03     movlw   0x03             	MOVLW	0x03
0032fe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003300   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003302   f005
003304   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003306   f004
003308   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00330a   f003
00330c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00330e   f002
003310   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003312   f001
003314   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003316   f000
003318   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00331a   ffd9
00331c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__PWM_set_dutycycle	code
                                           _PWM_set_dutycycle:
                                           ;	.line	98; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	void PWM_set_dutycycle(u8 pin, u16 duty)
00313a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00313c   ffe5
00313e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003140   ffd9
003142   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003144   ffe5
003146   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003148   ffe5
00314a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00314c   ffe5
00314e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003150   ffe5
003152   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003154   ffe5
003156   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003158   ffe5
00315a   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00315c   ffe5
00315e   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
003160   ffe5
003162   0e02     movlw   0x02             	MOVLW	0x02
003164   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003166   f000
003168   0e03     movlw   0x03             	MOVLW	0x03
00316a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00316c   f001
00316e   0e04     movlw   0x04             	MOVLW	0x04
003170   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003172   f002
                                           ;	.line	102; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (duty > 1023) duty = 1023;		// upper limit (10-bit)
003174   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
003176   e102     bnz     0x00317c         	BNZ	_00660_DS_
003178   0e00     movlw   0x00             	MOVLW	0x00
00317a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _00660_DS_:
00317c   e303     bnc     0x003184         	BNC	_00635_DS_
00317e   6801     setf    0x01, 0x0        	SETF	r0x01
003180   0e03     movlw   0x03             	MOVLW	0x03
003182   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00635_DS_:
                                           ;	.line	105; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	pinmode(pin, INPUT);				// PWM pin as INPUT
003184   c000     movff   0x000, 0x003     	MOVFF	r0x00, r0x03
003186   f003
003188   6a04     clrf    0x04, 0x0        	CLRF	r0x04
00318a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00318c   0e01     movlw   0x01             	MOVLW	0x01
00318e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003190   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003192   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003194   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003196   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
003198   f013
00319a   0e04     movlw   0x04             	MOVLW	0x04
00319c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00319e   0102     movlb   0x2              	BANKSEL	__pr2_plus1
                                           ;	.line	107; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	PR2 = _pr2_plus1 - 1;				// set PR2
0031a0   5161     movf    0x61, 0x0, 0x1   	MOVF	__pr2_plus1, W, B
0031a2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0031a4   0405     decf    0x05, 0x0, 0x0   	DECF	r0x05, W
0031a6   6ecb     movwf   0xcb, 0x0        	MOVWF	_PR2
                                           ;	.line	109; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (pin == 11)
0031a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031aa   0a0b     xorlw   0x0b             	XORLW	0x0b
0031ac   e113     bnz     0x0031d4         	BNZ	_00637_DS_
                                           ;	.line	112; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP2CON = Bin(00001111);		// reset also 2 LSbits of duty cycle
0031ae   0e0f     movlw   0x0f             	MOVLW	0x0f
0031b0   6eba     movwf   0xba, 0x0        	MOVWF	_CCP2CON
                                           ;	.line	114; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	temp = duty & Bin(00000011);	// extract 2 LSbits of duty
0031b2   0e03     movlw   0x03             	MOVLW	0x03
0031b4   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031b6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0031b8   6a06     clrf    0x06, 0x0        	CLRF	r0x06
                                           ;	.line	115; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	temp <<= 4;						// shift left 4 bits
0031ba   3805     swapf   0x05, 0x0, 0x0   	SWAPF	r0x05, W
0031bc   0bf0     andlw   0xf0             	ANDLW	0xf0
                                           ; #	MOVWF	r0x05
                                           ; #	MOVF	r0x05, W
                                           ;	.line	116; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP2CON |= temp;				// put in CCP2CON 4:5  (DCBx1 and DCBx0)
0031be   12ba     iorwf   0xba, 0x1, 0x0   	IORWF	_CCP2CON, F
                                           ;	.line	117; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR2L = duty >> 2;				// 8 MSbits of duty
0031c0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0031c2   3002     rrcf    0x02, 0x0, 0x0   	RRCF	r0x02, W
0031c4   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0031c6   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
0031c8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0031ca   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0031cc   3207     rrcf    0x07, 0x1, 0x0   	RRCF	r0x07, F
0031ce   3206     rrcf    0x06, 0x1, 0x0   	RRCF	r0x06, F
0031d0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0031d2   6ebb     movwf   0xbb, 0x0        	MOVWF	_CCPR2L
                                           _00637_DS_:
                                           ;	.line	120; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (pin == 12)
0031d4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031d6   0a0c     xorlw   0x0c             	XORLW	0x0c
0031d8   e113     bnz     0x003200         	BNZ	_00639_DS_
                                           ;	.line	123; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP1CON = Bin(00001111);
0031da   0e0f     movlw   0x0f             	MOVLW	0x0f
0031dc   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CON
                                           ;	.line	125; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	temp = duty & Bin(00000011);	// extract 2 LSbits of the duty
0031de   0e03     movlw   0x03             	MOVLW	0x03
0031e0   1401     andwf   0x01, 0x0, 0x0   	ANDWF	r0x01, W
0031e2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0031e4   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0031e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031e8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
                                           ;	.line	126; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	temp <<= 4;						// shift left 4 bits
0031ea   3805     swapf   0x05, 0x0, 0x0   	SWAPF	r0x05, W
0031ec   0bf0     andlw   0xf0             	ANDLW	0xf0
                                           ; #	MOVWF	r0x05
                                           ; #	MOVF	r0x05, W
                                           ;	.line	127; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCP1CON |= temp;				// put in CCP2CON 4:5
0031ee   12bd     iorwf   0xbd, 0x1, 0x0   	IORWF	_CCP1CON, F
                                           ;	.line	128; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	CCPR1L = duty >> 2;				// 8 MSbits of the duty
0031f0   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0031f2   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
0031f4   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
0031f6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0031f8   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
0031fa   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
0031fc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0031fe   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           _00639_DS_:
                                           ;	.line	132; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	PIR1bits.TMR2IF = 0;				// reset this flag for the next test
003200   929e     bcf     0x9e, 0x1, 0x0   	BCF	_PIR1bits, 1
                                           ;	.line	133; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	T2CON = _t2con;						// Timer2 prescaler
003202   c26a     movff   0x26a, 0xfca     	MOVFF	__t2con, _T2CON
003204   ffca
                                           ;	.line	134; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	T2CONbits.TMR2ON = ON;				// enable Timer2
003206   84ca     bsf     0xca, 0x2, 0x0   	BSF	_T2CONbits, 2
                                           _00640_DS_:
                                           ;	.line	136; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	while (PIR1bits.TMR2IF == 0);		// Wait until TMR2 overflows
003208   a29e     btfss   0x9e, 0x1, 0x0   	BTFSS	_PIR1bits, 1
00320a   d7fe     bra     0x003208         	BRA	_00640_DS_
                                           ;	.line	137; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	pinmode(pin, OUTPUT);				// PWM pin as OUTPUT
00320c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00320e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003210   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003212   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003214   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003216   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003218   ece5     call    0x0027ca, 0x0call    0x0027ca, 0x0 	CALL	_pinmode
00321a   f013
00321c   0e04     movlw   0x04             	MOVLW	0x04
00321e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003220   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
003222   f007
003224   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003226   f006
003228   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00322a   f005
00322c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00322e   f004
003230   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003232   f003
003234   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003236   f002
003238   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00323a   f001
00323c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00323e   f000
003240   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003242   ffd9
003244   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__PWM_set_frequency	code
                                           _PWM_set_frequency:
                                           ;	.line	55; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	void PWM_set_frequency(u32 freq)
00331e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003320   ffe5
003322   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003324   ffd9
003326   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003328   ffe5
00332a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00332c   ffe5
00332e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003330   ffe5
003332   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003334   ffe5
003336   0e02     movlw   0x02             	MOVLW	0x02
003338   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00333a   f000
00333c   0e03     movlw   0x03             	MOVLW	0x03
00333e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003340   f001
003342   0e04     movlw   0x04             	MOVLW	0x04
003344   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003346   f002
003348   0e05     movlw   0x05             	MOVLW	0x05
00334a   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
00334c   f003
                                           ;	.line	58; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_pr2_plus1 = MIPS / freq;				// FOSC / (4 * PWM Frequency)
00334e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003350   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003352   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003354   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003356   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00335a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00335c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00335e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
003360   0eb7     movlw   0xb7             	MOVLW	0xb7
003362   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003364   0e1b     movlw   0x1b             	MOVLW	0x1b
003366   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003368   0e00     movlw   0x00             	MOVLW	0x00
00336a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00336c   ec0d     call    0x00301a, 0x0call    0x00301a, 0x0 	CALL	__divulong
00336e   f018
003370   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003372   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003374   f001
003376   0e08     movlw   0x08             	MOVLW	0x08
003378   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00337a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00337c   0102     movlb   0x2              	BANKSEL	__pr2_plus1
00337e   6f61     movwf   0x61, 0x1        	MOVWF	__pr2_plus1, B
003380   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
003382   6f62     movwf   0x62, 0x1        	MOVWF	(__pr2_plus1 + 1), B
                                           ;	.line	64; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (_pr2_plus1 <= 4096)					// check if it's not too high
003384   0e10     movlw   0x10             	MOVLW	0x10
                                           ; removed redundant BANKSEL
003386   5d62     subwf   0x62, 0x0, 0x1   	SUBWF	(__pr2_plus1 + 1), W, B
003388   e102     bnz     0x00338e         	BNZ	_00627_DS_
00338a   0e01     movlw   0x01             	MOVLW	0x01
                                           ; removed redundant BANKSEL
00338c   5d61     subwf   0x61, 0x0, 0x1   	SUBWF	__pr2_plus1, W, B
                                           _00627_DS_:
00338e   e227     bc      0x0033de         	BC	_00616_DS_
                                           ;	.line	66; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	if (_pr2_plus1 <= 256)				// no needs of any prescaler
003390   0e01     movlw   0x01             	MOVLW	0x01
003392   0102     movlb   0x2              	BANKSEL	(__pr2_plus1 + 1)
003394   5d62     subwf   0x62, 0x0, 0x1   	SUBWF	(__pr2_plus1 + 1), W, B
003396   e102     bnz     0x00339c         	BNZ	_00628_DS_
003398   0e01     movlw   0x01             	MOVLW	0x01
                                           ; removed redundant BANKSEL
00339a   5d61     subwf   0x61, 0x0, 0x1   	SUBWF	__pr2_plus1, W, B
                                           _00628_DS_:
00339c   e203     bc      0x0033a4         	BC	_00612_DS_
00339e   0102     movlb   0x2              	BANKSEL	__t2con
                                           ;	.line	68; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_t2con = Bin(00);				// prescaler is 1
0033a0   6b6a     clrf    0x6a, 0x1        	CLRF	__t2con, B
0033a2   d01d     bra     0x0033de         	BRA	_00616_DS_
                                           _00612_DS_:
                                           ;	.line	70; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	else if (_pr2_plus1 <= 1024)		// needs prescaler 1:4
0033a4   0e04     movlw   0x04             	MOVLW	0x04
0033a6   0102     movlb   0x2              	BANKSEL	(__pr2_plus1 + 1)
0033a8   5d62     subwf   0x62, 0x0, 0x1   	SUBWF	(__pr2_plus1 + 1), W, B
0033aa   e102     bnz     0x0033b0         	BNZ	_00629_DS_
0033ac   0e01     movlw   0x01             	MOVLW	0x01
                                           ; removed redundant BANKSEL
0033ae   5d61     subwf   0x61, 0x0, 0x1   	SUBWF	__pr2_plus1, W, B
                                           _00629_DS_:
0033b0   e20b     bc      0x0033c8         	BC	_00609_DS_
                                           ;	.line	72; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_pr2_plus1 = _pr2_plus1 >> 2;	// divided by 4
0033b2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0033b4   0102     movlb   0x2              	BANKSEL	(__pr2_plus1 + 1)
0033b6   3362     rrcf    0x62, 0x1, 0x1   	RRCF	(__pr2_plus1 + 1), F, B
                                           ; removed redundant BANKSEL
0033b8   3361     rrcf    0x61, 0x1, 0x1   	RRCF	__pr2_plus1, F, B
0033ba   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           ; removed redundant BANKSEL
0033bc   3362     rrcf    0x62, 0x1, 0x1   	RRCF	(__pr2_plus1 + 1), F, B
                                           ; removed redundant BANKSEL
0033be   3361     rrcf    0x61, 0x1, 0x1   	RRCF	__pr2_plus1, F, B
                                           ;	.line	73; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_t2con = Bin(01);				// prescaler is 4
0033c0   0e01     movlw   0x01             	MOVLW	0x01
0033c2   0102     movlb   0x2              	BANKSEL	__t2con
0033c4   6f6a     movwf   0x6a, 0x1        	MOVWF	__t2con, B
0033c6   d00b     bra     0x0033de         	BRA	_00616_DS_
                                           _00609_DS_:
                                           ;	.line	77; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_pr2_plus1 = _pr2_plus1 >> 4;	// divided by 16
0033c8   0ef0     movlw   0xf0             	MOVLW	0xf0
0033ca   0102     movlb   0x2              	BANKSEL	__pr2_plus1
0033cc   1761     andwf   0x61, 0x1, 0x1   	ANDWF	__pr2_plus1, F, B
0033ce   3b61     swapf   0x61, 0x1, 0x1   	SWAPF	__pr2_plus1, F, B
                                           ; removed redundant BANKSEL
0033d0   3b62     swapf   0x62, 0x1, 0x1   	SWAPF	(__pr2_plus1 + 1), F, B
0033d2   1562     andwf   0x62, 0x0, 0x1   	ANDWF	(__pr2_plus1 + 1), W, B
0033d4   1b62     xorwf   0x62, 0x1, 0x1   	XORWF	(__pr2_plus1 + 1), F, B
                                           ; removed redundant BANKSEL
0033d6   2761     addwf   0x61, 0x1, 0x1   	ADDWF	__pr2_plus1, F, B
                                           ;	.line	78; /home/vbasel/.icaro/v2/firmware/tmp/pwm.c	_t2con = Bin(10);				// prescaler is 16
0033d8   0e02     movlw   0x02             	MOVLW	0x02
0033da   0102     movlb   0x2              	BANKSEL	__t2con
0033dc   6f6a     movwf   0x6a, 0x1        	MOVWF	__t2con, B
                                           _00616_DS_:
0033de   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0033e0   f003
0033e2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0033e4   f002
0033e6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0033e8   f001
0033ea   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0033ec   f000
0033ee   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0033f0   ffd9
0033f2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Delayus	code
                                           _Delayus:
                                           ;	.line	16; /home/vbasel/.icaro/v2/firmware/tmp/arduinodelay.c	void Delayus(int microsecondes)
0039d4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0039d6   ffe5
0039d8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0039da   ffd9
0039dc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0039de   ffe5
0039e0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0039e2   ffe5
0039e4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0039e6   ffe5
0039e8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0039ea   ffe5
0039ec   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0039ee   ffe5
0039f0   0e02     movlw   0x02             	MOVLW	0x02
0039f2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0039f4   f000
0039f6   0e03     movlw   0x03             	MOVLW	0x03
0039f8   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0039fa   f001
                                           ;	.line	20; /home/vbasel/.icaro/v2/firmware/tmp/arduinodelay.c	for (i=0;i<microsecondes;i++);
0039fc   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0039fe   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00592_DS_:
003a00   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003a02   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
                                           ; #	MOVF	r0x01, W
                                           ; #	MOVWF	r0x05
                                           ; #	MOVF	r0x05, W
003a04   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003a06   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
003a08   e102     bnz     0x003a0e         	BNZ	_00603_DS_
003a0a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003a0c   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
                                           _00603_DS_:
003a0e   e203     bc      0x003a16         	BC	_00594_DS_
003a10   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
003a12   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
003a14   d7f5     bra     0x003a00         	BRA	_00592_DS_
                                           _00594_DS_:
003a16   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003a18   f004
003a1a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003a1c   f003
003a1e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003a20   f002
003a22   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003a24   f001
003a26   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003a28   f000
003a2a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003a2c   ffd9
003a2e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Delayms	code
                                           _Delayms:
                                           ;	.line	9; /home/vbasel/.icaro/v2/firmware/tmp/arduinodelay.c	void Delayms(unsigned long milliseconde)
0037bc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0037be   ffe5
0037c0   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0037c2   ffd9
0037c4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0037c6   ffe5
0037c8   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0037ca   ffe5
0037cc   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0037ce   ffe5
0037d0   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0037d2   ffe5
0037d4   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0037d6   ffe5
0037d8   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0037da   ffe5
0037dc   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0037de   ffe5
0037e0   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
0037e2   ffe5
0037e4   0e02     movlw   0x02             	MOVLW	0x02
0037e6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0037e8   f000
0037ea   0e03     movlw   0x03             	MOVLW	0x03
0037ec   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0037ee   f001
0037f0   0e04     movlw   0x04             	MOVLW	0x04
0037f2   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0037f4   f002
0037f6   0e05     movlw   0x05             	MOVLW	0x05
0037f8   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
0037fa   f003
                                           ;	.line	13; /home/vbasel/.icaro/v2/firmware/tmp/arduinodelay.c	for (i=0;i<milliseconde;i++) delay10ktcy(1);
0037fc   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0037fe   6a05     clrf    0x05, 0x0        	CLRF	r0x05
003800   6a06     clrf    0x06, 0x0        	CLRF	r0x06
003802   6a07     clrf    0x07, 0x0        	CLRF	r0x07
                                           _00573_DS_:
003804   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003806   5c07     subwf   0x07, 0x0, 0x0   	SUBWF	r0x07, W
003808   e108     bnz     0x00381a         	BNZ	_00584_DS_
00380a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00380c   5c06     subwf   0x06, 0x0, 0x0   	SUBWF	r0x06, W
00380e   e105     bnz     0x00381a         	BNZ	_00584_DS_
003810   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003812   5c05     subwf   0x05, 0x0, 0x0   	SUBWF	r0x05, W
003814   e102     bnz     0x00381a         	BNZ	_00584_DS_
003816   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003818   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
                                           _00584_DS_:
00381a   e20a     bc      0x003830         	BC	_00575_DS_
00381c   0e01     movlw   0x01             	MOVLW	0x01
00381e   ec37     call    0x00006e, 0x0call    0x00006e, 0x0 	CALL	_delay10ktcy
003820   f000
003822   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
003824   e3ef     bnc     0x003804         	BNC	_00573_DS_
003826   2a05     incf    0x05, 0x1, 0x0   	INCF	r0x05, F
003828   e3ed     bnc     0x003804         	BNC	_00573_DS_
00382a   4a06     infsnz  0x06, 0x1, 0x0   	INFSNZ	r0x06, F
00382c   2a07     incf    0x07, 0x1, 0x0   	INCF	r0x07, F
                                           _00585_DS_:
00382e   d7ea     bra     0x003804         	BRA	_00573_DS_
                                           _00575_DS_:
003830   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
003832   f007
003834   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003836   f006
003838   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00383a   f005
00383c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00383e   f004
003840   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003842   f003
003844   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003846   f002
003848   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00384a   f001
00384c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00384e   f000
003850   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003852   ffd9
003854   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogread	code
                                           _analogread:
                                           ;	.line	40; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	unsigned int analogread(unsigned char channel)
0038ee   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0038f0   ffe5
0038f2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0038f4   ffd9
0038f6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0038f8   ffe5
0038fa   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0038fc   ffe5
0038fe   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003900   ffe5
003902   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003904   ffe5
003906   0e02     movlw   0x02             	MOVLW	0x02
003908   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00390a   f000
                                           ;	.line	55; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON0=(channel-13)*4;
00390c   0ef3     movlw   0xf3             	MOVLW	0xf3
00390e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
                                           ; ;multiply lit val:0x04 by variable r0x00 and store in _ADCON0
003910   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003912   0d04     mullw   0x04             	MULLW	0x04
003914   cff3     movff   0xff3, 0xfc2     	MOVFF	PRODL, _ADCON0
003916   ffc2
                                           ;	.line	59; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON0bits.ADON=1;
003918   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
                                           ;	.line	60; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	for (result=1;result<10;result++) __asm NOP __endasm;
00391a   0e09     movlw   0x09             	MOVLW	0x09
00391c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00391e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00565_DS_:
003920   0000     nop                      	NOP	
003922   0eff     movlw   0xff             	MOVLW	0xff
003924   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003926   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003928   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00392a   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
00392c   e1f9     bnz     0x003920         	BNZ	_00565_DS_
                                           ;	.line	61; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON0bits.GO=1;
00392e   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           _00560_DS_:
                                           ;	.line	62; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	while (ADCON0bits.GO);
003930   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
003932   d7fe     bra     0x003930         	BRA	_00560_DS_
                                           ;	.line	63; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	result=ADRESH<<8;
003934   cfc4     movff   0xfc4, 0x000     	MOVFF	_ADRESH, r0x00
003936   f000
003938   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00393a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00393c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00393e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           ;	.line	64; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	result+=ADRESL;
003940   cfc3     movff   0xfc3, 0x000     	MOVFF	_ADRESL, r0x00
003942   f000
003944   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003946   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003948   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00394a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00394c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
                                           ;	.line	65; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON0bits.ADON=0;
00394e   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	66; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	return(result);
003950   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
003952   fff3
003954   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003956   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003958   f003
00395a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00395c   f002
00395e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003960   f001
003962   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003964   f000
003966   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003968   ffd9
00396a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogReference	code
                                           _analogReference:
                                           ;	.line	32; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	void analogReference(unsigned char Type)
003c2a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003c2c   ffe5
003c2e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003c30   ffd9
003c32   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003c34   ffe5
003c36   0e02     movlw   0x02             	MOVLW	0x02
003c38   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003c3a   f000
                                           ; #	MOVF	r0x00, W
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00543_DS_
                                           ; #	GOTO	_00545_DS_
                                           ; #	MOVF	r0x00, W
                                           ;	.line	34; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	if(Type == DEFAULTAN)			//the default analog reference of 5 volts (on 5V Arduino boards) or 3.3 volts (on 3.3V Arduino boards)
003c3c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ;	.line	35; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON1|=0x00;			//Vref+ = VDD
003c3e   e004     bz      0x003c48         	BZ	_00545_DS_
                                           ;	.line	36; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	else if(Type == EXTERNAL)	//the voltage applied to the AREF pin (0 to 5V only) is used as the reference.
003c40   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003c42   0a01     xorlw   0x01             	XORLW	0x01
003c44   e101     bnz     0x003c48         	BNZ	_00545_DS_
                                           ;	.line	37; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON1|=0x10;			//Vref+ = External source
003c46   88c1     bsf     0xc1, 0x4, 0x0   	BSF	_ADCON1, 4
                                           _00545_DS_:
003c48   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003c4a   f000
003c4c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003c4e   ffd9
003c50   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analog_init	code
                                           _analog_init:
                                           ;	.line	15; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	TRISA=TRISA | 0x2F;
003caa   0e2f     movlw   0x2f             	MOVLW	0x2f
003cac   1292     iorwf   0x92, 0x1, 0x0   	IORWF	_TRISA, F
                                           ;	.line	16; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	TRISE=TRISE | 0x07;	
003cae   0e07     movlw   0x07             	MOVLW	0x07
003cb0   1296     iorwf   0x96, 0x1, 0x0   	IORWF	_TRISE, F
                                           ;	.line	17; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON1=0x07;
003cb2   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1
                                           ;	.line	18; /home/vbasel/.icaro/v2/firmware/tmp/analog.c	ADCON2=0xBD;
003cb4   0ebd     movlw   0xbd             	MOVLW	0xbd
003cb6   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2
003cb8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__servos_interrupt	code
                                           _servos_interrupt:
                                           ;	.line	288; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (PIR1bits.TMR1IF) {
003b14   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
003b16   d020     bra     0x003b58         	BRA	_00530_DS_
                                           ;	.line	289; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PIR1bits.TMR1IF=0;
003b18   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	290; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	T1CON=0x00;
003b1a   6acd     clrf    0xcd, 0x0        	CLRF	_T1CON
003b1c   0102     movlb   0x2              	BANKSEL	_phase
                                           ;	.line	291; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (phase) {
003b1e   515b     movf    0x5b, 0x0, 0x1   	MOVF	_phase, W, B
003b20   e00b     bz      0x003b38         	BZ	_00526_DS_
                                           ;	.line	293; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	ServosPulseUp();
003b22   ec6a     call    0x003cd4, 0x0call    0x003cd4, 0x0 	CALL	_ServosPulseUp
003b24   f01e
                                           ;	.line	295; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1H= 0xf2; //0xd3;
003b26   0ef2     movlw   0xf2             	MOVLW	0xf2
003b28   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	296; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1L= 0x30;//ff; //0x8f;
003b2a   0e30     movlw   0x30             	MOVLW	0x30
003b2c   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	298; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	T1CON=1;
003b2e   0e01     movlw   0x01             	MOVLW	0x01
003b30   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
003b32   0102     movlb   0x2              	BANKSEL	_phase
                                           ;	.line	299; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	phase = 0;
003b34   6b5b     clrf    0x5b, 0x1        	CLRF	_phase, B
003b36   d010     bra     0x003b58         	BRA	_00530_DS_
                                           _00526_DS_:
                                           ;	.line	304; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	ServosPulseDown();
003b38   ec8e     call    0x00371c, 0x0call    0x00371c, 0x0 	CALL	_ServosPulseDown
003b3a   f01b
                                           ;	.line	308; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1H= 0x2d;//0x2d;
003b3c   0e2d     movlw   0x2d             	MOVLW	0x2d
003b3e   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	309; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1L= 0x0f;
003b40   0e0f     movlw   0x0f             	MOVLW	0x0f
003b42   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ; #	MOVF	_needreordering, W, B
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00524_DS_
                                           ; #	CALL	_SortServoTimings
                                           ; #	MOVLW	0x21
003b44   0102     movlb   0x2              	BANKSEL	_needreordering
                                           ;	.line	311; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (needreordering)	
003b46   515c     movf    0x5c, 0x0, 0x1   	MOVF	_needreordering, W, B
                                           ;	.line	312; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	SortServoTimings();  // This takes more than 1 ms, but it's call only if needed.
003b48   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
                                           ;	.line	313; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	T1CON= ( 1 | 2 << 4 ) ; // activate timer1 and prescaler = 1:4
003b4a   ec35     call    0x00206a, 0x0call    0x00206a, 0x0 	CALL	_SortServoTimings
003b4c   f010
003b4e   0e21     movlw   0x21             	MOVLW	0x21
003b50   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
                                           ;	.line	314; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	phase = 1;  //This indicates that after next interrupt it will start the servos cycle.
003b52   0e01     movlw   0x01             	MOVLW	0x01
003b54   0102     movlb   0x2              	BANKSEL	_phase
003b56   6f5b     movwf   0x5b, 0x1        	MOVWF	_phase, B
                                           _00530_DS_:
                                           ;	.line	317; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return;
003b58   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoMaximumPulse	code
                                           _ServoMaximumPulse:
                                           ;	.line	273; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void ServoMaximumPulse(uchar servo)
003b5a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003b5c   ffe5
003b5e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003b60   ffd9
003b62   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003b64   ffe5
003b66   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003b68   ffe5
003b6a   0e02     movlw   0x02             	MOVLW	0x02
003b6c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003b6e   f000
                                           ;	.line	275; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(servo>=18)        // test if numservo is valid
003b70   0e12     movlw   0x12             	MOVLW	0x12
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00512_DS_
                                           ; #	GOTO	_00513_DS_
                                           ; #	CLRF	r0x01
                                           ;	.line	276; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return;
003b72   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	278; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	servovalues[servo]=SERVOMAX;  //  250 = 2000 useg pulse
003b74   e20e     bc      0x003b92         	BC	_00513_DS_
003b76   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003b78   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
003b7a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003b7c   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
003b7e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003b80   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003b82   ffe9
003b84   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003b86   ffea
003b88   0efa     movlw   0xfa             	MOVLW	0xfa
003b8a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	280; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	needreordering=1;  // This indicates servo timings must be reordered.
003b8c   0e01     movlw   0x01             	MOVLW	0x01
003b8e   0102     movlb   0x2              	BANKSEL	_needreordering
003b90   6f5c     movwf   0x5c, 0x1        	MOVWF	_needreordering, B
                                           _00513_DS_:
003b92   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003b94   f001
003b96   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003b98   f000
003b9a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003b9c   ffd9
003b9e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoMinimumPulse	code
                                           _ServoMinimumPulse:
                                           ;	.line	262; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void ServoMinimumPulse(uchar servo)
003be6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003be8   ffe5
003bea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003bec   ffd9
003bee   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003bf0   ffe5
003bf2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003bf4   ffe5
003bf6   0e02     movlw   0x02             	MOVLW	0x02
003bf8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003bfa   f000
                                           ;	.line	264; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(servo>=18)        // test if numservo is valid
003bfc   0e12     movlw   0x12             	MOVLW	0x12
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00500_DS_
                                           ; #	GOTO	_00501_DS_
                                           ; #	CLRF	r0x01
                                           ;	.line	265; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return;
003bfe   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	267; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	servovalues[servo]=SERVOMIN;  //  1 = 1000 useg pulse
003c00   e20d     bc      0x003c1c         	BC	_00501_DS_
003c02   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003c04   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
003c06   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003c08   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
003c0a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003c0c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003c0e   ffe9
003c10   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003c12   ffea
003c14   0e01     movlw   0x01             	MOVLW	0x01
003c16   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
003c18   0102     movlb   0x2              	BANKSEL	_needreordering
                                           ;	.line	269; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	needreordering=1;  // This indicates servo timings must be reordered.
003c1a   6f5c     movwf   0x5c, 0x1        	MOVWF	_needreordering, B
                                           _00501_DS_:
003c1c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003c1e   f001
003c20   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003c22   f000
003c24   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003c26   ffd9
003c28   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoRead	code
                                           _ServoRead:
                                           ;	.line	254; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	unsigned char ServoRead(uchar servo)
003ba0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003ba2   ffe5
003ba4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003ba6   ffd9
003ba8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003baa   ffe5
003bac   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003bae   ffe5
003bb0   0e02     movlw   0x02             	MOVLW	0x02
003bb2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003bb4   f000
                                           ;	.line	256; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(servo>=18)        // test if numservo is valid
003bb6   0e12     movlw   0x12             	MOVLW	0x12
003bb8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003bba   e302     bnc     0x003bc0         	BNC	_00488_DS_
                                           ;	.line	257; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return 0;
003bbc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
003bbe   d00c     bra     0x003bd8         	BRA	_00489_DS_
                                           _00488_DS_:
                                           ;	.line	258; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return servovalues[servo];
003bc0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003bc2   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
003bc4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003bc6   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
003bc8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003bca   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003bcc   ffe9
003bce   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003bd0   ffea
003bd2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
003bd4   f000
003bd6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           _00489_DS_:
003bd8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003bda   f001
003bdc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003bde   f000
003be0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003be2   ffd9
003be4   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoWrite	code
                                           _ServoWrite:
                                           ;	.line	239; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void ServoWrite(uchar servo, uchar value)
00396c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00396e   ffe5
003970   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003972   ffd9
003974   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003976   ffe5
003978   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00397a   ffe5
00397c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00397e   ffe5
003980   0e02     movlw   0x02             	MOVLW	0x02
003982   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003984   f000
003986   0e03     movlw   0x03             	MOVLW	0x03
003988   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00398a   f001
                                           ;	.line	241; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(servo>=18)        // test if numservo is valid
00398c   0e12     movlw   0x12             	MOVLW	0x12
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00464_DS_
                                           ; #	GOTO	_00469_DS_
                                           ; #	MOVLW	0x01
                                           ;	.line	242; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	return;
00398e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	244; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(value<SERVOMIN)  //  1 = 1000 useg pulse
003990   e218     bc      0x0039c2         	BC	_00469_DS_
003992   0e01     movlw   0x01             	MOVLW	0x01
003994   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
003996   e202     bc      0x00399c         	BC	_00466_DS_
                                           ;	.line	245; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	value=SERVOMIN;
003998   0e01     movlw   0x01             	MOVLW	0x01
00399a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00466_DS_:
                                           ;	.line	246; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(value>SERVOMAX) // 250 = 2000 useg pulse
00399c   0efb     movlw   0xfb             	MOVLW	0xfb
00399e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0039a0   e302     bnc     0x0039a6         	BNC	_00468_DS_
                                           ;	.line	247; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	value=SERVOMAX;
0039a2   0efa     movlw   0xfa             	MOVLW	0xfa
0039a4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00468_DS_:
                                           ;	.line	248; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	servovalues[servo]=value;
0039a6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0039a8   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
0039aa   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0039ac   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
0039ae   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0039b0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0039b2   ffe9
0039b4   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0039b6   ffea
0039b8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0039ba   ffef
                                           ;	.line	250; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	needreordering=1;  // This indicates servo timings must be reordered.
0039bc   0e01     movlw   0x01             	MOVLW	0x01
0039be   0102     movlb   0x2              	BANKSEL	_needreordering
0039c0   6f5c     movwf   0x5c, 0x1        	MOVWF	_needreordering, B
                                           _00469_DS_:
0039c2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0039c4   f002
0039c6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0039c8   f001
0039ca   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0039cc   f000
0039ce   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0039d0   ffd9
0039d2   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoDetach	code
                                           _ServoDetach:
                                           ;	.line	225; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void ServoDetach(uchar pin)
0033f4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0033f6   ffe5
0033f8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0033fa   ffd9
0033fc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0033fe   ffe5
003400   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003402   ffe5
003404   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003406   ffe5
003408   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00340a   ffe5
00340c   0e02     movlw   0x02             	MOVLW	0x02
00340e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003410   f000
                                           ;	.line	227; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(pin>=18) return;
003412   0e12     movlw   0x12             	MOVLW	0x12
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00437_DS_
                                           ; #	GOTO	_00444_DS_
                                           ; #	MOVLW	0x08
                                           ;	.line	229; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(pin<8){
003414   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003416   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003418   d04c     bra     0x0034b2         	BRA	_00444_DS_
00341a   0e08     movlw   0x08             	MOVLW	0x08
00341c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00341e   e218     bc      0x003450         	BC	_00442_DS_
                                           ;	.line	230; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_B] = activatedservos[MaskPort_B] ^ servomasks[pin];
003420   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
003422   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
003424   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003426   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003428   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
00342a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00342c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00342e   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
003430   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003432   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
003434   fff6
003436   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
003438   fff7
00343a   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
00343c   fff8
00343e   0009     tblrd*+                  	TBLRD*+	
003440   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
003442   f001
003444   0102     movlb   0x2              	BANKSEL	_activatedservos
003446   515e     movf    0x5e, 0x0, 0x1   	MOVF	_activatedservos, W, B
003448   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
00344a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00344c   6f5e     movwf   0x5e, 0x1        	MOVWF	_activatedservos, B
00344e   d031     bra     0x0034b2         	BRA	_00444_DS_
                                           _00442_DS_:
                                           ;	.line	231; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	} else if (pin>12) {
003450   0e0d     movlw   0x0d             	MOVLW	0x0d
003452   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003454   e318     bnc     0x003486         	BNC	_00439_DS_
                                           ;	.line	232; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_A] = activatedservos[MaskPort_A] ^ servomasks[pin];
003456   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
003458   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00345a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00345c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00345e   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
003460   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003462   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003464   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
003466   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003468   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00346a   fff6
00346c   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
00346e   fff7
003470   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
003472   fff8
003474   0009     tblrd*+                  	TBLRD*+	
003476   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
003478   f001
00347a   0102     movlb   0x2              	BANKSEL	(_activatedservos + 2)
00347c   5160     movf    0x60, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
00347e   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
003480   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
003482   6f60     movwf   0x60, 0x1        	MOVWF	(_activatedservos + 2), B
003484   d016     bra     0x0034b2         	BRA	_00444_DS_
                                           _00439_DS_:
                                           ;	.line	234; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_C] = activatedservos[MaskPort_C] ^ servomasks[pin];
003486   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003488   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00348a   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
00348c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00348e   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
003490   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003492   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
003494   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003496   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
003498   fff6
00349a   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00349c   fff7
00349e   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0034a0   fff8
0034a2   0009     tblrd*+                  	TBLRD*+	
0034a4   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0034a6   f000
0034a8   0102     movlb   0x2              	BANKSEL	(_activatedservos + 1)
0034aa   515f     movf    0x5f, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
0034ac   1a00     xorwf   0x00, 0x1, 0x0   	XORWF	r0x00, F
0034ae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0034b0   6f5f     movwf   0x5f, 0x1        	MOVWF	(_activatedservos + 1), B
                                           _00444_DS_:
0034b2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0034b4   f003
0034b6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0034b8   f002
0034ba   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0034bc   f001
0034be   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0034c0   f000
0034c2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0034c4   ffd9
0034c6   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoAttach	code
                                           _ServoAttach:
                                           ;	.line	208; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void ServoAttach(uchar pin)
002ef6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002ef8   ffe5
002efa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002efc   ffd9
002efe   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f00   ffe5
002f02   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002f04   ffe5
002f06   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002f08   ffe5
002f0a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002f0c   ffe5
002f0e   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002f10   ffe5
002f12   0e02     movlw   0x02             	MOVLW	0x02
002f14   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002f16   f000
                                           ;	.line	210; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(pin>=18) return;
002f18   0e12     movlw   0x12             	MOVLW	0x12
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00409_DS_
                                           ; #	GOTO	_00416_DS_
                                           ; #	MOVLW	0x08
                                           ;	.line	212; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if(pin<8){
002f1a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002f1c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002f1e   d070     bra     0x003000         	BRA	_00416_DS_
002f20   0e08     movlw   0x08             	MOVLW	0x08
002f22   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002f24   e224     bc      0x002f6e         	BC	_00414_DS_
                                           ;	.line	213; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_B] = activatedservos[MaskPort_B] | servomasks[pin];  // list pin as servo driver.
002f26   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
002f28   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002f2a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f2c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002f2e   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
002f30   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002f32   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002f34   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
002f36   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002f38   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002f3a   fff6
002f3c   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002f3e   fff7
002f40   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002f42   fff8
002f44   0009     tblrd*+                  	TBLRD*+	
002f46   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002f48   f004
002f4a   0102     movlb   0x2              	BANKSEL	_activatedservos
002f4c   515e     movf    0x5e, 0x0, 0x1   	MOVF	_activatedservos, W, B
002f4e   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
002f50   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
002f52   6f5e     movwf   0x5e, 0x1        	MOVWF	_activatedservos, B
                                           ;	.line	214; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TRISB = TRISB & (255 - servomasks[pin]); // set as output pin
002f54   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002f56   fff6
002f58   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002f5a   fff7
002f5c   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002f5e   fff8
002f60   0009     tblrd*+                  	TBLRD*+	
002f62   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
002f64   f001
002f66   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002f68   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
002f6a   1693     andwf   0x93, 0x1, 0x0   	ANDWF	_TRISB, F
002f6c   d049     bra     0x003000         	BRA	_00416_DS_
                                           _00414_DS_:
                                           ;	.line	215; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	} else if (pin>12) {
002f6e   0e0d     movlw   0x0d             	MOVLW	0x0d
002f70   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002f72   e324     bnc     0x002fbc         	BNC	_00411_DS_
                                           ;	.line	216; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_A] = activatedservos[MaskPort_A] | servomasks[pin];  // list pin as servo driver.
002f74   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
002f76   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002f78   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f7a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002f7c   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
002f7e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002f80   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002f82   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
002f84   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002f86   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002f88   fff6
002f8a   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002f8c   fff7
002f8e   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002f90   fff8
002f92   0009     tblrd*+                  	TBLRD*+	
002f94   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002f96   f004
002f98   0102     movlb   0x2              	BANKSEL	(_activatedservos + 2)
002f9a   5160     movf    0x60, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
002f9c   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
002f9e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
002fa0   6f60     movwf   0x60, 0x1        	MOVWF	(_activatedservos + 2), B
                                           ;	.line	217; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TRISA = TRISA & (255 - servomasks[pin]); // set as output pin
002fa2   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002fa4   fff6
002fa6   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002fa8   fff7
002faa   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002fac   fff8
002fae   0009     tblrd*+                  	TBLRD*+	
002fb0   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
002fb2   f001
002fb4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002fb6   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
002fb8   1692     andwf   0x92, 0x1, 0x0   	ANDWF	_TRISA, F
002fba   d022     bra     0x003000         	BRA	_00416_DS_
                                           _00411_DS_:
                                           ;	.line	219; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	activatedservos[MaskPort_C] = activatedservos[MaskPort_C] | servomasks[pin];  // list pin as servo driver.
002fbc   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002fbe   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002fc0   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
002fc2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002fc4   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
002fc6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002fc8   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
002fca   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002fcc   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
002fce   fff6
002fd0   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
002fd2   fff7
002fd4   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002fd6   fff8
002fd8   0009     tblrd*+                  	TBLRD*+	
002fda   cff5     movff   0xff5, 0x003     	MOVFF	TABLAT, r0x03
002fdc   f003
002fde   0102     movlb   0x2              	BANKSEL	(_activatedservos + 1)
002fe0   515f     movf    0x5f, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
002fe2   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
002fe4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
002fe6   6f5f     movwf   0x5f, 0x1        	MOVWF	(_activatedservos + 1), B
                                           ;	.line	220; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TRISC = TRISC & (255 - servomasks[pin]); // set as output pin
002fe8   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
002fea   fff6
002fec   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
002fee   fff7
002ff0   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002ff2   fff8
002ff4   0009     tblrd*+                  	TBLRD*+	
002ff6   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002ff8   f000
002ffa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002ffc   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
002ffe   1694     andwf   0x94, 0x1, 0x0   	ANDWF	_TRISC, F
                                           _00416_DS_:
003000   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003002   f004
003004   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003006   f003
003008   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00300a   f002
00300c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00300e   f001
003010   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003012   f000
003014   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003016   ffd9
003018   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SortServoTimings	code
                                           _SortServoTimings:
                                           ;	.line	124; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	static void SortServoTimings()
00206a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00206c   ffe5
00206e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002070   ffe5
002072   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002074   ffe5
002076   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002078   ffe5
00207a   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00207c   ffe5
00207e   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002080   ffe5
002082   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002084   ffe5
002086   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002088   ffe5
00208a   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
00208c   ffe5
00208e   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
002090   ffe5
002092   c00a     movff   0x00a, 0xfe5     	MOVFF	r0x0a, POSTDEC1
002094   ffe5
002096   c00b     movff   0x00b, 0xfe5     	MOVFF	r0x0b, POSTDEC1
002098   ffe5
00209a   c00c     movff   0x00c, 0xfe5     	MOVFF	r0x0c, POSTDEC1
00209c   ffe5
00209e   0102     movlb   0x2              	BANKSEL	_SortServoTimings_mascaratotal_1_27
                                           ;	.line	131; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	uchar mascaratotal[3]={0x00,0x00,0x00};
0020a0   6b65     clrf    0x65, 0x1        	CLRF	_SortServoTimings_mascaratotal_1_27, B
                                           ; removed redundant BANKSEL
0020a2   6b66     clrf    0x66, 0x1        	CLRF	(_SortServoTimings_mascaratotal_1_27 + 1), B
                                           ; removed redundant BANKSEL
0020a4   6b67     clrf    0x67, 0x1        	CLRF	(_SortServoTimings_mascaratotal_1_27 + 2), B
                                           ;	.line	134; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(t=0;t<18;t++){
0020a6   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00325_DS_:
                                           ;	.line	135; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[timevalue][t]=255;
0020a8   0e36     movlw   0x36             	MOVLW	LOW(_timings + 54)
0020aa   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0020ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0020ae   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0020b0   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 54)
0020b2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0020b4   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0020b6   ffe9
0020b8   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0020ba   ffea
0020bc   68ef     setf    0xef, 0x0        	SETF	INDF0
                                           ;	.line	137; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_C][t]=0x00;
0020be   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
0020c0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0020c2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0020c4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0020c6   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
0020c8   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0020ca   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0020cc   ffe9
0020ce   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0020d0   ffea
0020d2   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	138; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_A][t]=0x00;
0020d4   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
0020d6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0020d8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0020da   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0020dc   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
0020de   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0020e0   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0020e2   ffe9
0020e4   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0020e6   ffea
0020e8   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	134; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(t=0;t<18;t++){
0020ea   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
0020ec   0e12     movlw   0x12             	MOVLW	0x12
0020ee   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0020f0   e3db     bnc     0x0020a8         	BNC	_00325_DS_
                                           ;	.line	141; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	totalservos=0;
0020f2   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	143; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	while(totalservos<18) {
0020f4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00322_DS_:
0020f6   0e12     movlw   0x12             	MOVLW	0x12
0020f8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0020fa   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0020fc   d194     bra     0x002426         	BRA	_00324_DS_
                                           ;	.line	144; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos=1;
0020fe   0e01     movlw   0x01             	MOVLW	0x01
002100   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           ;	.line	145; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(s=0;s<18;s++) { 
002102   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00327_DS_:
                                           ;	.line	147; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (s<8){
002104   0e08     movlw   0x08             	MOVLW	0x08
002106   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
002108   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00210a   d061     bra     0x0021ce         	BRA	_00319_DS_
                                           ;	.line	148; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (servomasks[s] & mascaratotal[MaskPort_B] & activatedservos[MaskPort_B]){
00210c   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
00210e   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002110   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002112   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002114   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
002116   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002118   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00211a   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
00211c   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
00211e   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002120   fff6
002122   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002124   fff7
002126   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002128   fff8
00212a   0009     tblrd*+                  	TBLRD*+	
00212c   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00212e   f004
002130   0102     movlb   0x2              	BANKSEL	_SortServoTimings_mascaratotal_1_27
002132   5165     movf    0x65, 0x0, 0x1   	MOVF	_SortServoTimings_mascaratotal_1_27, W, B
002134   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
002136   0102     movlb   0x2              	BANKSEL	_activatedservos
002138   515e     movf    0x5e, 0x0, 0x1   	MOVF	_activatedservos, W, B
00213a   1604     andwf   0x04, 0x1, 0x0   	ANDWF	r0x04, F
00213c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00213e   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
002140   d148     bra     0x0023d2         	BRA	_00328_DS_
                                           ;	.line	150; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] < timings[timevalue][t]){
002142   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
002144   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002146   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002148   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00214a   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
00214c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00214e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002150   ffe9
002152   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
002154   ffea
002156   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
002158   f004
00215a   0e36     movlw   0x36             	MOVLW	LOW(_timings + 54)
00215c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00215e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002160   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002162   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 54)
002164   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002166   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
002168   ffe9
00216a   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
00216c   ffea
00216e   cfef     movff   0xfef, 0x007     	MOVFF	INDF0, r0x07
002170   f007
002172   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
002174   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
002176   e21f     bc      0x0021b6         	BC	_00294_DS_
                                           ;	.line	151; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[timevalue][t]=servovalues[s];
002178   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
00217a   ffe9
00217c   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
00217e   ffea
002180   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002182   ffef
                                           ;	.line	153; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_C][t]=0x00;
002184   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
002186   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
002188   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
00218a   6a08     clrf    0x08, 0x0        	CLRF	r0x08
00218c   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
00218e   2208     addwfc  0x08, 0x1, 0x0   	ADDWFC	r0x08, F
002190   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
002192   ffe9
002194   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
002196   ffea
002198   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	154; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_A][t]=0x00;
00219a   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
00219c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00219e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0021a0   6a08     clrf    0x08, 0x0        	CLRF	r0x08
0021a2   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
0021a4   2208     addwfc  0x08, 0x1, 0x0   	ADDWFC	r0x08, F
0021a6   c007     movff   0x007, 0xfe9     	MOVFF	r0x07, FSR0L
0021a8   ffe9
0021aa   c008     movff   0x008, 0xfea     	MOVFF	r0x08, FSR0H
0021ac   ffea
0021ae   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	155; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos=1;
0021b0   0e01     movlw   0x01             	MOVLW	0x01
0021b2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021b4   d10e     bra     0x0023d2         	BRA	_00328_DS_
                                           _00294_DS_:
                                           ;	.line	157; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] == timings[timevalue][t]){
0021b6   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0021b8   ffe9
0021ba   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0021bc   ffea
0021be   cfef     movff   0xfef, 0x005     	MOVFF	INDF0, r0x05
0021c0   f005
0021c2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0021c4   1805     xorwf   0x05, 0x0, 0x0   	XORWF	r0x05, W
0021c6   e001     bz      0x0021ca         	BZ	_00391_DS_
0021c8   d104     bra     0x0023d2         	BRA	_00328_DS_
                                           _00391_DS_:
                                           ;	.line	159; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos++;
0021ca   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
0021cc   d102     bra     0x0023d2         	BRA	_00328_DS_
                                           _00319_DS_:
                                           ;	.line	163; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (s>12){
0021ce   0e0d     movlw   0x0d             	MOVLW	0x0d
0021d0   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
0021d2   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0021d4   d080     bra     0x0022d6         	BRA	_00316_DS_
                                           ;	.line	164; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (servomasks[s] & mascaratotal[MaskPort_A] & activatedservos[MaskPort_A]){
0021d6   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
0021d8   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
0021da   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0021dc   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0021de   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
0021e0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0021e2   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0021e4   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
0021e6   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0021e8   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0021ea   fff6
0021ec   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0021ee   fff7
0021f0   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0021f2   fff8
0021f4   0009     tblrd*+                  	TBLRD*+	
0021f6   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
0021f8   f007
0021fa   0102     movlb   0x2              	BANKSEL	(_SortServoTimings_mascaratotal_1_27 + 2)
0021fc   5167     movf    0x67, 0x0, 0x1   	MOVF	(_SortServoTimings_mascaratotal_1_27 + 2), W, B
0021fe   1407     andwf   0x07, 0x0, 0x0   	ANDWF	r0x07, W
002200   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002202   0102     movlb   0x2              	BANKSEL	(_activatedservos + 2)
002204   5160     movf    0x60, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
002206   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
002208   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00220a   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00220c   d0e2     bra     0x0023d2         	BRA	_00328_DS_
                                           ;	.line	166; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] < timings[timevalue][t]){
00220e   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
002210   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002212   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002214   6a09     clrf    0x09, 0x0        	CLRF	r0x09
002216   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
002218   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
00221a   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
00221c   ffe9
00221e   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
002220   ffea
002222   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
002224   f008
002226   0e36     movlw   0x36             	MOVLW	LOW(_timings + 54)
002228   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00222a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00222c   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
00222e   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 54)
002230   220a     addwfc  0x0a, 0x1, 0x0   	ADDWFC	r0x0a, F
002232   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002234   ffe9
002236   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
002238   ffea
00223a   cfef     movff   0xfef, 0x00b     	MOVFF	INDF0, r0x0b
00223c   f00b
00223e   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
002240   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
002242   e229     bc      0x002296         	BC	_00302_DS_
                                           ;	.line	167; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[timevalue][t]=servovalues[s];
002244   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002246   ffe9
002248   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
00224a   ffea
00224c   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
00224e   ffef
                                           ;	.line	169; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_C][t]=0x00;
002250   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
002252   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
002254   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
002256   6a0c     clrf    0x0c, 0x0        	CLRF	r0x0c
002258   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
00225a   220c     addwfc  0x0c, 0x1, 0x0   	ADDWFC	r0x0c, F
00225c   c00b     movff   0x00b, 0xfe9     	MOVFF	r0x0b, FSR0L
00225e   ffe9
002260   c00c     movff   0x00c, 0xfea     	MOVFF	r0x0c, FSR0H
002262   ffea
002264   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	170; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_A][t]=servomasks[s];
002266   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
002268   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00226a   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
00226c   6a0c     clrf    0x0c, 0x0        	CLRF	r0x0c
00226e   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
002270   220c     addwfc  0x0c, 0x1, 0x0   	ADDWFC	r0x0c, F
002272   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002274   fff6
002276   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002278   fff7
00227a   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
00227c   fff8
00227e   0009     tblrd*+                  	TBLRD*+	
002280   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002282   f004
002284   c00b     movff   0x00b, 0xfe9     	MOVFF	r0x0b, FSR0L
002286   ffe9
002288   c00c     movff   0x00c, 0xfea     	MOVFF	r0x0c, FSR0H
00228a   ffea
00228c   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
00228e   ffef
                                           ;	.line	171; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos=1;
002290   0e01     movlw   0x01             	MOVLW	0x01
002292   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002294   d09e     bra     0x0023d2         	BRA	_00328_DS_
                                           _00302_DS_:
                                           ;	.line	173; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] == timings[timevalue][t]){
002296   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002298   ffe9
00229a   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
00229c   ffea
00229e   cfef     movff   0xfef, 0x009     	MOVFF	INDF0, r0x09
0022a0   f009
0022a2   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0022a4   1809     xorwf   0x09, 0x0, 0x0   	XORWF	r0x09, W
0022a6   e001     bz      0x0022aa         	BZ	_00396_DS_
0022a8   d094     bra     0x0023d2         	BRA	_00328_DS_
                                           _00396_DS_:
                                           ;	.line	174; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_A][t] |= servomasks[s];
0022aa   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
0022ac   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0022ae   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0022b0   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0022b2   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
0022b4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0022b6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0022b8   ffe9
0022ba   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0022bc   ffea
0022be   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0022c0   f006
0022c2   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0022c4   1207     iorwf   0x07, 0x1, 0x0   	IORWF	r0x07, F
0022c6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0022c8   ffe9
0022ca   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0022cc   ffea
0022ce   c007     movff   0x007, 0xfef     	MOVFF	r0x07, INDF0
0022d0   ffef
                                           ;	.line	175; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos++;
0022d2   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
0022d4   d07e     bra     0x0023d2         	BRA	_00328_DS_
                                           _00316_DS_:
                                           ;	.line	180; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (servomasks[s] & mascaratotal[MaskPort_C] & activatedservos[MaskPort_C]){ 
0022d6   0eb8     movlw   0xb8             	MOVLW	LOW(_servomasks)
0022d8   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
0022da   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0022dc   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0022de   0e27     movlw   0x27             	MOVLW	HIGH(_servomasks)
0022e0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0022e2   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0022e4   0e00     movlw   0x00             	MOVLW	UPPER(_servomasks)
0022e6   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0022e8   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0022ea   fff6
0022ec   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0022ee   fff7
0022f0   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0022f2   fff8
0022f4   0009     tblrd*+                  	TBLRD*+	
0022f6   cff5     movff   0xff5, 0x007     	MOVFF	TABLAT, r0x07
0022f8   f007
0022fa   0102     movlb   0x2              	BANKSEL	(_SortServoTimings_mascaratotal_1_27 + 1)
0022fc   5166     movf    0x66, 0x0, 0x1   	MOVF	(_SortServoTimings_mascaratotal_1_27 + 1), W, B
0022fe   1407     andwf   0x07, 0x0, 0x0   	ANDWF	r0x07, W
002300   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002302   0102     movlb   0x2              	BANKSEL	(_activatedservos + 1)
002304   515f     movf    0x5f, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
002306   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
002308   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
00230a   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00230c   d062     bra     0x0023d2         	BRA	_00328_DS_
                                           ;	.line	182; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] < timings[timevalue][t]){
00230e   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
002310   2403     addwf   0x03, 0x0, 0x0   	ADDWF	r0x03, W
002312   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
002314   6a09     clrf    0x09, 0x0        	CLRF	r0x09
002316   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
002318   2209     addwfc  0x09, 0x1, 0x0   	ADDWFC	r0x09, F
00231a   c008     movff   0x008, 0xfe9     	MOVFF	r0x08, FSR0L
00231c   ffe9
00231e   c009     movff   0x009, 0xfea     	MOVFF	r0x09, FSR0H
002320   ffea
002322   cfef     movff   0xfef, 0x008     	MOVFF	INDF0, r0x08
002324   f008
002326   0e36     movlw   0x36             	MOVLW	LOW(_timings + 54)
002328   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00232a   6e09     movwf   0x09, 0x0        	MOVWF	r0x09
00232c   6a0a     clrf    0x0a, 0x0        	CLRF	r0x0a
00232e   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 54)
002330   220a     addwfc  0x0a, 0x1, 0x0   	ADDWFC	r0x0a, F
002332   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002334   ffe9
002336   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
002338   ffea
00233a   cfef     movff   0xfef, 0x00b     	MOVFF	INDF0, r0x0b
00233c   f00b
00233e   500b     movf    0x0b, 0x0, 0x0   	MOVF	r0x0b, W
002340   5c08     subwf   0x08, 0x0, 0x0   	SUBWF	r0x08, W
002342   e229     bc      0x002396         	BC	_00310_DS_
                                           ;	.line	183; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[timevalue][t]=servovalues[s];
002344   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002346   ffe9
002348   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
00234a   ffea
00234c   c008     movff   0x008, 0xfef     	MOVFF	r0x08, INDF0
00234e   ffef
                                           ;	.line	185; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_C][t]=servomasks[s];
002350   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
002352   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
002354   6e0b     movwf   0x0b, 0x0        	MOVWF	r0x0b
002356   6a0c     clrf    0x0c, 0x0        	CLRF	r0x0c
002358   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
00235a   220c     addwfc  0x0c, 0x1, 0x0   	ADDWFC	r0x0c, F
00235c   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00235e   fff6
002360   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002362   fff7
002364   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002366   fff8
002368   0009     tblrd*+                  	TBLRD*+	
00236a   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00236c   f004
00236e   c00b     movff   0x00b, 0xfe9     	MOVFF	r0x0b, FSR0L
002370   ffe9
002372   c00c     movff   0x00c, 0xfea     	MOVFF	r0x0c, FSR0H
002374   ffea
002376   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
002378   ffef
                                           ;	.line	186; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_A][t]=0x00;
00237a   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
00237c   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
00237e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002380   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002382   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
002384   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002386   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002388   ffe9
00238a   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00238c   ffea
00238e   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	187; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos=1;
002390   0e01     movlw   0x01             	MOVLW	0x01
002392   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002394   d01e     bra     0x0023d2         	BRA	_00328_DS_
                                           _00310_DS_:
                                           ;	.line	189; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	else if (servovalues[s] == timings [timevalue][t]){
002396   c009     movff   0x009, 0xfe9     	MOVFF	r0x09, FSR0L
002398   ffe9
00239a   c00a     movff   0x00a, 0xfea     	MOVFF	r0x0a, FSR0H
00239c   ffea
00239e   cfef     movff   0xfef, 0x009     	MOVFF	INDF0, r0x09
0023a0   f009
0023a2   5008     movf    0x08, 0x0, 0x0   	MOVF	r0x08, W
0023a4   1809     xorwf   0x09, 0x0, 0x0   	XORWF	r0x09, W
0023a6   e115     bnz     0x0023d2         	BNZ	_00328_DS_
                                           ;	.line	190; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timings[MaskPort_C][t] |= servomasks[s];
0023a8   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
0023aa   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0023ac   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0023ae   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0023b0   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
0023b2   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0023b4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0023b6   ffe9
0023b8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0023ba   ffea
0023bc   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0023be   f006
0023c0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0023c2   1207     iorwf   0x07, 0x1, 0x0   	IORWF	r0x07, F
0023c4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0023c6   ffe9
0023c8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0023ca   ffea
0023cc   c007     movff   0x007, 0xfef     	MOVFF	r0x07, INDF0
0023ce   ffef
                                           ;	.line	191; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	numservos++;
0023d0   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
                                           _00328_DS_:
                                           ;	.line	145; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(s=0;s<18;s++) { 
0023d2   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0023d4   0e12     movlw   0x12             	MOVLW	0x12
0023d6   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
0023d8   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0023da   d694     bra     0x002104         	BRA	_00327_DS_
                                           ;	.line	197; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	mascaratotal[MaskPort_C] |= timings[MaskPort_C][t];
0023dc   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
0023de   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0023e0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0023e2   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0023e4   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
0023e6   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
0023e8   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
0023ea   ffe9
0023ec   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
0023ee   ffea
0023f0   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
0023f2   f003
0023f4   0102     movlb   0x2              	BANKSEL	(_SortServoTimings_mascaratotal_1_27 + 1)
0023f6   5166     movf    0x66, 0x0, 0x1   	MOVF	(_SortServoTimings_mascaratotal_1_27 + 1), W, B
0023f8   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0023fa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0023fc   6f66     movwf   0x66, 0x1        	MOVWF	(_SortServoTimings_mascaratotal_1_27 + 1), B
                                           ;	.line	198; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	mascaratotal[MaskPort_A] |= timings[MaskPort_A][t];
0023fe   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
002400   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
002402   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002404   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002406   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
002408   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
00240a   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
00240c   ffe9
00240e   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
002410   ffea
002412   cfef     movff   0xfef, 0x003     	MOVFF	INDF0, r0x03
002414   f003
                                           ; removed redundant BANKSEL
002416   5167     movf    0x67, 0x0, 0x1   	MOVF	(_SortServoTimings_mascaratotal_1_27 + 2), W, B
002418   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
00241a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
00241c   6f67     movwf   0x67, 0x1        	MOVWF	(_SortServoTimings_mascaratotal_1_27 + 2), B
                                           ;	.line	199; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	totalservos += numservos;
00241e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002420   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
                                           ;	.line	200; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	t++;
002422   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002424   d668     bra     0x0020f6         	BRA	_00322_DS_
                                           _00324_DS_:
002426   0102     movlb   0x2              	BANKSEL	_needreordering
                                           ;	.line	203; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	needreordering=0;  // This indicates that servo timings is ordered.	
002428   6b5c     clrf    0x5c, 0x1        	CLRF	_needreordering, B
00242a   cfe4     movff   0xfe4, 0x00c     	MOVFF	PREINC1, r0x0c
00242c   f00c
00242e   cfe4     movff   0xfe4, 0x00b     	MOVFF	PREINC1, r0x0b
002430   f00b
002432   cfe4     movff   0xfe4, 0x00a     	MOVFF	PREINC1, r0x0a
002434   f00a
002436   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
002438   f009
00243a   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00243c   f008
00243e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002440   f007
002442   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002444   f006
002446   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002448   f005
00244a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00244c   f004
00244e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002450   f003
002452   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002454   f002
002456   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002458   f001
00245a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00245c   f000
00245e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServosPulseUp	code
                                           _ServosPulseUp:
                                           ;	.line	119; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PORTC = activatedservos[MaskPort_C] & 0xFF;
003cd4   c25f     movff   0x25f, 0xf82     	MOVFF	(_activatedservos + 1), _PORTC
003cd6   ff82
                                           ;	.line	120; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PORTA = activatedservos[MaskPort_A] & 0xFF;	
003cd8   c260     movff   0x260, 0xf80     	MOVFF	(_activatedservos + 2), _PORTA
003cda   ff80
003cdc   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServosPulseDown	code
                                           _ServosPulseDown:
                                           ;	.line	92; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	static void ServosPulseDown()
00371c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00371e   ffe5
003720   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003722   ffd9
003724   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003726   ffe5
003728   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00372a   ffe5
00372c   0102     movlb   0x2              	BANKSEL	_timingindex
                                           ;	.line	94; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timingindex = 0;
00372e   6b69     clrf    0x69, 0x1        	CLRF	_timingindex, B
003730   0102     movlb   0x2              	BANKSEL	_timedivision
                                           ;	.line	96; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(timedivision=0;timedivision < 251;timedivision++){
003732   6b5d     clrf    0x5d, 0x1        	CLRF	_timedivision, B
                                           _00266_DS_:
                                           ;	.line	97; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	if (timings[timevalue][timingindex] == timedivision){
003734   c269     movff   0x269, 0x000     	MOVFF	_timingindex, r0x00
003736   f000
003738   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00373a   0e36     movlw   0x36             	MOVLW	LOW(_timings + 54)
00373c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00373e   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 54)
003740   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003742   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003744   ffe9
003746   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003748   ffea
00374a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00374c   f000
00374e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003750   0102     movlb   0x2              	BANKSEL	_timedivision
003752   195d     xorwf   0x5d, 0x0, 0x1   	XORWF	_timedivision, W, B
003754   e120     bnz     0x003796         	BNZ	_00264_DS_
                                           ;	.line	99; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PORTC = PORTC ^ timings[MaskPort_C][timingindex];
003756   c269     movff   0x269, 0x000     	MOVFF	_timingindex, r0x00
003758   f000
00375a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00375c   0e12     movlw   0x12             	MOVLW	LOW(_timings + 18)
00375e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003760   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 18)
003762   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003764   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003766   ffe9
003768   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00376a   ffea
00376c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00376e   f000
003770   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003772   1a82     xorwf   0x82, 0x1, 0x0   	XORWF	_PORTC, F
                                           ;	.line	100; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PORTA = PORTA ^ timings[MaskPort_A][timingindex];
003774   c269     movff   0x269, 0x000     	MOVFF	_timingindex, r0x00
003776   f000
003778   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00377a   0e24     movlw   0x24             	MOVLW	LOW(_timings + 36)
00377c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00377e   0e02     movlw   0x02             	MOVLW	HIGH(_timings + 36)
003780   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
003782   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003784   ffe9
003786   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
003788   ffea
00378a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00378c   f000
00378e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003790   1a80     xorwf   0x80, 0x1, 0x0   	XORWF	_PORTA, F
003792   0102     movlb   0x2              	BANKSEL	_timingindex
                                           ;	.line	101; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	timingindex++;
003794   2b69     incf    0x69, 0x1, 0x1   	INCF	_timingindex, F, B
                                           _00264_DS_:
003796   0e14     movlw   0x14             	movlw	20
003798   6f68     movwf   0x68, 0x1        	movwf	_loopvar
                                           bucle:
00379a   0000     nop                      	NOP
00379c   2f68     decfsz  0x68, 0x1, 0x1   	decfsz	_loopvar,1
00379e   efcd     goto    0x00379a         	goto	bucle
0037a0   f01b
                                           	
0037a2   0102     movlb   0x2              	BANKSEL	_timedivision
                                           ;	.line	96; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(timedivision=0;timedivision < 251;timedivision++){
0037a4   2b5d     incf    0x5d, 0x1, 0x1   	INCF	_timedivision, F, B
0037a6   0efb     movlw   0xfb             	MOVLW	0xfb
                                           ; removed redundant BANKSEL
0037a8   5d5d     subwf   0x5d, 0x0, 0x1   	SUBWF	_timedivision, W, B
0037aa   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0037ac   d7c3     bra     0x003734         	BRA	_00266_DS_
0037ae   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0037b0   f001
0037b2   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0037b4   f000
0037b6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0037b8   ffd9
0037ba   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__servos_init	code
                                           _servos_init:
                                           ;	.line	71; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	void servos_init()
003acc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003ace   ffe5
003ad0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003ad2   ffe5
003ad4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003ad6   ffe5
                                           ;	.line	75; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	for(a=0;a<18;a++) servovalues[a]=255;
003ad8   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00247_DS_:
003ada   0e48     movlw   0x48             	MOVLW	LOW(_servovalues)
003adc   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
003ade   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003ae0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003ae2   0e02     movlw   0x02             	MOVLW	HIGH(_servovalues)
003ae4   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003ae6   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003ae8   ffe9
003aea   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003aec   ffea
003aee   68ef     setf    0xef, 0x0        	SETF	INDF0
003af0   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003af2   0e12     movlw   0x12             	MOVLW	0x12
003af4   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003af6   e3f1     bnc     0x003ada         	BNC	_00247_DS_
                                           ;	.line	78; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1H=0xFF;
003af8   68cf     setf    0xcf, 0x0        	SETF	_TMR1H
                                           ;	.line	79; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	TMR1L=0x00;
003afa   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	81; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	T1CON=0x01;
003afc   0e01     movlw   0x01             	MOVLW	0x01
003afe   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
                                           ;	.line	83; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	PIE1bits.TMR1IE=1;
003b00   809d     bsf     0x9d, 0x0, 0x0   	BSF	_PIE1bits, 0
                                           ;	.line	85; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	INTCONbits.PEIE=1;
003b02   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
                                           ;	.line	87; /home/vbasel/.icaro/v2/firmware/tmp/servos.c	INTCONbits.GIE=1;
003b04   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
003b06   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003b08   f002
003b0a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003b0c   f001
003b0e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003b10   f000
003b12   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__pinmode	code
                                           _pinmode:
                                           ;	.line	69; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	void pinmode(int input, int state)
0027ca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027cc   ffe5
0027ce   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027d0   ffd9
0027d2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0027d4   ffe5
0027d6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0027d8   ffe5
0027da   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0027dc   ffe5
0027de   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0027e0   ffe5
0027e2   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
0027e4   ffe5
0027e6   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
0027e8   ffe5
0027ea   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
0027ec   ffe5
0027ee   0e02     movlw   0x02             	MOVLW	0x02
0027f0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0027f2   f000
0027f4   0e03     movlw   0x03             	MOVLW	0x03
0027f6   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0027f8   f001
0027fa   0e04     movlw   0x04             	MOVLW	0x04
0027fc   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0027fe   f002
002800   0e05     movlw   0x05             	MOVLW	0x05
002802   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002804   f003
                                           ;	.line	71; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	switch (port[input])
002806   0e9a     movlw   0x9a             	MOVLW	LOW(_port)
002808   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00280a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00280c   0e27     movlw   0x27             	MOVLW	HIGH(_port)
00280e   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002810   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002812   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002814   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002816   6806     setf    0x06, 0x0        	SETF	r0x06
002818   0e00     movlw   0x00             	MOVLW	UPPER(_port)
00281a   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
00281c   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00281e   fff6
002820   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002822   fff7
002824   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002826   fff8
002828   0009     tblrd*+                  	TBLRD*+	
00282a   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00282c   f004
00282e   0e05     movlw   0x05             	MOVLW	0x05
002830   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
002832   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002834   d110     bra     0x002a56         	BRA	_00220_DS_
002836   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002838   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
00283a   3404     rlcf    0x04, 0x0, 0x0   	RLCF	r0x04, W
00283c   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
00283e   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
002840   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002842   0bfc     andlw   0xfc             	ANDLW	0xfc
002844   0f54     addlw   0x54             	ADDLW	LOW(_00241_DS_)
002846   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002848   0e28     movlw   0x28             	MOVLW	HIGH(_00241_DS_)
00284a   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
00284c   0e00     movlw   0x00             	MOVLW	UPPER(_00241_DS_)
00284e   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
002850   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002852   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00241_DS_:
002854   ef34     goto    0x002868         	GOTO	_00199_DS_
002856   f014
002858   ef66     goto    0x0028cc         	GOTO	_00203_DS_
00285a   f014
00285c   ef98     goto    0x002930         	GOTO	_00207_DS_
00285e   f014
002860   efca     goto    0x002994         	GOTO	_00211_DS_
002862   f014
002864   effc     goto    0x0029f8         	GOTO	_00215_DS_
002866   f014
                                           _00199_DS_:
                                           ;	.line	73; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 0: if (state) TRISB=TRISB | mask[input];
002868   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00286a   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
00286c   e017     bz      0x00289c         	BZ	_00201_DS_
00286e   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002870   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002872   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002874   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002876   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002878   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00287a   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00287c   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
00287e   6806     setf    0x06, 0x0        	SETF	r0x06
002880   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002882   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002884   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002886   fff6
002888   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00288a   fff7
00288c   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
00288e   fff8
002890   0009     tblrd*+                  	TBLRD*+	
002892   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002894   f004
002896   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002898   1293     iorwf   0x93, 0x1, 0x0   	IORWF	_TRISB, F
00289a   d0dd     bra     0x002a56         	BRA	_00220_DS_
                                           _00201_DS_:
                                           ;	.line	74; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else TRISB=TRISB & (255-mask[input]);
00289c   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
00289e   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0028a0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0028a2   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
0028a4   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0028a6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028a8   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0028aa   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
0028ac   6806     setf    0x06, 0x0        	SETF	r0x06
0028ae   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0028b0   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0028b2   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0028b4   fff6
0028b6   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0028b8   fff7
0028ba   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0028bc   fff8
0028be   0009     tblrd*+                  	TBLRD*+	
0028c0   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0028c2   f004
0028c4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0028c6   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
0028c8   1693     andwf   0x93, 0x1, 0x0   	ANDWF	_TRISB, F
                                           ;	.line	75; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
0028ca   d0c5     bra     0x002a56         	BRA	_00220_DS_
                                           _00203_DS_:
                                           ;	.line	76; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 1: if (state) TRISC=TRISC | mask[input];
0028cc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028ce   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
0028d0   e017     bz      0x002900         	BZ	_00205_DS_
0028d2   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
0028d4   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0028d6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0028d8   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
0028da   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0028dc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0028de   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0028e0   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
0028e2   6806     setf    0x06, 0x0        	SETF	r0x06
0028e4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0028e6   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0028e8   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0028ea   fff6
0028ec   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0028ee   fff7
0028f0   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0028f2   fff8
0028f4   0009     tblrd*+                  	TBLRD*+	
0028f6   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0028f8   f004
0028fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0028fc   1294     iorwf   0x94, 0x1, 0x0   	IORWF	_TRISC, F
0028fe   d0ab     bra     0x002a56         	BRA	_00220_DS_
                                           _00205_DS_:
                                           ;	.line	77; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else TRISC=TRISC & (255-mask[input]);
002900   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002902   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002904   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002906   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002908   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00290a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00290c   6a06     clrf    0x06, 0x0        	CLRF	r0x06
00290e   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002910   6806     setf    0x06, 0x0        	SETF	r0x06
002912   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002914   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002916   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002918   fff6
00291a   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00291c   fff7
00291e   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002920   fff8
002922   0009     tblrd*+                  	TBLRD*+	
002924   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002926   f004
002928   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00292a   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
00292c   1694     andwf   0x94, 0x1, 0x0   	ANDWF	_TRISC, F
                                           ;	.line	78; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
00292e   d093     bra     0x002a56         	BRA	_00220_DS_
                                           _00207_DS_:
                                           ;	.line	79; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 2: if (state) TRISA=TRISA | mask[input];
002930   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002932   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002934   e017     bz      0x002964         	BZ	_00209_DS_
002936   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002938   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00293a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00293c   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
00293e   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002940   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002942   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002944   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002946   6806     setf    0x06, 0x0        	SETF	r0x06
002948   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
00294a   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
00294c   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00294e   fff6
002950   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002952   fff7
002954   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002956   fff8
002958   0009     tblrd*+                  	TBLRD*+	
00295a   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00295c   f004
00295e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002960   1292     iorwf   0x92, 0x1, 0x0   	IORWF	_TRISA, F
002962   d079     bra     0x002a56         	BRA	_00220_DS_
                                           _00209_DS_:
                                           ;	.line	80; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else TRISA=TRISA & (255-mask[input]);
002964   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002966   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002968   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00296a   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
00296c   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
00296e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002970   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002972   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002974   6806     setf    0x06, 0x0        	SETF	r0x06
002976   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002978   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
00297a   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00297c   fff6
00297e   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002980   fff7
002982   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002984   fff8
002986   0009     tblrd*+                  	TBLRD*+	
002988   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00298a   f004
00298c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00298e   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
002990   1692     andwf   0x92, 0x1, 0x0   	ANDWF	_TRISA, F
                                           ;	.line	81; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
002992   d061     bra     0x002a56         	BRA	_00220_DS_
                                           _00211_DS_:
                                           ;	.line	83; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 3: if (state) TRISD=TRISD | mask[input];
002994   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002996   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002998   e017     bz      0x0029c8         	BZ	_00213_DS_
00299a   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
00299c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00299e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0029a0   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
0029a2   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0029a4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0029a6   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0029a8   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
0029aa   6806     setf    0x06, 0x0        	SETF	r0x06
0029ac   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0029ae   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0029b0   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0029b2   fff6
0029b4   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0029b6   fff7
0029b8   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0029ba   fff8
0029bc   0009     tblrd*+                  	TBLRD*+	
0029be   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0029c0   f004
0029c2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0029c4   1295     iorwf   0x95, 0x1, 0x0   	IORWF	_TRISD, F
0029c6   d047     bra     0x002a56         	BRA	_00220_DS_
                                           _00213_DS_:
                                           ;	.line	84; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else TRISD=TRISD & (255-mask[input]);
0029c8   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
0029ca   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0029cc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0029ce   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
0029d0   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
0029d2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0029d4   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0029d6   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
0029d8   6806     setf    0x06, 0x0        	SETF	r0x06
0029da   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0029dc   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0029de   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0029e0   fff6
0029e2   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0029e4   fff7
0029e6   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0029e8   fff8
0029ea   0009     tblrd*+                  	TBLRD*+	
0029ec   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0029ee   f004
0029f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0029f2   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
0029f4   1695     andwf   0x95, 0x1, 0x0   	ANDWF	_TRISD, F
                                           ;	.line	85; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
0029f6   d02f     bra     0x002a56         	BRA	_00220_DS_
                                           _00215_DS_:
                                           ;	.line	86; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 4: if (state) TRISE=TRISE | mask[input];
0029f8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0029fa   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
0029fc   e017     bz      0x002a2c         	BZ	_00217_DS_
0029fe   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002a00   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002a02   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002a04   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002a06   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002a08   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002a0a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002a0c   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002a0e   6804     setf    0x04, 0x0        	SETF	r0x04
002a10   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002a12   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002a14   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002a16   fff6
002a18   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002a1a   fff7
002a1c   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002a1e   fff8
002a20   0009     tblrd*+                  	TBLRD*+	
002a22   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002a24   f002
002a26   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002a28   1296     iorwf   0x96, 0x1, 0x0   	IORWF	_TRISE, F
002a2a   d015     bra     0x002a56         	BRA	_00220_DS_
                                           _00217_DS_:
                                           ;	.line	87; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else TRISE=TRISE & (255-mask[input]);
002a2c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002a2e   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002a30   6802     setf    0x02, 0x0        	SETF	r0x02
002a32   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002a34   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002a36   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002a38   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002a3a   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002a3c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002a3e   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
002a40   fff6
002a42   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
002a44   fff7
002a46   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002a48   fff8
002a4a   0009     tblrd*+                  	TBLRD*+	
002a4c   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002a4e   f000
002a50   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a52   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
002a54   1696     andwf   0x96, 0x1, 0x0   	ANDWF	_TRISE, F
                                           _00220_DS_:
                                           ;	.line	90; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	}
002a56   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002a58   f006
002a5a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002a5c   f005
002a5e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002a60   f004
002a62   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002a64   f003
002a66   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002a68   f002
002a6a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002a6c   f001
002a6e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002a70   f000
002a72   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002a74   ffd9
002a76   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalread	code
                                           _digitalread:
                                           ;	.line	44; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	int digitalread(int input)
002d26   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d28   ffe5
002d2a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d2c   ffd9
002d2e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d30   ffe5
002d32   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002d34   ffe5
002d36   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002d38   ffe5
002d3a   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002d3c   ffe5
002d3e   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002d40   ffe5
002d42   0e02     movlw   0x02             	MOVLW	0x02
002d44   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002d46   f000
002d48   0e03     movlw   0x03             	MOVLW	0x03
002d4a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002d4c   f001
                                           ;	.line	46; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	switch (port[input])
002d4e   0e9a     movlw   0x9a             	MOVLW	LOW(_port)
002d50   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002d52   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002d54   0e27     movlw   0x27             	MOVLW	HIGH(_port)
002d56   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002d58   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002d5a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002d5c   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002d5e   6804     setf    0x04, 0x0        	SETF	r0x04
002d60   0e00     movlw   0x00             	MOVLW	UPPER(_port)
002d62   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002d64   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002d66   fff6
002d68   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002d6a   fff7
002d6c   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002d6e   fff8
002d70   0009     tblrd*+                  	TBLRD*+	
002d72   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002d74   f002
002d76   0e05     movlw   0x05             	MOVLW	0x05
002d78   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
002d7a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002d7c   d0ad     bra     0x002ed8         	BRA	_00172_DS_
002d7e   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002d80   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
002d82   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
002d84   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002d86   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
002d88   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002d8a   0bfc     andlw   0xfc             	ANDLW	0xfc
002d8c   0f9c     addlw   0x9c             	ADDLW	LOW(_00194_DS_)
002d8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d90   0e2d     movlw   0x2d             	MOVLW	HIGH(_00194_DS_)
002d92   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
002d94   0e00     movlw   0x00             	MOVLW	UPPER(_00194_DS_)
002d96   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
002d98   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002d9a   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00194_DS_:
002d9c   efd8     goto    0x002db0         	GOTO	_00152_DS_
002d9e   f016
002da0   eff6     goto    0x002dec         	GOTO	_00156_DS_
002da2   f016
002da4   ef14     goto    0x002e28         	GOTO	_00160_DS_
002da6   f017
002da8   ef32     goto    0x002e64         	GOTO	_00164_DS_
002daa   f017
002dac   ef50     goto    0x002ea0         	GOTO	_00168_DS_
002dae   f017
                                           _00152_DS_:
                                           ;	.line	48; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 0: if ((PORTB & mask[input])!=0) return (1);
002db0   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002db2   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002db4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002db6   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002db8   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002dba   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002dbc   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002dbe   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002dc0   6804     setf    0x04, 0x0        	SETF	r0x04
002dc2   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002dc4   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002dc6   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002dc8   fff6
002dca   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002dcc   fff7
002dce   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002dd0   fff8
002dd2   0009     tblrd*+                  	TBLRD*+	
002dd4   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002dd6   f002
002dd8   5081     movf    0x81, 0x0, 0x0   	MOVF	_PORTB, W
002dda   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
002ddc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002dde   e003     bz      0x002de6         	BZ	_00154_DS_
002de0   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002de2   0e01     movlw   0x01             	MOVLW	0x01
002de4   d07b     bra     0x002edc         	BRA	_00173_DS_
                                           _00154_DS_:
                                           ;	.line	49; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else return (0);
002de6   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002de8   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002dea   d078     bra     0x002edc         	BRA	_00173_DS_
                                           _00156_DS_:
                                           ;	.line	51; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 1: if ((PORTC & mask[input])!=0) return (1);
002dec   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002dee   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002df0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002df2   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002df4   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002df6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002df8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002dfa   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002dfc   6804     setf    0x04, 0x0        	SETF	r0x04
002dfe   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002e00   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002e02   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002e04   fff6
002e06   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002e08   fff7
002e0a   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002e0c   fff8
002e0e   0009     tblrd*+                  	TBLRD*+	
002e10   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002e12   f002
002e14   5082     movf    0x82, 0x0, 0x0   	MOVF	_PORTC, W
002e16   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
002e18   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002e1a   e003     bz      0x002e22         	BZ	_00158_DS_
002e1c   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e1e   0e01     movlw   0x01             	MOVLW	0x01
002e20   d05d     bra     0x002edc         	BRA	_00173_DS_
                                           _00158_DS_:
                                           ;	.line	52; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else return (0);
002e22   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e24   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e26   d05a     bra     0x002edc         	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	54; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 2: if ((PORTA & mask[input])!=0) return (1);
002e28   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002e2a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002e2c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002e2e   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002e30   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002e32   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002e34   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002e36   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002e38   6804     setf    0x04, 0x0        	SETF	r0x04
002e3a   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002e3c   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002e3e   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002e40   fff6
002e42   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002e44   fff7
002e46   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002e48   fff8
002e4a   0009     tblrd*+                  	TBLRD*+	
002e4c   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002e4e   f002
002e50   5080     movf    0x80, 0x0, 0x0   	MOVF	_PORTA, W
002e52   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
002e54   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002e56   e003     bz      0x002e5e         	BZ	_00162_DS_
002e58   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e5a   0e01     movlw   0x01             	MOVLW	0x01
002e5c   d03f     bra     0x002edc         	BRA	_00173_DS_
                                           _00162_DS_:
                                           ;	.line	55; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else return (0);
002e5e   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e60   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e62   d03c     bra     0x002edc         	BRA	_00173_DS_
                                           _00164_DS_:
                                           ;	.line	58; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 3: if ((PORTD & mask[input])!=0) return (1);
002e64   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002e66   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002e68   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002e6a   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002e6c   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002e6e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002e70   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002e72   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002e74   6804     setf    0x04, 0x0        	SETF	r0x04
002e76   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002e78   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002e7a   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002e7c   fff6
002e7e   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002e80   fff7
002e82   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002e84   fff8
002e86   0009     tblrd*+                  	TBLRD*+	
002e88   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002e8a   f002
002e8c   5083     movf    0x83, 0x0, 0x0   	MOVF	_PORTD, W
002e8e   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
002e90   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002e92   e003     bz      0x002e9a         	BZ	_00166_DS_
002e94   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e96   0e01     movlw   0x01             	MOVLW	0x01
002e98   d021     bra     0x002edc         	BRA	_00173_DS_
                                           _00166_DS_:
                                           ;	.line	59; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else return (0);
002e9a   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002e9c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002e9e   d01e     bra     0x002edc         	BRA	_00173_DS_
                                           _00168_DS_:
                                           ;	.line	61; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 4: if ((PORTE & mask[input])!=0) return (1);
002ea0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002ea2   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002ea4   6802     setf    0x02, 0x0        	SETF	r0x02
002ea6   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002ea8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002eaa   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002eac   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002eae   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002eb0   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002eb2   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
002eb4   fff6
002eb6   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
002eb8   fff7
002eba   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002ebc   fff8
002ebe   0009     tblrd*+                  	TBLRD*+	
002ec0   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002ec2   f000
002ec4   5084     movf    0x84, 0x0, 0x0   	MOVF	_PORTE, W
002ec6   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002ec8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002eca   e003     bz      0x002ed2         	BZ	_00170_DS_
002ecc   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002ece   0e01     movlw   0x01             	MOVLW	0x01
002ed0   d005     bra     0x002edc         	BRA	_00173_DS_
                                           _00170_DS_:
                                           ;	.line	62; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else return (0);
002ed2   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002ed4   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
002ed6   d002     bra     0x002edc         	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	66; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	return (0);
002ed8   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
002eda   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00173_DS_:
002edc   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002ede   f004
002ee0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002ee2   f003
002ee4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002ee6   f002
002ee8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002eea   f001
002eec   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002eee   f000
002ef0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002ef2   ffd9
002ef4   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalwrite	code
                                           _digitalwrite:
                                           ;	.line	20; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	void digitalwrite(int output,int state)
002a78   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002a7a   ffe5
002a7c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002a7e   ffd9
002a80   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002a82   ffe5
002a84   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002a86   ffe5
002a88   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002a8a   ffe5
002a8c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002a8e   ffe5
002a90   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002a92   ffe5
002a94   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002a96   ffe5
002a98   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002a9a   ffe5
002a9c   0e02     movlw   0x02             	MOVLW	0x02
002a9e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002aa0   f000
002aa2   0e03     movlw   0x03             	MOVLW	0x03
002aa4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002aa6   f001
002aa8   0e04     movlw   0x04             	MOVLW	0x04
002aaa   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002aac   f002
002aae   0e05     movlw   0x05             	MOVLW	0x05
002ab0   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002ab2   f003
                                           ;	.line	22; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	switch (port[output])
002ab4   0e9a     movlw   0x9a             	MOVLW	LOW(_port)
002ab6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002ab8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002aba   0e27     movlw   0x27             	MOVLW	HIGH(_port)
002abc   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002abe   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002ac0   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002ac2   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002ac4   6806     setf    0x06, 0x0        	SETF	r0x06
002ac6   0e00     movlw   0x00             	MOVLW	UPPER(_port)
002ac8   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002aca   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002acc   fff6
002ace   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002ad0   fff7
002ad2   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002ad4   fff8
002ad6   0009     tblrd*+                  	TBLRD*+	
002ad8   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002ada   f004
002adc   0e05     movlw   0x05             	MOVLW	0x05
002ade   5c04     subwf   0x04, 0x0, 0x0   	SUBWF	r0x04, W
002ae0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002ae2   d110     bra     0x002d04         	BRA	_00126_DS_
002ae4   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002ae6   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
002ae8   3404     rlcf    0x04, 0x0, 0x0   	RLCF	r0x04, W
002aea   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002aec   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
002aee   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002af0   0bfc     andlw   0xfc             	ANDLW	0xfc
002af2   0f02     addlw   0x02             	ADDLW	LOW(_00147_DS_)
002af4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002af6   0e2b     movlw   0x2b             	MOVLW	HIGH(_00147_DS_)
002af8   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
002afa   0e00     movlw   0x00             	MOVLW	UPPER(_00147_DS_)
002afc   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
002afe   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002b00   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00147_DS_:
002b02   ef8b     goto    0x002b16         	GOTO	_00105_DS_
002b04   f015
002b06   efbd     goto    0x002b7a         	GOTO	_00109_DS_
002b08   f015
002b0a   efef     goto    0x002bde         	GOTO	_00113_DS_
002b0c   f015
002b0e   ef21     goto    0x002c42         	GOTO	_00117_DS_
002b10   f016
002b12   ef53     goto    0x002ca6         	GOTO	_00121_DS_
002b14   f016
                                           _00105_DS_:
                                           ;	.line	24; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 0: if (state) PORTB=PORTB | mask[output]; 
002b16   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002b18   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002b1a   e017     bz      0x002b4a         	BZ	_00107_DS_
002b1c   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002b1e   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002b20   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002b22   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002b24   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002b26   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002b28   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002b2a   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002b2c   6806     setf    0x06, 0x0        	SETF	r0x06
002b2e   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002b30   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002b32   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002b34   fff6
002b36   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002b38   fff7
002b3a   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002b3c   fff8
002b3e   0009     tblrd*+                  	TBLRD*+	
002b40   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002b42   f004
002b44   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002b46   1281     iorwf   0x81, 0x1, 0x0   	IORWF	_PORTB, F
002b48   d0dd     bra     0x002d04         	BRA	_00126_DS_
                                           _00107_DS_:
                                           ;	.line	25; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else PORTB=PORTB & (255-mask[output]);
002b4a   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002b4c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002b4e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002b50   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002b52   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002b54   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002b56   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002b58   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002b5a   6806     setf    0x06, 0x0        	SETF	r0x06
002b5c   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002b5e   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002b60   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002b62   fff6
002b64   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002b66   fff7
002b68   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002b6a   fff8
002b6c   0009     tblrd*+                  	TBLRD*+	
002b6e   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002b70   f004
002b72   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002b74   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
002b76   1681     andwf   0x81, 0x1, 0x0   	ANDWF	_PORTB, F
                                           ;	.line	26; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
002b78   d0c5     bra     0x002d04         	BRA	_00126_DS_
                                           _00109_DS_:
                                           ;	.line	27; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 1: if (state) PORTC=PORTC | mask[output];
002b7a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002b7c   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002b7e   e017     bz      0x002bae         	BZ	_00111_DS_
002b80   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002b82   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002b84   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002b86   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002b88   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002b8a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002b8c   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002b8e   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002b90   6806     setf    0x06, 0x0        	SETF	r0x06
002b92   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002b94   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002b96   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002b98   fff6
002b9a   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002b9c   fff7
002b9e   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002ba0   fff8
002ba2   0009     tblrd*+                  	TBLRD*+	
002ba4   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002ba6   f004
002ba8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002baa   1282     iorwf   0x82, 0x1, 0x0   	IORWF	_PORTC, F
002bac   d0ab     bra     0x002d04         	BRA	_00126_DS_
                                           _00111_DS_:
                                           ;	.line	28; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else PORTC=PORTC & (255-mask[output]);
002bae   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002bb0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002bb2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002bb4   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002bb6   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002bb8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002bba   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002bbc   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002bbe   6806     setf    0x06, 0x0        	SETF	r0x06
002bc0   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002bc2   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002bc4   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002bc6   fff6
002bc8   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002bca   fff7
002bcc   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002bce   fff8
002bd0   0009     tblrd*+                  	TBLRD*+	
002bd2   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002bd4   f004
002bd6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002bd8   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
002bda   1682     andwf   0x82, 0x1, 0x0   	ANDWF	_PORTC, F
                                           ;	.line	29; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
002bdc   d093     bra     0x002d04         	BRA	_00126_DS_
                                           _00113_DS_:
                                           ;	.line	30; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 2: if (state) PORTA=PORTA | mask[output];
002bde   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002be0   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002be2   e017     bz      0x002c12         	BZ	_00115_DS_
002be4   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002be6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002be8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002bea   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002bec   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002bee   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002bf0   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002bf2   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002bf4   6806     setf    0x06, 0x0        	SETF	r0x06
002bf6   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002bf8   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002bfa   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002bfc   fff6
002bfe   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002c00   fff7
002c02   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002c04   fff8
002c06   0009     tblrd*+                  	TBLRD*+	
002c08   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002c0a   f004
002c0c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c0e   1280     iorwf   0x80, 0x1, 0x0   	IORWF	_PORTA, F
002c10   d079     bra     0x002d04         	BRA	_00126_DS_
                                           _00115_DS_:
                                           ;	.line	31; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else PORTA=PORTA & (255-mask[output]);
002c12   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002c14   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002c16   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002c18   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002c1a   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002c1c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002c1e   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002c20   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002c22   6806     setf    0x06, 0x0        	SETF	r0x06
002c24   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002c26   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002c28   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002c2a   fff6
002c2c   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002c2e   fff7
002c30   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002c32   fff8
002c34   0009     tblrd*+                  	TBLRD*+	
002c36   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002c38   f004
002c3a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c3c   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
002c3e   1680     andwf   0x80, 0x1, 0x0   	ANDWF	_PORTA, F
                                           ;	.line	32; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
002c40   d061     bra     0x002d04         	BRA	_00126_DS_
                                           _00117_DS_:
                                           ;	.line	34; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 3: if (state) PORTD=PORTD | mask[output]; 
002c42   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c44   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002c46   e017     bz      0x002c76         	BZ	_00119_DS_
002c48   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002c4a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002c4c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002c4e   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002c50   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002c52   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002c54   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002c56   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002c58   6806     setf    0x06, 0x0        	SETF	r0x06
002c5a   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002c5c   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002c5e   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002c60   fff6
002c62   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002c64   fff7
002c66   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002c68   fff8
002c6a   0009     tblrd*+                  	TBLRD*+	
002c6c   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002c6e   f004
002c70   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c72   1283     iorwf   0x83, 0x1, 0x0   	IORWF	_PORTD, F
002c74   d047     bra     0x002d04         	BRA	_00126_DS_
                                           _00119_DS_:
                                           ;	.line	35; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else PORTD=PORTD & (255-mask[output]);
002c76   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002c78   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002c7a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002c7c   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002c7e   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002c80   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002c82   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002c84   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002c86   6806     setf    0x06, 0x0        	SETF	r0x06
002c88   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002c8a   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
002c8c   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
002c8e   fff6
002c90   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
002c92   fff7
002c94   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
002c96   fff8
002c98   0009     tblrd*+                  	TBLRD*+	
002c9a   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002c9c   f004
002c9e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002ca0   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x04
                                           ; #	MOVF	r0x04, W
002ca2   1683     andwf   0x83, 0x1, 0x0   	ANDWF	_PORTD, F
                                           ;	.line	36; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	break;
002ca4   d02f     bra     0x002d04         	BRA	_00126_DS_
                                           _00121_DS_:
                                           ;	.line	37; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	case 4: if (state) PORTE=PORTE | mask[output]; 
002ca6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002ca8   1003     iorwf   0x03, 0x0, 0x0   	IORWF	r0x03, W
002caa   e017     bz      0x002cda         	BZ	_00123_DS_
002cac   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002cae   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002cb0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002cb2   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002cb4   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
002cb6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002cb8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
002cba   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002cbc   6804     setf    0x04, 0x0        	SETF	r0x04
002cbe   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002cc0   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002cc2   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
002cc4   fff6
002cc6   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
002cc8   fff7
002cca   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
002ccc   fff8
002cce   0009     tblrd*+                  	TBLRD*+	
002cd0   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
002cd2   f002
002cd4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002cd6   1284     iorwf   0x84, 0x1, 0x0   	IORWF	_PORTE, F
002cd8   d015     bra     0x002d04         	BRA	_00126_DS_
                                           _00123_DS_:
                                           ;	.line	38; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	else PORTE=PORTE & (255-mask[output]);
002cda   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002cdc   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
002cde   6802     setf    0x02, 0x0        	SETF	r0x02
002ce0   0e7c     movlw   0x7c             	MOVLW	LOW(_mask)
002ce2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002ce4   0e27     movlw   0x27             	MOVLW	HIGH(_mask)
002ce6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002ce8   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002cea   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002cec   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
002cee   fff6
002cf0   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
002cf2   fff7
002cf4   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002cf6   fff8
002cf8   0009     tblrd*+                  	TBLRD*+	
002cfa   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002cfc   f000
002cfe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d00   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
002d02   1684     andwf   0x84, 0x1, 0x0   	ANDWF	_PORTE, F
                                           _00126_DS_:
                                           ;	.line	41; /home/vbasel/.icaro/v2/firmware/tmp/digitalw.c	}
002d04   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002d06   f006
002d08   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002d0a   f005
002d0c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002d0e   f004
002d10   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002d12   f003
002d14   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002d16   f002
002d18   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002d1a   f001
002d1c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002d1e   f000
002d20   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002d22   ffd9
002d24   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _mask:
00277c   0201     mulwf   0x01, 0x0        	DB	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x40, 0x80, 0x01, 0x02
00277e   0804     sublw   0x04             
002780   2010     addwfc  0x10, 0x0, 0x0   
002782   8040     bsf     0x40, 0x0, 0x0   
002784   8040     bsf     0x40, 0x0, 0x0   
002786   0201     mulwf   0x01, 0x0        
002788   0104     movlb   0x4              	DB	0x04, 0x01, 0x02, 0x04, 0x08, 0x20, 0x01, 0x02, 0x04, 0x01, 0x02, 0x04
00278a   0402     decf    0x02, 0x0, 0x0   
00278c   2008     addwfc  0x08, 0x0, 0x0   
00278e   0201     mulwf   0x01, 0x0        
002790   0104     movlb   0x4              
002792   0402     decf    0x02, 0x0, 0x0   
002794   1008     iorwf   0x08, 0x0, 0x0   	DB	0x08, 0x10, 0x20, 0x40, 0x80
002796   4020     rrncf   0x20, 0x0, 0x0   
002798   0080     dw      0x0080           
                                           ; ; Starting pCode block for Ival
                                           _port:
00279a   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01
00279c   0000     nop                      
00279e   0000     nop                      
0027a0   0000     nop                      
0027a2   0101     movlb   0x1              
0027a4   0101     movlb   0x1              
0027a6   0201     mulwf   0x01, 0x0        	DB	0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03
0027a8   0202     mulwf   0x02, 0x0        
0027aa   0202     mulwf   0x02, 0x0        
0027ac   0404     decf    0x04, 0x0, 0x0   
0027ae   0304     mulwf   0x04, 0x1        
0027b0   0303     mulwf   0x03, 0x1        
0027b2   0303     mulwf   0x03, 0x1        	DB	0x03, 0x03, 0x03, 0x03, 0x03
0027b4   0303     mulwf   0x03, 0x1        
0027b6   0003     sleep                    
                                           ; ; Starting pCode block for Ival
                                           _servomasks:
0027b8   0201     mulwf   0x01, 0x0        	DB	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x40, 0x80, 0x01, 0x02
0027ba   0804     sublw   0x04             
0027bc   2010     addwfc  0x10, 0x0, 0x0   
0027be   8040     bsf     0x40, 0x0, 0x0   
0027c0   8040     bsf     0x40, 0x0, 0x0   
0027c2   0201     mulwf   0x01, 0x0        
0027c4   0104     movlb   0x4              	DB	0x04, 0x01, 0x02, 0x04, 0x08, 0x20
0027c6   0402     decf    0x02, 0x0, 0x0   
0027c8   2008     addwfc  0x08, 0x0, 0x0   
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5916 (0x171c) bytes ( 4.51%)
                                           ;           	 2958 (0x0b8e) words
                                           ; udata size:	   96 (0x0060) bytes ( 5.36%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
