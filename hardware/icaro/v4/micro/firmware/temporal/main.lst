gplink-1.4.2 #1169 (Jun 26 2016)
Copyright (c) 1998-2015 gputils project
Listing File Generated: 3-18-2017  18:51:39
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (Linux)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__i
                                           	global	_loopvar
                                           	global	_timingindex
                                           	global	__cpu_clock_
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_phase
                                           	global	_needreordering
                                           	global	_timedivision
                                           	global	_mascaratotal
                                           	global	_timevalue
                                           	global	_timings
                                           	global	_activatedservos
                                           	global	_servovalues
                                           	global	_maxminpos
                                           	global	_System_readFlashMemory
                                           	global	_System_getCpuFrequency
                                           	global	_Delayms
                                           	global	_pinmode
                                           	global	_digitalwrite
                                           	global	_digitalread
                                           	global	_toggle
                                           	global	_servos_init
                                           	global	_ServoAttach
                                           	global	_ServoDetach
                                           	global	_ServoWrite
                                           	global	_ServoRead
                                           	global	_ServoMinimumPulse
                                           	global	_ServoMaximumPulse
                                           	global	_servos_interrupt
                                           	global	_analog_init
                                           	global	_analogreference
                                           	global	_analogread
                                           	global	_analogwrite_init
                                           	global	_analogwrite
                                           	global	_IO_init
                                           	global	_IO_digital
                                           	global	_setup
                                           	global	_sensordigital
                                           	global	_loop
                                           	global	_high_priority_isr
                                           	global	_low_priority_isr
                                           	global	_mask
                                           	global	_port
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPDATAbits
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_TRISDbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_FSR2Hbits
                                           	extern	_BSRbits
                                           	extern	_FSR1Hbits
                                           	extern	_FSR0Hbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_TBLPTRUbits
                                           	extern	_PCLATHbits
                                           	extern	_PCLATUbits
                                           	extern	_STKPTRbits
                                           	extern	_TOSUbits
                                           	extern	_stack_end
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_TRISD
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_CCP2CON
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	__divslong
                                           	extern	__divulong
                                           	extern	__mulint
                                           	extern	_delay100tcy
                                           	extern	__divsint
                                           	extern	_cinit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _phase	db	0x00
                                           _needreordering	db	0x00
                                           _timedivision	db	0x00
                                           __i	db	0x00, 0x00
                                           ___uflags	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_main_0	udata
                                           __cpu_clock_	res	4
                                           
                                           udata_main_1	udata
                                           _timingindex	res	1
                                           
                                           udata_main_2	udata
                                           _loopvar	res	1
                                           
                                           udata_main_3	udata
                                           _servovalues	res	30
                                           
                                           udata_main_4	udata
                                           _maxminpos	res	60
                                           
                                           udata_main_5	udata
                                           _activatedservos	res	5
                                           
                                           udata_main_6	udata
                                           _ServosPulseDown_timingindex_1_28	res	1
                                           
                                           udata_main_7	udata
                                           _timings	res	150
                                           
                                           udata_main_8	udata
                                           _timevalue	res	30
                                           
                                           udata_main_9	udata
                                           _SortServoTimings_t_1_32	res	1
                                           
                                           udata_main_10	udata
                                           _SortServoTimings_totalservos_1_32	res	1
                                           
                                           udata_main_11	udata
                                           _SortServoTimings_numservos_1_32	res	1
                                           
                                           udata_main_12	udata
                                           _SortServoTimings_s_1_32	res	1
                                           
                                           udata_main_13	udata
                                           _mascaratotal	res	5
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000C00
                                           __entry:
000c00   ef66     goto    0x002ecc         	goto	__startup
000c02   f017
                                           	
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x1_high_priority_isr	code	0X000C08
                                           ivec_0x1_high_priority_isr:
000c08   efec     goto    0x0033d8         	GOTO	_high_priority_isr
000c0a   f019
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x2_low_priority_isr	code	0X000C18
                                           ivec_0x2_low_priority_isr:
000c18   ef27     goto    0x00344e         	GOTO	_low_priority_isr
000c1a   f01a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	197; /home/vbasel/.icaro/v4/firmware/source/main.c	if (OSCCONbits.SCS > 0x01)
003620   50d3     movf    0xd3, 0x0, 0x0   	MOVF	_OSCCONbits, W
003622   0b03     andlw   0x03             	ANDLW	0x03
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
003624   0f80     addlw   0x80             	ADDLW	0x80
003626   0f7e     addlw   0x7e             	ADDLW	0x7e
003628   e302     bnc     0x00362e         	BNC	_00797_DS_
                                           _00793_DS_:
                                           ;	.line	199; /home/vbasel/.icaro/v4/firmware/source/main.c	while (!OSCCONbits.IOFS);
00362a   a4d3     btfss   0xd3, 0x2, 0x0   	BTFSS	_OSCCONbits, 2
00362c   d7fe     bra     0x00362a         	BRA	_00793_DS_
                                           _00797_DS_:
                                           ;	.line	243; /home/vbasel/.icaro/v4/firmware/source/main.c	IO_init();
00362e   ece8     call    0x0035d0, 0x0call    0x0035d0, 0x0 	CALL	_IO_init
003630   f01a
                                           ;	.line	244; /home/vbasel/.icaro/v4/firmware/source/main.c	IO_digital();
003632   ec06     call    0x000c0c, 0x0call    0x000c0c, 0x0 	CALL	_IO_digital
003634   f006
                                           ;	.line	288; /home/vbasel/.icaro/v4/firmware/source/main.c	servos_init();
003636   ecbd     call    0x002f7a, 0x0call    0x002f7a, 0x0 	CALL	_servos_init
003638   f017
                                           ;	.line	300; /home/vbasel/.icaro/v4/firmware/source/main.c	setup();
00363a   ec5d     call    0x002cba, 0x0call    0x002cba, 0x0 	CALL	_setup
00363c   f016
                                           _00799_DS_:
                                           ;	.line	327; /home/vbasel/.icaro/v4/firmware/source/main.c	loop();
00363e   ec0b     call    0x000c16, 0x0call    0x000c16, 0x0 	CALL	_loop
003640   f006
003642   d7fd     bra     0x00363e         	BRA	_00799_DS_
003644   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__low_priority_isr	code
                                           _low_priority_isr:
                                           ;	.line	535; /home/vbasel/.icaro/v4/firmware/source/main.c	void low_priority_isr(void) __interrupt 2
00344e   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
003450   ffe5
003452   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
003454   ffe5
003456   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003458   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00345a   ffe5
00345c   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
00345e   ffe5
003460   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
003462   ffe5
003464   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
003466   ffe5
003468   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00346a   ffe5
00346c   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
00346e   ffe5
003470   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003472   ffe5
003474   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003476   ffd9
003478   cff6     movff   0xff6, 0xfe5     	MOVFF	_TBLPTRL, POSTDEC1
00347a   ffe5
00347c   cff7     movff   0xff7, 0xfe5     	MOVFF	_TBLPTRH, POSTDEC1
00347e   ffe5
003480   cff8     movff   0xff8, 0xfe5     	MOVFF	_TBLPTRU, POSTDEC1
003482   ffe5
003484   cff5     movff   0xff5, 0xfe5     	MOVFF	_TABLAT, POSTDEC1
003486   ffe5
                                           	
003488   cfe4     movff   0xfe4, 0xff5     	MOVFF	PREINC1, _TABLAT
00348a   fff5
00348c   cfe4     movff   0xfe4, 0xff8     	MOVFF	PREINC1, _TBLPTRU
00348e   fff8
003490   cfe4     movff   0xfe4, 0xff7     	MOVFF	PREINC1, _TBLPTRH
003492   fff7
003494   cfe4     movff   0xfe4, 0xff6     	MOVFF	PREINC1, _TBLPTRL
003496   fff6
                                           	
003498   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00349a   ffd9
00349c   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00349e   fffb
0034a0   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0034a2   fffa
0034a4   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0034a6   ffea
0034a8   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0034aa   ffe9
0034ac   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0034ae   fff4
0034b0   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0034b2   fff3
0034b4   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0034b6   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0034b8   ffe0
0034ba   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0034bc   ffd8
0034be   0010     retfie  0x0              	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_main__high_priority_isr	code
                                           _high_priority_isr:
                                           ;	.line	438; /home/vbasel/.icaro/v4/firmware/source/main.c	void high_priority_isr(void) __interrupt 1
0033d8   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
0033da   ffe5
0033dc   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
0033de   ffe5
0033e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033e2   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
0033e4   ffe5
0033e6   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
0033e8   ffe5
0033ea   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
0033ec   ffe5
0033ee   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
0033f0   ffe5
0033f2   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
0033f4   ffe5
0033f6   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
0033f8   ffe5
0033fa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0033fc   ffe5
0033fe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003400   ffd9
003402   cff6     movff   0xff6, 0xfe5     	MOVFF	_TBLPTRL, POSTDEC1
003404   ffe5
003406   cff7     movff   0xff7, 0xfe5     	MOVFF	_TBLPTRH, POSTDEC1
003408   ffe5
00340a   cff8     movff   0xff8, 0xfe5     	MOVFF	_TBLPTRU, POSTDEC1
00340c   ffe5
00340e   cff5     movff   0xff5, 0xfe5     	MOVFF	_TABLAT, POSTDEC1
003410   ffe5
                                           	
                                           ;	.line	475; /home/vbasel/.icaro/v4/firmware/source/main.c	servos_interrupt();
003412   eca5     call    0x00354a, 0x0call    0x00354a, 0x0 	CALL	_servos_interrupt
003414   f01a
003416   cfe4     movff   0xfe4, 0xff5     	MOVFF	PREINC1, _TABLAT
003418   fff5
00341a   cfe4     movff   0xfe4, 0xff8     	MOVFF	PREINC1, _TBLPTRU
00341c   fff8
00341e   cfe4     movff   0xfe4, 0xff7     	MOVFF	PREINC1, _TBLPTRH
003420   fff7
003422   cfe4     movff   0xfe4, 0xff6     	MOVFF	PREINC1, _TBLPTRL
003424   fff6
                                           	
003426   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003428   ffd9
00342a   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
00342c   fffb
00342e   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
003430   fffa
003432   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
003434   ffea
003436   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
003438   ffe9
00343a   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
00343c   fff4
00343e   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
003440   fff3
003442   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
003444   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
003446   ffe0
003448   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
00344a   ffd8
00344c   0010     retfie  0x0              	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	;	Initialize the stack pointer
002ecc   ee17     lfsr    0x1, 0x7ff       	lfsr	1, _stack_end
002ece   f0ff
002ed0   ee27     lfsr    0x2, 0x7ff       	lfsr	2, _stack_end
002ed2   f0ff
                                           	;	1st silicon does not do this on POR
002ed4   6af8     clrf    0xf8, 0x0        	clrf	_TBLPTRU, 0
                                           	;	Initialize the flash memory access configuration.
                                           	;	This is harmless for non-flash devices, so we do it on all parts.
002ed6   8ea6     bsf     0xa6, 0x7, 0x0   	bsf	0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
002ed8   9ca6     bcf     0xa6, 0x6, 0x0   	bcf	0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	;	Load FSR0 with top of RAM.
002eda   0ebf     movlw   0xbf             	movlw	0xbf
002edc   6ee9     movwf   0xe9, 0x0        	movwf	_FSR0L, 0
002ede   0e0e     movlw   0x0e             	movlw	0x0e
002ee0   6eea     movwf   0xea, 0x0        	movwf	_FSR0H, 0
                                           	;	Place 0xff at address 0x00 as a sentinel.
002ee2   6800     setf    0x00, 0x0        	setf	0x00, 0
                                           clear_loop:
002ee4   6aed     clrf    0xed, 0x0        	clrf	_POSTDEC0, 0
002ee6   5000     movf    0x00, 0x0, 0x0   	movf	0x00, w, 0
002ee8   e1fd     bnz     0x002ee4         	bnz	clear_loop
                                           	;	TBLPTR = &cinit
002eea   0e6e     movlw   0x6e             	movlw	low(_cinit)
002eec   6ef6     movwf   0xf6, 0x0        	movwf	_TBLPTRL, 0
002eee   0e36     movlw   0x36             	movlw	high(_cinit)
002ef0   6ef7     movwf   0xf7, 0x0        	movwf	_TBLPTRH, 0
002ef2   0e00     movlw   0x00             	movlw	upper(_cinit)
002ef4   6ef8     movwf   0xf8, 0x0        	movwf	_TBLPTRU, 0
                                           	;	0x05 = cinit.num_init
002ef6   0009     tblrd*+                  	tblrd*+
002ef8   cff5     movff   0xff5, 0x005     	movff	_TABLAT, 0x05
002efa   f005
002efc   0009     tblrd*+                  	tblrd*+
002efe   cff5     movff   0xff5, 0x006     	movff	_TABLAT, (0x05 + 1)
002f00   f006
                                           	;	while (0x05)
002f02   d034     bra     0x002f6c         	bra	entry_loop_dec
                                           entry_loop:
                                           	;	Count down so we only have to look up the data in _cinit once.
                                           	;	At this point we know that TBLPTR points to the top of the current
                                           	;	entry in _cinit, so we can just start reading the from, to, and
                                           	;	size values.
                                           	;	Read the source address low.
                                           	;	0x00 = 0x07 ->from;
002f04   0009     tblrd*+                  	tblrd*+
002f06   cff5     movff   0xff5, 0x000     	movff	_TABLAT, 0x00
002f08   f000
                                           	;	source address high
002f0a   0009     tblrd*+                  	tblrd*+
002f0c   cff5     movff   0xff5, 0x001     	movff	_TABLAT, (0x00 + 1)
002f0e   f001
                                           	;	source address upper
002f10   0009     tblrd*+                  	tblrd*+
002f12   cff5     movff   0xff5, 0x002     	movff	_TABLAT, (0x00 + 2)
002f14   f002
                                           	;	Skip a byte since it is stored as a 32bit int.
002f16   0009     tblrd*+                  	tblrd*+
                                           	;	Read the destination address directly into FSR0
                                           	;	destination address low.
                                           	;	FSR0 = (unsigned short)0x07 ->to;
002f18   0009     tblrd*+                  	tblrd*+
002f1a   cff5     movff   0xff5, 0xfe9     	movff	_TABLAT, _FSR0L
002f1c   ffe9
                                           	;	destination address high
002f1e   0009     tblrd*+                  	tblrd*+
002f20   cff5     movff   0xff5, 0xfea     	movff	_TABLAT, _FSR0H
002f22   ffea
                                           	;	Skip two bytes since it is stored as a 32bit int.
002f24   0009     tblrd*+                  	tblrd*+
002f26   0009     tblrd*+                  	tblrd*+
                                           	;	Read the size of data to transfer to destination address.
                                           	;	0x03 = (unsigned short)0x07 ->size;
002f28   0009     tblrd*+                  	tblrd*+
002f2a   cff5     movff   0xff5, 0x003     	movff	_TABLAT, 0x03
002f2c   f003
002f2e   0009     tblrd*+                  	tblrd*+
002f30   cff5     movff   0xff5, 0x004     	movff	_TABLAT, (0x03 + 1)
002f32   f004
                                           	;	Skip two bytes since it is stored as a 32bit int.
002f34   0009     tblrd*+                  	tblrd*+
002f36   0009     tblrd*+                  	tblrd*+
                                           	;	0x00 = 0x07 ->from;
                                           	;	FSR0 = (unsigned short)0x07 ->to;
                                           	;	0x03 = (unsigned short)0x07 ->size;
                                           	;	The table pointer now points to the next entry. Save it
                                           	;	off since we will be using the table pointer to do the copying
                                           	;	for the entry.
                                           	;	0x07 = TBLPTR
002f38   cff6     movff   0xff6, 0x007     	movff	_TBLPTRL, 0x07
002f3a   f007
002f3c   cff7     movff   0xff7, 0x008     	movff	_TBLPTRH, (0x07 + 1)
002f3e   f008
002f40   cff8     movff   0xff8, 0x009     	movff	_TBLPTRU, (0x07 + 2)
002f42   f009
                                           	;	Now assign the source address to the table pointer.
                                           	;	TBLPTR = 0x00
002f44   c000     movff   0x000, 0xff6     	movff	0x00, _TBLPTRL
002f46   fff6
002f48   c001     movff   0x001, 0xff7     	movff	(0x00 + 1), _TBLPTRH
002f4a   fff7
002f4c   c002     movff   0x002, 0xff8     	movff	(0x00 + 2), _TBLPTRU
002f4e   fff8
002f50   d003     bra     0x002f58         	bra	copy_loop_dec
                                           copy_loop:
002f52   0009     tblrd*+                  	tblrd*+
002f54   cff5     movff   0xff5, 0xfee     	movff	_TABLAT, _POSTINC0
002f56   ffee
                                           copy_loop_dec:
                                           	;	while (--0x03);
                                           	;	Decrement and test the byte counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
002f58   0603     decf    0x03, 0x1, 0x0   	decf	0x03, f, 0
002f5a   e2fb     bc      0x002f52         	bc	copy_loop
002f5c   0604     decf    0x04, 0x1, 0x0   	decf	(0x03 + 1), f, 0
002f5e   e2f9     bc      0x002f52         	bc	copy_loop
                                           	;	Restore the table pointer for the next entry.
                                           	;	TBLPTR = 0x07
002f60   c007     movff   0x007, 0xff6     	movff	0x07, _TBLPTRL
002f62   fff6
002f64   c008     movff   0x008, 0xff7     	movff	(0x07 + 1), _TBLPTRH
002f66   fff7
002f68   c009     movff   0x009, 0xff8     	movff	(0x07 + 2), _TBLPTRU
002f6a   fff8
                                           entry_loop_dec:
                                           	;	while (--0x05);
                                           	;	Decrement and test the entry counter.
                                           	;	The cycle ends when the value of counter reaches the -1.
002f6c   0605     decf    0x05, 0x1, 0x0   	decf	0x05, f, 0
002f6e   e2ca     bc      0x002f04         	bc	entry_loop
002f70   0606     decf    0x06, 0x1, 0x0   	decf	(0x05 + 1), f, 0
002f72   e2c8     bc      0x002f04         	bc	entry_loop
                                           	
                                           ;	.line	259; /home/vbasel/.icaro/v4/firmware/source/crt0iz.c	main ();
002f74   ec10     call    0x003620, 0x0call    0x003620, 0x0 	CALL	_main
002f76   f01b
                                           lockup:
                                           	;	Returning from main will lock up.
002f78   d7ff     bra     0x002f78         	bra	lockup
                                           	
                                           ; ; Starting pCode block
                                           S_main__loop	code
                                           _loop:
                                           ;	.line	69; /home/vbasel/.icaro/v4/firmware/source/user.c	}
000c16   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__sensordigital	code
                                           _sensordigital:
                                           ;	.line	98; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	int sensordigital(int valor)
003506   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003508   ffe5
00350a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00350c   ffd9
00350e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003510   ffe5
003512   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003514   ffe5
003516   0e02     movlw   0x02             	MOVLW	0x02
003518   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00351a   f000
00351c   0e03     movlw   0x03             	MOVLW	0x03
00351e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003520   f001
                                           ;	.line	102; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	temp=digitalread(valor);
003522   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003524   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003526   ec86     call    0x00230c, 0x0call    0x00230c, 0x0 	CALL	_digitalread
003528   f011
00352a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00352c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	103; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	if (temp==0)
00352e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003530   e103     bnz     0x003538         	BNZ	_00771_DS_
                                           ;	.line	105; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	return 1;
003532   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003534   0e01     movlw   0x01             	MOVLW	0x01
003536   d002     bra     0x00353c         	BRA	_00773_DS_
                                           _00771_DS_:
                                           ;	.line	109; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	return 0;
003538   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
00353a   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00773_DS_:
00353c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00353e   f001
003540   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003542   f000
003544   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003546   ffd9
003548   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__setup	code
                                           _setup:
                                           ;	.line	67; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	TRISB=0; //defino PORTB como salida
002cba   6a93     clrf    0x93, 0x0        	CLRF	_TRISB
                                           ;	.line	68; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	PORTB=0; 
002cbc   6a81     clrf    0x81, 0x0        	CLRF	_PORTB
                                           ;	.line	69; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	PORTD=0;
002cbe   6a83     clrf    0x83, 0x0        	CLRF	_PORTD
                                           ;	.line	70; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG1,INPUT);
002cc0   0e01     movlw   0x01             	MOVLW	0x01
002cc2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cc4   0e15     movlw   0x15             	MOVLW	0x15
002cc6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cc8   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002cca   f00e
002ccc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002cce   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	71; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG2,INPUT);
002cd0   0e01     movlw   0x01             	MOVLW	0x01
002cd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cd4   0e16     movlw   0x16             	MOVLW	0x16
002cd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cd8   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002cda   f00e
002cdc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002cde   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	73; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG3,TRIG);
002ce0   0e01     movlw   0x01             	MOVLW	0x01
002ce2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ce4   0e17     movlw   0x17             	MOVLW	0x17
002ce6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ce8   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002cea   f00e
002cec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002cee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	74; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_DIG4,ECHO);
002cf0   0e01     movlw   0x01             	MOVLW	0x01
002cf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cf4   0e18     movlw   0x18             	MOVLW	0x18
002cf6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cf8   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002cfa   f00e
002cfc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002cfe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	75; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P1,OUTPUT);
002d00   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002d02   0e19     movlw   0x19             	MOVLW	0x19
002d04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d06   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002d08   f00e
002d0a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d0c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	76; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P2,OUTPUT);
002d0e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002d10   0e1a     movlw   0x1a             	MOVLW	0x1a
002d12   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d14   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002d16   f00e
002d18   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d1a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	77; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P3,OUTPUT);
002d1c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002d1e   0e1b     movlw   0x1b             	MOVLW	0x1b
002d20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d22   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002d24   f00e
002d26   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d28   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	78; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	pinmode(ICR_l293_P4,OUTPUT);
002d2a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002d2c   0e1c     movlw   0x1c             	MOVLW	0x1c
002d2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d30   ec61     call    0x001cc2, 0x0call    0x001cc2, 0x0 	CALL	_pinmode
002d32   f00e
002d34   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d36   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	79; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV1);
002d38   0e0a     movlw   0x0a             	MOVLW	0x0a
002d3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d3c   ec90     call    0x001f20, 0x0call    0x001f20, 0x0 	CALL	_ServoAttach
002d3e   f00f
002d40   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	80; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV2);
002d42   0e0b     movlw   0x0b             	MOVLW	0x0b
002d44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d46   ec90     call    0x001f20, 0x0call    0x001f20, 0x0 	CALL	_ServoAttach
002d48   f00f
002d4a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	81; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV3);
002d4c   0e0c     movlw   0x0c             	MOVLW	0x0c
002d4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d50   ec90     call    0x001f20, 0x0call    0x001f20, 0x0 	CALL	_ServoAttach
002d52   f00f
002d54   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	82; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV4);
002d56   0e09     movlw   0x09             	MOVLW	0x09
002d58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d5a   ec90     call    0x001f20, 0x0call    0x001f20, 0x0 	CALL	_ServoAttach
002d5c   f00f
002d5e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	83; /home/vbasel/.icaro/v4/firmware/icaro_lib/definiciones_icr.c	ServoAttach(ICR_SRV5);
002d60   0e08     movlw   0x08             	MOVLW	0x08
002d62   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d64   ec90     call    0x001f20, 0x0call    0x001f20, 0x0 	CALL	_ServoAttach
002d66   f00f
002d68   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d6a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__IO_digital	code
                                           _IO_digital:
                                           ;	.line	123; /home/vbasel/.icaro/v4/firmware/core/io.c	ADCON1 = 0x0F;				// AN0 to AN12 Digital I/O
000c0c   0e0f     movlw   0x0f             	MOVLW	0x0f
000c0e   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1
                                           ;	.line	124; /home/vbasel/.icaro/v4/firmware/core/io.c	CMCON = 0x07;               // Comparators as Digital I/O
000c10   0e07     movlw   0x07             	MOVLW	0x07
000c12   6eb4     movwf   0xb4, 0x0        	MOVWF	_CMCON
000c14   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__IO_init	code
                                           _IO_init:
                                           ;	.line	53; /home/vbasel/.icaro/v4/firmware/core/io.c	LATA  = 0x00;
0035d0   6a89     clrf    0x89, 0x0        	CLRF	_LATA
                                           ;	.line	54; /home/vbasel/.icaro/v4/firmware/core/io.c	LATB  = 0x00;
0035d2   6a8a     clrf    0x8a, 0x0        	CLRF	_LATB
                                           ;	.line	72; /home/vbasel/.icaro/v4/firmware/core/io.c	LATC  = 0x00;
0035d4   6a8b     clrf    0x8b, 0x0        	CLRF	_LATC
                                           ;	.line	79; /home/vbasel/.icaro/v4/firmware/core/io.c	LATD  = 0x00; 
0035d6   6a8c     clrf    0x8c, 0x0        	CLRF	_LATD
                                           ;	.line	80; /home/vbasel/.icaro/v4/firmware/core/io.c	LATE  = 0x00; 
0035d8   6a8d     clrf    0x8d, 0x0        	CLRF	_LATE
                                           ;	.line	83; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISA = 0x00;
0035da   6a92     clrf    0x92, 0x0        	CLRF	_TRISA
                                           ;	.line	85; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISB = 0x00;
0035dc   6a93     clrf    0x93, 0x0        	CLRF	_TRISB
                                           ;	.line	91; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISCbits.TRISC0 = 0x00;
0035de   9094     bcf     0x94, 0x0, 0x0   	BCF	_TRISCbits, 0
                                           ;	.line	92; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISCbits.TRISC1 = 0x00;
0035e0   9294     bcf     0x94, 0x1, 0x0   	BCF	_TRISCbits, 1
                                           ;	.line	93; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISCbits.TRISC2 = 0x00;
0035e2   9494     bcf     0x94, 0x2, 0x0   	BCF	_TRISCbits, 2
                                           ;	.line	94; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISCbits.TRISC6 = 0x00;
0035e4   9c94     bcf     0x94, 0x6, 0x0   	BCF	_TRISCbits, 6
                                           ;	.line	95; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISCbits.TRISC7 = 0x00;
0035e6   9e94     bcf     0x94, 0x7, 0x0   	BCF	_TRISCbits, 7
                                           ;	.line	101; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISD = 0x00; 
0035e8   6a95     clrf    0x95, 0x0        	CLRF	_TRISD
                                           ;	.line	102; /home/vbasel/.icaro/v4/firmware/core/io.c	TRISE = 0x00; 
0035ea   6a96     clrf    0x96, 0x0        	CLRF	_TRISE
                                           ;	.line	106; /home/vbasel/.icaro/v4/firmware/core/io.c	PORTA  = 0x00;
0035ec   6a80     clrf    0x80, 0x0        	CLRF	_PORTA
                                           ;	.line	107; /home/vbasel/.icaro/v4/firmware/core/io.c	PORTB  = 0x00;
0035ee   6a81     clrf    0x81, 0x0        	CLRF	_PORTB
                                           ;	.line	108; /home/vbasel/.icaro/v4/firmware/core/io.c	PORTC  = 0x00;
0035f0   6a82     clrf    0x82, 0x0        	CLRF	_PORTC
                                           ;	.line	112; /home/vbasel/.icaro/v4/firmware/core/io.c	PORTD  = 0x00; 
0035f2   6a83     clrf    0x83, 0x0        	CLRF	_PORTD
                                           ;	.line	113; /home/vbasel/.icaro/v4/firmware/core/io.c	PORTE  = 0x00; 
0035f4   6a84     clrf    0x84, 0x0        	CLRF	_PORTE
0035f6   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogwrite	code
                                           _analogwrite:
                                           ;	.line	241; /home/vbasel/.icaro/v4/firmware/core/analog.c	void analogwrite(u8 pin, u16 duty)
003340   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003342   ffe5
003344   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003346   ffd9
003348   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00334a   ffe5
00334c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00334e   ffe5
003350   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003352   ffe5
003354   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003356   ffe5
003358   0e02     movlw   0x02             	MOVLW	0x02
00335a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00335c   f000
00335e   0e03     movlw   0x03             	MOVLW	0x03
003360   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003362   f001
003364   0e04     movlw   0x04             	MOVLW	0x04
003366   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003368   f002
                                           ;	.line	243; /home/vbasel/.icaro/v4/firmware/core/analog.c	switch (pin)
00336a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00336c   0a0b     xorlw   0x0b             	XORLW	0x0b
00336e   e017     bz      0x00339e         	BZ	_00737_DS_
003370   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003372   0a0c     xorlw   0x0c             	XORLW	0x0c
003374   e125     bnz     0x0033c0         	BNZ	_00738_DS_
                                           ;	.line	306; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCP1CON  = 0b00001100;
003376   0e0c     movlw   0x0c             	MOVLW	0x0c
003378   6ebd     movwf   0xbd, 0x0        	MOVWF	_CCP1CON
                                           ;	.line	307; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCPR1L   = ( duty >> 2 ) & 0xFF;    // 8 LSB
00337a   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00337c   3002     rrcf    0x02, 0x0, 0x0   	RRCF	r0x02, W
00337e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003380   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
003382   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003384   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
003386   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
003388   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
00338a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00338c   6ebe     movwf   0xbe, 0x0        	MOVWF	_CCPR1L
                                           ;	.line	308; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCP1CON |= ((u8)duty & 0x03) << 4;  // 2 MSB in <5:4>
00338e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003390   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003392   0e03     movlw   0x03             	MOVLW	0x03
003394   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
003396   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
003398   0bf0     andlw   0xf0             	ANDLW	0xf0
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
00339a   12bd     iorwf   0xbd, 0x1, 0x0   	IORWF	_CCP1CON, F
                                           ;	.line	309; /home/vbasel/.icaro/v4/firmware/core/analog.c	break;
00339c   d011     bra     0x0033c0         	BRA	_00738_DS_
                                           _00737_DS_:
                                           ;	.line	312; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCP2CON  = 0b00001100;
00339e   0e0c     movlw   0x0c             	MOVLW	0x0c
0033a0   6eba     movwf   0xba, 0x0        	MOVWF	_CCP2CON
                                           ;	.line	313; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCPR2L   = ( duty >> 2 ) & 0xFF;    // 8 LSB
0033a2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0033a4   3002     rrcf    0x02, 0x0, 0x0   	RRCF	r0x02, W
0033a6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0033a8   3001     rrcf    0x01, 0x0, 0x0   	RRCF	r0x01, W
0033aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0033ac   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0033ae   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
0033b0   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
0033b2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0033b4   6ebb     movwf   0xbb, 0x0        	MOVWF	_CCPR2L
                                           ;	.line	314; /home/vbasel/.icaro/v4/firmware/core/analog.c	CCP2CON |= ((u8)duty & 0x03) << 4;  // 2 MSB in <5:4>
0033b6   0e03     movlw   0x03             	MOVLW	0x03
0033b8   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
0033ba   3801     swapf   0x01, 0x0, 0x0   	SWAPF	r0x01, W
0033bc   0bf0     andlw   0xf0             	ANDLW	0xf0
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
0033be   12ba     iorwf   0xba, 0x1, 0x0   	IORWF	_CCP2CON, F
                                           _00738_DS_:
                                           ;	.line	321; /home/vbasel/.icaro/v4/firmware/core/analog.c	PIR1bits.TMR2IF = 0;
0033c0   929e     bcf     0x9e, 0x1, 0x0   	BCF	_PIR1bits, 1
0033c2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0033c4   f003
0033c6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0033c8   f002
0033ca   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0033cc   f001
0033ce   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0033d0   f000
0033d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0033d4   ffd9
0033d6   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogwrite_init	code
                                           _analogwrite_init:
                                           ;	.line	237; /home/vbasel/.icaro/v4/firmware/core/analog.c	PR2 = 0xFF;                         // set PWM period to the max. to get 10-bit res.
00367c   68cb     setf    0xcb, 0x0        	SETF	_PR2
                                           ;	.line	238; /home/vbasel/.icaro/v4/firmware/core/analog.c	T2CON = 0b00000100;                 // Timer2 on, prescaler is 1
00367e   0e04     movlw   0x04             	MOVLW	0x04
003680   6eca     movwf   0xca, 0x0        	MOVWF	_T2CON
003682   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogread	code
                                           _analogread:
                                           ;	.line	134; /home/vbasel/.icaro/v4/firmware/core/analog.c	u16 analogread(u8 channel)
0032a4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0032a6   ffe5
0032a8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0032aa   ffd9
0032ac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0032ae   ffe5
0032b0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0032b2   ffe5
0032b4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0032b6   ffe5
0032b8   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0032ba   ffe5
0032bc   0e02     movlw   0x02             	MOVLW	0x02
0032be   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0032c0   f000
                                           ;	.line	173; /home/vbasel/.icaro/v4/firmware/core/analog.c	if(channel>=13 && channel<=20)
0032c2   0e0d     movlw   0x0d             	MOVLW	0x0d
0032c4   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0032c6   e30b     bnc     0x0032de         	BNC	_00690_DS_
0032c8   0e15     movlw   0x15             	MOVLW	0x15
0032ca   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0032cc   e208     bc      0x0032de         	BC	_00690_DS_
                                           ;	.line	174; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON0=(channel-13) << 2;   // A0 = 13, ..., A4 = 17
0032ce   0ef3     movlw   0xf3             	MOVLW	0xf3
0032d0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0032d2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0032d4   4401     rlncf   0x01, 0x0, 0x0   	RLNCF	r0x01, W
0032d6   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0032d8   0bfc     andlw   0xfc             	ANDLW	0xfc
0032da   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
0032dc   d007     bra     0x0032ec         	BRA	_00691_DS_
                                           _00690_DS_:
                                           ;	.line	175; /home/vbasel/.icaro/v4/firmware/core/analog.c	else if(channel<=5)
0032de   0e06     movlw   0x06             	MOVLW	0x06
0032e0   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0032e2   e204     bc      0x0032ec         	BC	_00691_DS_
                                           ;	.line	176; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON0 = channel << 2;      // A0 = 0, ..., A4 = 4
0032e4   4400     rlncf   0x00, 0x0, 0x0   	RLNCF	r0x00, W
0032e6   44e8     rlncf   0xe8, 0x0, 0x0   	RLNCF	WREG, W
0032e8   0bfc     andlw   0xfc             	ANDLW	0xfc
0032ea   6ec2     movwf   0xc2, 0x0        	MOVWF	_ADCON0
                                           _00691_DS_:
                                           ;	.line	180; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON0bits.ADON=1;                  // A/D Converter module is enabled
0032ec   80c2     bsf     0xc2, 0x0, 0x0   	BSF	_ADCON0bits, 0
                                           ;	.line	182; /home/vbasel/.icaro/v4/firmware/core/analog.c	for (result=1;result<10;result++)   // Acquisition time
0032ee   0e09     movlw   0x09             	MOVLW	0x09
0032f0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0032f2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00699_DS_:
0032f4   0000     nop                      	NOP
0032f6   0eff     movlw   0xff             	MOVLW	0xff
0032f8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0032fa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
                                           ;	.line	182; /home/vbasel/.icaro/v4/firmware/core/analog.c	for (result=1;result<10;result++)   // Acquisition time
0032fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0032fe   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
003300   e1f9     bnz     0x0032f4         	BNZ	_00699_DS_
                                           ;	.line	185; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON0bits.GO=1;                    // Start A/D Conversion
003302   82c2     bsf     0xc2, 0x1, 0x0   	BSF	_ADCON0bits, 1
                                           _00694_DS_:
                                           ;	.line	187; /home/vbasel/.icaro/v4/firmware/core/analog.c	while (ADCON0bits.GO);              // Wait for conversion stop
003304   b2c2     btfsc   0xc2, 0x1, 0x0   	BTFSC	_ADCON0bits, 1
003306   d7fe     bra     0x003304         	BRA	_00694_DS_
                                           ;	.line	189; /home/vbasel/.icaro/v4/firmware/core/analog.c	result = ADRESH << 8;
003308   cfc4     movff   0xfc4, 0x000     	MOVFF	_ADRESH, r0x00
00330a   f000
00330c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00330e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003310   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003312   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           ;	.line	190; /home/vbasel/.icaro/v4/firmware/core/analog.c	result += ADRESL;
003314   cfc3     movff   0xfc3, 0x000     	MOVFF	_ADRESL, r0x00
003316   f000
003318   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00331a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00331c   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00331e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003320   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
                                           ;	.line	192; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON0bits.ADON = 0;                // A/D Converter module is disabled
003322   90c2     bcf     0xc2, 0x0, 0x0   	BCF	_ADCON0bits, 0
                                           ;	.line	194; /home/vbasel/.icaro/v4/firmware/core/analog.c	return(result);
003324   c003     movff   0x003, 0xff3     	MOVFF	r0x03, PRODL
003326   fff3
003328   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00332a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00332c   f003
00332e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003330   f002
003332   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003334   f001
003336   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003338   f000
00333a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00333c   ffd9
00333e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analogreference	code
                                           _analogreference:
                                           ;	.line	103; /home/vbasel/.icaro/v4/firmware/core/analog.c	void analogreference(u8 Type)
0035f8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0035fa   ffe5
0035fc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0035fe   ffd9
003600   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003602   ffe5
003604   0e02     movlw   0x02             	MOVLW	0x02
003606   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003608   f000
                                           ; #	MOVF	r0x00, W
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00671_DS_
                                           ; #	GOTO	_00673_DS_
                                           ; #	MOVF	r0x00, W
                                           ;	.line	108; /home/vbasel/.icaro/v4/firmware/core/analog.c	if(Type == DEFAULT)			//the default analog reference of 5 volts (on 5V Arduino boards) or 3.3 volts (on 3.3V Arduino boards)
00360a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ;	.line	109; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON1|=0x00;			//Vref+ = VDD
00360c   e004     bz      0x003616         	BZ	_00673_DS_
                                           ;	.line	110; /home/vbasel/.icaro/v4/firmware/core/analog.c	else if(Type == EXTERNAL)	//the voltage applied to the AREF pin (0 to 5V only) is used as the reference.
00360e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003610   0a01     xorlw   0x01             	XORLW	0x01
003612   e101     bnz     0x003616         	BNZ	_00673_DS_
                                           ;	.line	111; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON1|=0x10;			//Vref+ = External source
003614   88c1     bsf     0xc1, 0x4, 0x0   	BSF	_ADCON1, 4
                                           _00673_DS_:
003616   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003618   f000
00361a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00361c   ffd9
00361e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__analog_init	code
                                           _analog_init:
                                           ;	.line	36; /home/vbasel/.icaro/v4/firmware/core/analog.c	TRISA=TRISA | 0x2F;
00365e   0e2f     movlw   0x2f             	MOVLW	0x2f
003660   1292     iorwf   0x92, 0x1, 0x0   	IORWF	_TRISA, F
                                           ;	.line	37; /home/vbasel/.icaro/v4/firmware/core/analog.c	TRISE=TRISE | 0x07;	
003662   0e07     movlw   0x07             	MOVLW	0x07
003664   1296     iorwf   0x96, 0x1, 0x0   	IORWF	_TRISE, F
                                           ;	.line	38; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON1=0x07;
003666   6ec1     movwf   0xc1, 0x0        	MOVWF	_ADCON1
                                           ;	.line	39; /home/vbasel/.icaro/v4/firmware/core/analog.c	ADCON2=0xBD;
003668   0ebd     movlw   0xbd             	MOVLW	0xbd
00366a   6ec0     movwf   0xc0, 0x0        	MOVWF	_ADCON2
00366c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__servos_interrupt	code
                                           _servos_interrupt:
                                           ;	.line	543; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (PIR1bits.TMR1IF)
00354a   a09e     btfss   0x9e, 0x0, 0x0   	BTFSS	_PIR1bits, 0
00354c   d01f     bra     0x00358c         	BRA	_00658_DS_
00354e   0104     movlb   0x4              	BANKSEL	_phase
                                           ;	.line	549; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (phase)
003550   51f0     movf    0xf0, 0x0, 0x1   	MOVF	_phase, W, B
003552   e00b     bz      0x00356a         	BZ	_00654_DS_
                                           ;	.line	551; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	ServosPulseUp();
003554   ec23     call    0x003646, 0x0call    0x003646, 0x0 	CALL	_ServosPulseUp
003556   f01b
                                           ;	.line	553; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1H= 0xe9;//0xe9;
003558   0ee9     movlw   0xe9             	MOVLW	0xe9
00355a   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	554; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1L= 0x59;
00355c   0e59     movlw   0x59             	MOVLW	0x59
00355e   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ;	.line	556; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	T1CON=1;
003560   0e01     movlw   0x01             	MOVLW	0x01
003562   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
003564   0104     movlb   0x4              	BANKSEL	_phase
                                           ;	.line	557; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	phase = 0;
003566   6bf0     clrf    0xf0, 0x1        	CLRF	_phase, B
003568   d010     bra     0x00358a         	BRA	_00655_DS_
                                           _00654_DS_:
                                           ;	.line	565; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	ServosPulseDown();
00356a   eced     call    0x0027da, 0x0call    0x0027da, 0x0 	CALL	_ServosPulseDown
00356c   f013
                                           ;	.line	569; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1H= 0x32;
00356e   0e32     movlw   0x32             	MOVLW	0x32
003570   6ecf     movwf   0xcf, 0x0        	MOVWF	_TMR1H
                                           ;	.line	570; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1L= 0xeb;
003572   0eeb     movlw   0xeb             	MOVLW	0xeb
003574   6ece     movwf   0xce, 0x0        	MOVWF	_TMR1L
                                           ; #	MOVF	_needreordering, W, B
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00652_DS_
                                           ; #	CALL	_SortServoTimings
                                           ; #	MOVLW	0x21
003576   0104     movlb   0x4              	BANKSEL	_needreordering
                                           ;	.line	572; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (needreordering)
003578   51f1     movf    0xf1, 0x0, 0x1   	MOVF	_needreordering, W, B
                                           ;	.line	573; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	SortServoTimings(); // This takes more than 1 ms, but it's call only if needed.
00357a   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
                                           ;	.line	574; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	T1CON= ( 1 | 2 << 4 ) ; // activate timer1 and prescaler = 1:4
00357c   ec0e     call    0x000c1c, 0x0call    0x000c1c, 0x0 	CALL	_SortServoTimings
00357e   f006
003580   0e21     movlw   0x21             	MOVLW	0x21
003582   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
                                           ;	.line	575; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	phase = 1;  			//This indicates that after next interrupt it will start the servos cycle.
003584   0e01     movlw   0x01             	MOVLW	0x01
003586   0104     movlb   0x4              	BANKSEL	_phase
003588   6ff0     movwf   0xf0, 0x1        	MOVWF	_phase, B
                                           _00655_DS_:
                                           ;	.line	579; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PIR1bits.TMR1IF=0;
00358a   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           _00658_DS_:
                                           ;	.line	581; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return;
00358c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoMaximumPulse	code
                                           _ServoMaximumPulse:
                                           ;	.line	526; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void ServoMaximumPulse(unsigned char servo,int max_microseconds)
00301e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003020   ffe5
003022   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003024   ffd9
003026   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003028   ffe5
00302a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00302c   ffe5
00302e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003030   ffe5
003032   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003034   ffe5
003036   0e02     movlw   0x02             	MOVLW	0x02
003038   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00303a   f000
00303c   0e03     movlw   0x03             	MOVLW	0x03
00303e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
003040   f001
003042   0e04     movlw   0x04             	MOVLW	0x04
003044   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
003046   f002
                                           ;	.line	529; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(servo>=TotalPICpins)
003048   0e1e     movlw   0x1e             	MOVLW	0x1e
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00628_DS_
                                           ; #	GOTO	_00633_DS_
                                           ; #	MOVF	r0x02, W
                                           ;	.line	530; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return;
00304a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	533; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (max_microseconds < MIDUS) max_microseconds = MIDUS;
00304c   e22e     bc      0x0030aa         	BC	_00633_DS_
00304e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003050   0f80     addlw   0x80             	ADDLW	0x80
003052   0f7b     addlw   0x7b             	ADDLW	0x7b
003054   e102     bnz     0x00305a         	BNZ	_00645_DS_
003056   0edc     movlw   0xdc             	MOVLW	0xdc
003058   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _00645_DS_:
00305a   e204     bc      0x003064         	BC	_00630_DS_
00305c   0edc     movlw   0xdc             	MOVLW	0xdc
00305e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003060   0e05     movlw   0x05             	MOVLW	0x05
003062   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00630_DS_:
                                           ;	.line	534; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (max_microseconds > MAXUS) max_microseconds = MAXUS;
003064   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003066   0f80     addlw   0x80             	ADDLW	0x80
003068   0f77     addlw   0x77             	ADDLW	0x77
00306a   e102     bnz     0x003070         	BNZ	_00646_DS_
00306c   0ec5     movlw   0xc5             	MOVLW	0xc5
00306e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _00646_DS_:
003070   e304     bnc     0x00307a         	BNC	_00632_DS_
003072   0ec4     movlw   0xc4             	MOVLW	0xc4
003074   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003076   0e09     movlw   0x09             	MOVLW	0x09
003078   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00632_DS_:
                                           ;	.line	537; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	maxminpos[1][servo]=(max_microseconds - MINUS)>>3;   // 125 < final_max < 250
00307a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00307c   0eb4     movlw   0xb4             	MOVLW	LOW(_maxminpos + 30)
00307e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003080   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos + 30)
003082   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003084   0e0c     movlw   0x0c             	MOVLW	0x0c
003086   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003088   0efe     movlw   0xfe             	MOVLW	0xfe
00308a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00308c   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
00308e   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003090   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
003092   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
003094   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003096   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
003098   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
00309a   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
00309c   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
00309e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0030a0   ffe9
0030a2   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0030a4   ffea
0030a6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0030a8   ffef
                                           _00633_DS_:
0030aa   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0030ac   f003
0030ae   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0030b0   f002
0030b2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0030b4   f001
0030b6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0030b8   f000
0030ba   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0030bc   ffd9
0030be   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoMinimumPulse	code
                                           _ServoMinimumPulse:
                                           ;	.line	512; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void ServoMinimumPulse(unsigned char servo,int min_microseconds)
0030c0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0030c2   ffe5
0030c4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0030c6   ffd9
0030c8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0030ca   ffe5
0030cc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0030ce   ffe5
0030d0   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0030d2   ffe5
0030d4   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0030d6   ffe5
0030d8   0e02     movlw   0x02             	MOVLW	0x02
0030da   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0030dc   f000
0030de   0e03     movlw   0x03             	MOVLW	0x03
0030e0   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0030e2   f001
0030e4   0e04     movlw   0x04             	MOVLW	0x04
0030e6   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
0030e8   f002
                                           ;	.line	515; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(servo>=TotalPICpins)
0030ea   0e1e     movlw   0x1e             	MOVLW	0x1e
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00604_DS_
                                           ; #	GOTO	_00609_DS_
                                           ; #	MOVF	r0x02, W
                                           ;	.line	516; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return;
0030ec   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	519; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (min_microseconds < MINUS) min_microseconds = MINUS;
0030ee   e22e     bc      0x00314c         	BC	_00609_DS_
0030f0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0030f2   0f80     addlw   0x80             	ADDLW	0x80
0030f4   0f7f     addlw   0x7f             	ADDLW	0x7f
0030f6   e102     bnz     0x0030fc         	BNZ	_00621_DS_
0030f8   0ef4     movlw   0xf4             	MOVLW	0xf4
0030fa   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _00621_DS_:
0030fc   e204     bc      0x003106         	BC	_00606_DS_
0030fe   0ef4     movlw   0xf4             	MOVLW	0xf4
003100   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003102   0e01     movlw   0x01             	MOVLW	0x01
003104   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00606_DS_:
                                           ;	.line	520; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (min_microseconds > MIDUS) min_microseconds = MIDUS;
003106   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003108   0f80     addlw   0x80             	ADDLW	0x80
00310a   0f7b     addlw   0x7b             	ADDLW	0x7b
00310c   e102     bnz     0x003112         	BNZ	_00622_DS_
00310e   0edd     movlw   0xdd             	MOVLW	0xdd
003110   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _00622_DS_:
003112   e304     bnc     0x00311c         	BNC	_00608_DS_
003114   0edc     movlw   0xdc             	MOVLW	0xdc
003116   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003118   0e05     movlw   0x05             	MOVLW	0x05
00311a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
                                           _00608_DS_:
                                           ;	.line	523; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	maxminpos[0][servo]=(min_microseconds - MINUS)>>3;   // 0 < final_min < 125
00311c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00311e   0e96     movlw   0x96             	MOVLW	LOW(_maxminpos)
003120   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
003122   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos)
003124   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
003126   0e0c     movlw   0x0c             	MOVLW	0x0c
003128   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00312a   0efe     movlw   0xfe             	MOVLW	0xfe
00312c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00312e   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
003130   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003132   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
003134   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
003136   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
003138   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
00313a   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
00313c   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
00313e   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
003140   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
003142   ffe9
003144   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
003146   ffea
003148   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00314a   ffef
                                           _00609_DS_:
00314c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00314e   f003
003150   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003152   f002
003154   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003156   f001
003158   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00315a   f000
00315c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00315e   ffd9
003160   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoRead	code
                                           _ServoRead:
                                           ;	.line	504; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	unsigned char ServoRead(unsigned char servo)
0034c0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0034c2   ffe5
0034c4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0034c6   ffd9
0034c8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0034ca   ffe5
0034cc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0034ce   ffe5
0034d0   0e02     movlw   0x02             	MOVLW	0x02
0034d2   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0034d4   f000
                                           ;	.line	506; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(servo>=TotalPICpins)        // test if numservo is valid
0034d6   0e1e     movlw   0x1e             	MOVLW	0x1e
0034d8   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0034da   e302     bnc     0x0034e0         	BNC	_00592_DS_
                                           ;	.line	507; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return 0;
0034dc   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
0034de   d00c     bra     0x0034f8         	BRA	_00593_DS_
                                           _00592_DS_:
                                           ;	.line	509; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return servovalues[servo];
0034e0   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0034e2   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
0034e4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0034e6   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
0034e8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0034ea   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0034ec   ffe9
0034ee   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0034f0   ffea
0034f2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0034f4   f000
0034f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           _00593_DS_:
0034f8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0034fa   f001
0034fc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0034fe   f000
003500   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003502   ffd9
003504   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoWrite	code
                                           _ServoWrite:
                                           ;	.line	480; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void ServoWrite(unsigned char servo,unsigned char degrees)
002b2a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002b2c   ffe5
002b2e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002b30   ffd9
002b32   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002b34   ffe5
002b36   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002b38   ffe5
002b3a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002b3c   ffe5
002b3e   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002b40   ffe5
002b42   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002b44   ffe5
002b46   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002b48   ffe5
002b4a   0e02     movlw   0x02             	MOVLW	0x02
002b4c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002b4e   f000
002b50   0e03     movlw   0x03             	MOVLW	0x03
002b52   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002b54   f001
                                           ;	.line	487; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(servo>=TotalPICpins)
002b56   0e1e     movlw   0x1e             	MOVLW	0x1e
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00574_DS_
                                           ; #	GOTO	_00577_DS_
                                           ; #	MOVLW	0xb5
                                           ;	.line	488; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	return;
002b58   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
                                           ;	.line	491; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(degrees>180) degrees=180;
002b5a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002b5c   d041     bra     0x002be0         	BRA	_00577_DS_
002b5e   0eb5     movlw   0xb5             	MOVLW	0xb5
002b60   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002b62   e302     bnc     0x002b68         	BNC	_00576_DS_
002b64   0eb4     movlw   0xb4             	MOVLW	0xb4
002b66   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           _00576_DS_:
                                           ;	.line	494; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	range = (maxminpos[1][servo]  - maxminpos[0][servo]);
002b68   0eb4     movlw   0xb4             	MOVLW	LOW(_maxminpos + 30)
002b6a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002b6c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002b6e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002b70   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos + 30)
002b72   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002b74   0e96     movlw   0x96             	MOVLW	LOW(_maxminpos)
002b76   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002b78   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002b7a   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002b7c   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos)
002b7e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
002b80   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
002b82   ffe9
002b84   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
002b86   ffea
002b88   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
002b8a   f004
002b8c   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
002b8e   ffe9
002b90   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
002b92   ffea
002b94   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
002b96   f002
002b98   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002b9a   5e02     subwf   0x02, 0x1, 0x0   	SUBWF	r0x02, F
                                           ; ;multiply variable :r0x02 by variable r0x01 and store in r0x01
                                           ;	.line	495; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	value = (degrees*range) / 180 + maxminpos[0][servo];
002b9c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b9e   0202     mulwf   0x02, 0x0        	MULWF	r0x02
002ba0   cff4     movff   0xff4, 0x003     	MOVFF	PRODH, r0x03
002ba2   f003
002ba4   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002ba6   f001
002ba8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002baa   0eb4     movlw   0xb4             	MOVLW	0xb4
002bac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bae   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002bb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bb2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bb6   ec1e     call    0x002a3c, 0x0call    0x002a3c, 0x0 	CALL	__divsint
002bb8   f015
002bba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002bbc   0e04     movlw   0x04             	MOVLW	0x04
002bbe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002bc0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002bc2   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
                                           ;	.line	499; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	servovalues[servo]= value;
002bc4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002bc6   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
002bc8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002bca   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
002bcc   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002bce   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002bd0   ffe9
002bd2   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
002bd4   ffea
002bd6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
002bd8   ffef
                                           ;	.line	501; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	needreordering=1;  // This indicates servo timings must be reordered.
002bda   0e01     movlw   0x01             	MOVLW	0x01
002bdc   0104     movlb   0x4              	BANKSEL	_needreordering
002bde   6ff1     movwf   0xf1, 0x1        	MOVWF	_needreordering, B
                                           _00577_DS_:
002be0   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002be2   f005
002be4   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002be6   f004
002be8   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002bea   f003
002bec   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002bee   f002
002bf0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002bf2   f001
002bf4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002bf6   f000
002bf8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002bfa   ffd9
002bfc   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoDetach	code
                                           _ServoDetach:
                                           ;	.line	455; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void ServoDetach(unsigned char pin)
002654   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002656   ffe5
002658   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00265a   ffd9
00265c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00265e   ffe5
002660   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002662   ffe5
002664   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002666   ffe5
002668   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00266a   ffe5
00266c   0e02     movlw   0x02             	MOVLW	0x02
00266e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002670   f000
                                           ;	.line	457; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(pin>=TotalPICpins) return;
002672   0e1e     movlw   0x1e             	MOVLW	0x1e
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00551_DS_
                                           ; #	GOTO	_00558_DS_
                                           ; #	MOVLW	LOW(_port)
                                           ;	.line	459; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	switch (port[pin])
002674   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002676   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002678   d0a5     bra     0x0027c4         	BRA	_00558_DS_
00267a   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
00267c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00267e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002680   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002682   0e31     movlw   0x31             	MOVLW	HIGH(_port)
002684   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002686   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002688   0e00     movlw   0x00             	MOVLW	UPPER(_port)
00268a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00268c   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00268e   fff6
002690   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002692   fff7
002694   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002696   fff8
002698   0009     tblrd*+                  	TBLRD*+	
00269a   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00269c   f001
00269e   0e05     movlw   0x05             	MOVLW	0x05
0026a0   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0026a2   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0026a4   d08f     bra     0x0027c4         	BRA	_00558_DS_
0026a6   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
0026a8   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
0026aa   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
0026ac   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0026ae   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
0026b0   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
0026b2   0bfc     andlw   0xfc             	ANDLW	0xfc
0026b4   0fc4     addlw   0xc4             	ADDLW	LOW(_00568_DS_)
0026b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026b8   0e26     movlw   0x26             	MOVLW	HIGH(_00568_DS_)
0026ba   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
0026bc   0e00     movlw   0x00             	MOVLW	UPPER(_00568_DS_)
0026be   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
0026c0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0026c2   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00568_DS_:
0026c4   ef6c     goto    0x0026d8         	GOTO	_00552_DS_
0026c6   f013
0026c8   ef84     goto    0x002708         	GOTO	_00553_DS_
0026ca   f013
0026cc   ef9c     goto    0x002738         	GOTO	_00554_DS_
0026ce   f013
0026d0   efb4     goto    0x002768         	GOTO	_00555_DS_
0026d2   f013
0026d4   efcc     goto    0x002798         	GOTO	_00556_DS_
0026d6   f013
                                           _00552_DS_:
                                           ;	.line	461; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	case pA: activatedservos[pA] = activatedservos[pA] ^ mask[pin];
0026d8   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0026da   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0026dc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0026de   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0026e0   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0026e2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0026e4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0026e6   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0026e8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0026ea   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
0026ec   fff6
0026ee   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
0026f0   fff7
0026f2   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
0026f4   fff8
0026f6   0009     tblrd*+                  	TBLRD*+	
0026f8   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
0026fa   f001
0026fc   0104     movlb   0x4              	BANKSEL	_activatedservos
0026fe   51f6     movf    0xf6, 0x0, 0x1   	MOVF	_activatedservos, W, B
002700   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
002702   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
002704   6ff6     movwf   0xf6, 0x1        	MOVWF	_activatedservos, B
                                           ;	.line	462; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
002706   d05e     bra     0x0027c4         	BRA	_00558_DS_
                                           _00553_DS_:
                                           ;	.line	463; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	case pB: activatedservos[pB] = activatedservos[pB] ^ mask[pin];
002708   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00270a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00270c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00270e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002710   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002712   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002714   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002716   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002718   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00271a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00271c   fff6
00271e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002720   fff7
002722   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002724   fff8
002726   0009     tblrd*+                  	TBLRD*+	
002728   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00272a   f001
00272c   0104     movlb   0x4              	BANKSEL	(_activatedservos + 1)
00272e   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
002730   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
002732   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
002734   6ff7     movwf   0xf7, 0x1        	MOVWF	(_activatedservos + 1), B
                                           ;	.line	464; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
002736   d046     bra     0x0027c4         	BRA	_00558_DS_
                                           _00554_DS_:
                                           ;	.line	466; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	case pC: activatedservos[pC] = activatedservos[pC] ^ mask[pin];
002738   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00273a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00273c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00273e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002740   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002742   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002744   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002746   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002748   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00274a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00274c   fff6
00274e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002750   fff7
002752   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002754   fff8
002756   0009     tblrd*+                  	TBLRD*+	
002758   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00275a   f001
00275c   0104     movlb   0x4              	BANKSEL	(_activatedservos + 2)
00275e   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
002760   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
002762   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
002764   6ff8     movwf   0xf8, 0x1        	MOVWF	(_activatedservos + 2), B
                                           ;	.line	467; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
002766   d02e     bra     0x0027c4         	BRA	_00558_DS_
                                           _00555_DS_:
                                           ;	.line	470; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	case pD: activatedservos[pD] = activatedservos[pD] ^ mask[pin];
002768   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00276a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00276c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00276e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002770   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002772   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002774   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002776   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002778   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00277a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00277c   fff6
00277e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002780   fff7
002782   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002784   fff8
002786   0009     tblrd*+                  	TBLRD*+	
002788   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00278a   f001
00278c   0104     movlb   0x4              	BANKSEL	(_activatedservos + 3)
00278e   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_activatedservos + 3), W, B
002790   1a01     xorwf   0x01, 0x1, 0x0   	XORWF	r0x01, F
002792   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
002794   6ff9     movwf   0xf9, 0x1        	MOVWF	(_activatedservos + 3), B
                                           ;	.line	471; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
002796   d016     bra     0x0027c4         	BRA	_00558_DS_
                                           _00556_DS_:
                                           ;	.line	474; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	case pE: activatedservos[pE] = activatedservos[pE] ^ mask[pin];
002798   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00279a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00279c   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00279e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0027a0   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0027a2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0027a4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0027a6   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0027a8   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0027aa   fff6
0027ac   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0027ae   fff7
0027b0   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0027b2   fff8
0027b4   0009     tblrd*+                  	TBLRD*+	
0027b6   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0027b8   f000
0027ba   0104     movlb   0x4              	BANKSEL	(_activatedservos + 4)
0027bc   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_activatedservos + 4), W, B
0027be   1a00     xorwf   0x00, 0x1, 0x0   	XORWF	r0x00, F
0027c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0027c2   6ffa     movwf   0xfa, 0x1        	MOVWF	(_activatedservos + 4), B
                                           _00558_DS_:
                                           ;	.line	477; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	}
0027c4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0027c6   f003
0027c8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0027ca   f002
0027cc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0027ce   f001
0027d0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0027d2   f000
0027d4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0027d6   ffd9
0027d8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServoAttach	code
                                           _ServoAttach:
                                           ;	.line	420; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void ServoAttach(unsigned char pin)
001f20   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001f22   ffe5
001f24   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001f26   ffd9
001f28   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001f2a   ffe5
001f2c   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001f2e   ffe5
001f30   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001f32   ffe5
001f34   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001f36   ffe5
001f38   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001f3a   ffe5
001f3c   0e02     movlw   0x02             	MOVLW	0x02
001f3e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001f40   f000
                                           ;	.line	422; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if(pin>=TotalPICpins) return;
001f42   0e1e     movlw   0x1e             	MOVLW	0x1e
                                           ; #	SUBWF	r0x00, W
                                           ; #	BTFSS	STATUS, 0
                                           ; #	GOTO	_00528_DS_
                                           ; #	GOTO	_00535_DS_
                                           ; #	MOVLW	LOW(_port)
                                           ;	.line	424; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	switch (port[pin])
001f44   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
001f46   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001f48   d0e1     bra     0x00210c         	BRA	_00535_DS_
001f4a   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
001f4c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001f4e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001f50   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001f52   0e31     movlw   0x31             	MOVLW	HIGH(_port)
001f54   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001f56   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001f58   0e00     movlw   0x00             	MOVLW	UPPER(_port)
001f5a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001f5c   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
001f5e   fff6
001f60   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
001f62   fff7
001f64   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
001f66   fff8
001f68   0009     tblrd*+                  	TBLRD*+	
001f6a   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
001f6c   f001
001f6e   0e05     movlw   0x05             	MOVLW	0x05
001f70   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
001f72   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001f74   d0cb     bra     0x00210c         	BRA	_00535_DS_
001f76   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
001f78   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
001f7a   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
001f7c   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001f7e   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
001f80   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001f82   0bfc     andlw   0xfc             	ANDLW	0xfc
001f84   0f94     addlw   0x94             	ADDLW	LOW(_00545_DS_)
001f86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f88   0e1f     movlw   0x1f             	MOVLW	HIGH(_00545_DS_)
001f8a   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
001f8c   0e00     movlw   0x00             	MOVLW	UPPER(_00545_DS_)
001f8e   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
001f90   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001f92   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00545_DS_:
001f94   efd4     goto    0x001fa8         	GOTO	_00529_DS_
001f96   f00f
001f98   eff8     goto    0x001ff0         	GOTO	_00530_DS_
001f9a   f00f
001f9c   ef1c     goto    0x002038         	GOTO	_00531_DS_
001f9e   f010
001fa0   ef40     goto    0x002080         	GOTO	_00532_DS_
001fa2   f010
001fa4   ef64     goto    0x0020c8         	GOTO	_00533_DS_
001fa6   f010
                                           _00529_DS_:
                                           ;	.line	427; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[pA] = activatedservos[pA] | mask[pin];  // list pin as servo driver.
001fa8   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001faa   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001fac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001fae   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001fb0   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001fb2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001fb4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001fb6   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001fb8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001fba   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
001fbc   fff6
001fbe   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
001fc0   fff7
001fc2   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
001fc4   fff8
001fc6   0009     tblrd*+                  	TBLRD*+	
001fc8   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
001fca   f004
001fcc   0104     movlb   0x4              	BANKSEL	_activatedservos
001fce   51f6     movf    0xf6, 0x0, 0x1   	MOVF	_activatedservos, W, B
001fd0   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
001fd2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
001fd4   6ff6     movwf   0xf6, 0x1        	MOVWF	_activatedservos, B
                                           ;	.line	428; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TRISA = TRISA & (~mask[pin]); 					// set as output pin
001fd6   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
001fd8   fff6
001fda   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
001fdc   fff7
001fde   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
001fe0   fff8
001fe2   0009     tblrd*+                  	TBLRD*+	
001fe4   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
001fe6   f001
001fe8   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
001fea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001fec   1692     andwf   0x92, 0x1, 0x0   	ANDWF	_TRISA, F
                                           ;	.line	429; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
001fee   d08e     bra     0x00210c         	BRA	_00535_DS_
                                           _00530_DS_:
                                           ;	.line	431; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[pB] = activatedservos[pB] | mask[pin];  // list pin as servo driver.
001ff0   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001ff2   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001ff4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001ff6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001ff8   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001ffa   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001ffc   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001ffe   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002000   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002002   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002004   fff6
002006   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002008   fff7
00200a   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
00200c   fff8
00200e   0009     tblrd*+                  	TBLRD*+	
002010   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
002012   f004
002014   0104     movlb   0x4              	BANKSEL	(_activatedservos + 1)
002016   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
002018   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
00201a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
00201c   6ff7     movwf   0xf7, 0x1        	MOVWF	(_activatedservos + 1), B
                                           ;	.line	432; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TRISB = TRISB & (~mask[pin]); 					// set as output pin
00201e   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002020   fff6
002022   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002024   fff7
002026   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002028   fff8
00202a   0009     tblrd*+                  	TBLRD*+	
00202c   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00202e   f001
002030   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
002032   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002034   1693     andwf   0x93, 0x1, 0x0   	ANDWF	_TRISB, F
                                           ;	.line	433; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
002036   d06a     bra     0x00210c         	BRA	_00535_DS_
                                           _00531_DS_:
                                           ;	.line	436; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[pC] = activatedservos[pC] | mask[pin];  // list pin as servo driver.
002038   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00203a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00203c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00203e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002040   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002042   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002044   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002046   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002048   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00204a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00204c   fff6
00204e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002050   fff7
002052   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002054   fff8
002056   0009     tblrd*+                  	TBLRD*+	
002058   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00205a   f004
00205c   0104     movlb   0x4              	BANKSEL	(_activatedservos + 2)
00205e   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
002060   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
002062   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
002064   6ff8     movwf   0xf8, 0x1        	MOVWF	(_activatedservos + 2), B
                                           ;	.line	437; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TRISC = TRISC & (~mask[pin]); 					// set as output pin
002066   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002068   fff6
00206a   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
00206c   fff7
00206e   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002070   fff8
002072   0009     tblrd*+                  	TBLRD*+	
002074   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
002076   f001
002078   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
00207a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00207c   1694     andwf   0x94, 0x1, 0x0   	ANDWF	_TRISC, F
                                           ;	.line	438; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
00207e   d046     bra     0x00210c         	BRA	_00535_DS_
                                           _00532_DS_:
                                           ;	.line	442; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[pD] = activatedservos[pD] | mask[pin];  // list pin as servo driver.
002080   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
002082   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002084   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002086   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002088   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
00208a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00208c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00208e   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002090   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002092   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002094   fff6
002096   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002098   fff7
00209a   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
00209c   fff8
00209e   0009     tblrd*+                  	TBLRD*+	
0020a0   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0020a2   f004
0020a4   0104     movlb   0x4              	BANKSEL	(_activatedservos + 3)
0020a6   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_activatedservos + 3), W, B
0020a8   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
0020aa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0020ac   6ff9     movwf   0xf9, 0x1        	MOVWF	(_activatedservos + 3), B
                                           ;	.line	443; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TRISD = TRISD & (~mask[pin]); 					// set as output pin
0020ae   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
0020b0   fff6
0020b2   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
0020b4   fff7
0020b6   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
0020b8   fff8
0020ba   0009     tblrd*+                  	TBLRD*+	
0020bc   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
0020be   f001
0020c0   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
0020c2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0020c4   1695     andwf   0x95, 0x1, 0x0   	ANDWF	_TRISD, F
                                           ;	.line	444; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
0020c6   d022     bra     0x00210c         	BRA	_00535_DS_
                                           _00533_DS_:
                                           ;	.line	448; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[pE] = activatedservos[pE] | mask[pin];  // list pin as servo driver.
0020c8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0020ca   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0020cc   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0020ce   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0020d0   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0020d2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0020d4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0020d6   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0020d8   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0020da   fff6
0020dc   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0020de   fff7
0020e0   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0020e2   fff8
0020e4   0009     tblrd*+                  	TBLRD*+	
0020e6   cff5     movff   0xff5, 0x003     	MOVFF	TABLAT, r0x03
0020e8   f003
0020ea   0104     movlb   0x4              	BANKSEL	(_activatedservos + 4)
0020ec   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_activatedservos + 4), W, B
0020ee   1203     iorwf   0x03, 0x1, 0x0   	IORWF	r0x03, F
0020f0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
0020f2   6ffa     movwf   0xfa, 0x1        	MOVWF	(_activatedservos + 4), B
                                           ;	.line	449; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TRISE = TRISE & (~mask[pin]); 					// set as output pin
0020f4   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0020f6   fff6
0020f8   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0020fa   fff7
0020fc   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0020fe   fff8
002100   0009     tblrd*+                  	TBLRD*+	
002102   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002104   f000
002106   1e00     comf    0x00, 0x1, 0x0   	COMF	r0x00, F
002108   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00210a   1696     andwf   0x96, 0x1, 0x0   	ANDWF	_TRISE, F
                                           _00535_DS_:
                                           ;	.line	452; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	}
00210c   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00210e   f004
002110   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002112   f003
002114   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002116   f002
002118   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00211a   f001
00211c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00211e   f000
002120   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002122   ffd9
002124   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SortServoTimings	code
                                           _SortServoTimings:
                                           ;	.line	245; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	static void SortServoTimings()
000c1c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
000c1e   ffe5
000c20   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000c22   ffe5
000c24   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000c26   ffe5
000c28   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
000c2a   ffe5
000c2c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
000c2e   ffe5
000c30   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000c32   ffe5
000c34   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
000c36   ffe5
000c38   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	250; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(t=0;t<TotalPICpins;t++)
000c3a   6b2b     clrf    0x2b, 0x1        	CLRF	_SortServoTimings_t_1_32, B
                                           _00411_DS_:
000c3c   0e1e     movlw   0x1e             	MOVLW	0x1e
000c3e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
000c40   5d2b     subwf   0x2b, 0x0, 0x1   	SUBWF	_SortServoTimings_t_1_32, W, B
000c42   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000c44   d066     bra     0x000d12         	BRA	_00358_DS_
                                           ;	.line	252; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=255; 
000c46   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
000c48   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
000c4a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000c4c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000c4e   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
000c50   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000c52   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000c54   ffe9
000c56   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000c58   ffea
000c5a   68ef     setf    0xef, 0x0        	SETF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	253; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=0x00;
000c5c   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000c5e   0d05     mullw   0x05             	MULLW	0x05
000c60   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000c62   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000c64   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000c66   f000
000c68   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000c6a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000c6c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000c6e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000c70   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000c72   ffe9
000c74   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000c76   ffea
000c78   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	254; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=0x00;
000c7a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000c7c   0d05     mullw   0x05             	MULLW	0x05
000c7e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000c80   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000c82   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000c84   f000
000c86   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000c88   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000c8a   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000c8c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000c8e   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000c90   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000c92   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000c94   ffe9
000c96   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000c98   ffea
000c9a   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	256; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=0x00;
000c9c   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000c9e   0d05     mullw   0x05             	MULLW	0x05
000ca0   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000ca2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000ca4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ca6   f000
000ca8   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000caa   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000cac   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000cae   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000cb0   0e02     movlw   0x02             	MOVLW	0x02
000cb2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000cb4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000cb6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000cb8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000cba   ffe9
000cbc   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000cbe   ffea
000cc0   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	259; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=0x00;
000cc2   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000cc4   0d05     mullw   0x05             	MULLW	0x05
000cc6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000cc8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000cca   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ccc   f000
000cce   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000cd0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000cd2   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000cd4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000cd6   0e03     movlw   0x03             	MOVLW	0x03
000cd8   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000cda   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000cdc   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000cde   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ce0   ffe9
000ce2   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ce4   ffea
000ce6   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	262; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=0x00;
000ce8   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000cea   0d05     mullw   0x05             	MULLW	0x05
000cec   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000cee   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000cf0   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000cf2   f000
000cf4   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000cf6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000cf8   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000cfa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000cfc   0e04     movlw   0x04             	MOVLW	0x04
000cfe   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000d00   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000d02   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000d04   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000d06   ffe9
000d08   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000d0a   ffea
000d0c   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; removed redundant BANKSEL
                                           ;	.line	250; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(t=0;t<TotalPICpins;t++)
000d0e   2b2b     incf    0x2b, 0x1, 0x1   	INCF	_SortServoTimings_t_1_32, F, B
000d10   d795     bra     0x000c3c         	BRA	_00411_DS_
                                           _00358_DS_:
000d12   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	267; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(t=0;t<TotalPICports;t++)
000d14   6b2b     clrf    0x2b, 0x1        	CLRF	_SortServoTimings_t_1_32, B
                                           _00414_DS_:
000d16   0e05     movlw   0x05             	MOVLW	0x05
000d18   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
000d1a   5d2b     subwf   0x2b, 0x0, 0x1   	SUBWF	_SortServoTimings_t_1_32, W, B
000d1c   e20d     bc      0x000d38         	BC	_00359_DS_
                                           ;	.line	268; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[t]=0x00;
000d1e   0efb     movlw   0xfb             	MOVLW	LOW(_mascaratotal)
                                           ; removed redundant BANKSEL
000d20   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
000d22   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d24   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d26   0e04     movlw   0x04             	MOVLW	HIGH(_mascaratotal)
000d28   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000d2a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000d2c   ffe9
000d2e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000d30   ffea
000d32   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; removed redundant BANKSEL
                                           ;	.line	267; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(t=0;t<TotalPICports;t++)
000d34   2b2b     incf    0x2b, 0x1, 0x1   	INCF	_SortServoTimings_t_1_32, F, B
000d36   d7ef     bra     0x000d16         	BRA	_00414_DS_
                                           _00359_DS_:
000d38   0105     movlb   0x5              	BANKSEL	_SortServoTimings_totalservos_1_32
                                           ;	.line	270; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	totalservos=0; // Total servos revised. This helps to keep within "while"
000d3a   6b2c     clrf    0x2c, 0x1        	CLRF	_SortServoTimings_totalservos_1_32, B
000d3c   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	271; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	t=0;           // Index to go through timevalue and timings tables.
000d3e   6b2b     clrf    0x2b, 0x1        	CLRF	_SortServoTimings_t_1_32, B
                                           _00407_DS_:
                                           ;	.line	272; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	while(totalservos<TotalPICpins)
000d40   0e1e     movlw   0x1e             	MOVLW	0x1e
000d42   0105     movlb   0x5              	BANKSEL	_SortServoTimings_totalservos_1_32
000d44   5d2c     subwf   0x2c, 0x0, 0x1   	SUBWF	_SortServoTimings_totalservos_1_32, W, B
000d46   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000d48   ef21     goto    0x001a42         	GOTO	_00409_DS_
000d4a   f00d
                                           ;	.line	274; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
000d4c   0e01     movlw   0x01             	MOVLW	0x01
000d4e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
000d50   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
000d52   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
                                           ;	.line	276; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(s=0;s<TotalPICpins;s++)
000d54   6b2e     clrf    0x2e, 0x1        	CLRF	_SortServoTimings_s_1_32, B
                                           _00417_DS_:
000d56   0e1e     movlw   0x1e             	MOVLW	0x1e
000d58   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000d5a   5d2e     subwf   0x2e, 0x0, 0x1   	SUBWF	_SortServoTimings_s_1_32, W, B
000d5c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000d5e   ef9d     goto    0x00193a         	GOTO	_00406_DS_
000d60   f00c
                                           ;	.line	279; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	switch (port[s])
000d62   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
                                           ; removed redundant BANKSEL
000d64   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000d66   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000d68   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000d6a   0e31     movlw   0x31             	MOVLW	HIGH(_port)
000d6c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000d6e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000d70   0e00     movlw   0x00             	MOVLW	UPPER(_port)
000d72   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000d74   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000d76   fff6
000d78   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
000d7a   fff7
000d7c   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
000d7e   fff8
000d80   0009     tblrd*+                  	TBLRD*+	
000d82   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
000d84   f000
000d86   0e05     movlw   0x05             	MOVLW	0x05
000d88   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000d8a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000d8c   ef99     goto    0x001932         	GOTO	_00418_DS_
000d8e   f00c
000d90   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
000d92   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
000d94   3400     rlcf    0x00, 0x0, 0x0   	RLCF	r0x00, W
000d96   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000d98   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
000d9a   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
000d9c   0bfc     andlw   0xfc             	ANDLW	0xfc
000d9e   0fae     addlw   0xae             	ADDLW	LOW(_00498_DS_)
000da0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000da2   0e0d     movlw   0x0d             	MOVLW	HIGH(_00498_DS_)
000da4   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
000da6   0e00     movlw   0x00             	MOVLW	UPPER(_00498_DS_)
000da8   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
000daa   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
000dac   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00498_DS_:
000dae   efe1     goto    0x000dc2         	GOTO	_00360_DS_
000db0   f006
000db2   ef02     goto    0x001004         	GOTO	_00369_DS_
000db4   f008
000db6   ef27     goto    0x00124e         	GOTO	_00378_DS_
000db8   f009
000dba   ef50     goto    0x0014a0         	GOTO	_00387_DS_
000dbc   f00a
000dbe   ef76     goto    0x0016ec         	GOTO	_00396_DS_
000dc0   f00b
                                           _00360_DS_:
                                           ;	.line	282; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (mask[s] & mascaratotal[pA] & activatedservos[pA]){
000dc2   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
000dc4   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000dc6   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000dc8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000dca   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000dcc   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
000dce   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000dd0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000dd2   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
000dd4   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000dd6   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
000dd8   fff6
000dda   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
000ddc   fff7
000dde   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
000de0   fff8
000de2   0009     tblrd*+                  	TBLRD*+	
000de4   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
000de6   f000
000de8   0104     movlb   0x4              	BANKSEL	_mascaratotal
000dea   51fb     movf    0xfb, 0x0, 0x1   	MOVF	_mascaratotal, W, B
000dec   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000dee   0104     movlb   0x4              	BANKSEL	_activatedservos
000df0   51f6     movf    0xf6, 0x0, 0x1   	MOVF	_activatedservos, W, B
000df2   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
000df4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000df6   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
000df8   ef99     goto    0x001932         	GOTO	_00418_DS_
000dfa   f00c
                                           ;	.line	285; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] < timevalue[t]){
000dfc   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
000dfe   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000e00   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000e02   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000e04   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e06   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
000e08   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e0a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000e0c   ffe9
000e0e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000e10   ffea
000e12   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000e14   f000
000e16   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
000e18   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
000e1a   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
000e1c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000e1e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000e20   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
000e22   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000e24   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
000e26   ffe9
000e28   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
000e2a   ffea
000e2c   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000e2e   f001
000e30   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e32   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
000e34   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000e36   d08d     bra     0x000f52         	BRA	_00364_DS_
                                           ;	.line	286; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=servovalues[s];
000e38   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
000e3a   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
000e3c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000e3e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000e40   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
000e42   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e44   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
000e46   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000e48   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000e4a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000e4c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000e4e   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
000e50   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000e52   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000e54   ffe9
000e56   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000e58   ffea
000e5a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000e5c   f002
000e5e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000e60   ffe9
000e62   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000e64   ffea
000e66   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000e68   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
000e6a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	287; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=mask[s];
000e6c   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000e6e   0d05     mullw   0x05             	MULLW	0x05
000e70   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000e72   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000e74   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000e76   f000
000e78   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000e7a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000e7c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000e7e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000e80   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
000e82   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000e84   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000e86   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
000e88   6a03     clrf    0x03, 0x0        	CLRF	r0x03
000e8a   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
000e8c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000e8e   6a04     clrf    0x04, 0x0        	CLRF	r0x04
000e90   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
000e92   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
000e94   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
000e96   fff6
000e98   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
000e9a   fff7
000e9c   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
000e9e   fff8
000ea0   0009     tblrd*+                  	TBLRD*+	
000ea2   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
000ea4   f002
000ea6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ea8   ffe9
000eaa   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000eac   ffea
000eae   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
000eb0   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
000eb2   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	288; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=0x00;
000eb4   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000eb6   0d05     mullw   0x05             	MULLW	0x05
000eb8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000eba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000ebc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ebe   f000
000ec0   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000ec2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000ec4   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000ec6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000ec8   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
000eca   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000ecc   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ece   ffe9
000ed0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ed2   ffea
000ed4   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	290; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=0x00;
000ed6   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000ed8   0d05     mullw   0x05             	MULLW	0x05
000eda   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000edc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000ede   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000ee0   f000
000ee2   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000ee4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000ee6   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000ee8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000eea   0e02     movlw   0x02             	MOVLW	0x02
000eec   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000eee   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000ef0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000ef2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ef4   ffe9
000ef6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ef8   ffea
000efa   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	293; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=0x00;
000efc   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000efe   0d05     mullw   0x05             	MULLW	0x05
000f00   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000f02   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000f04   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000f06   f000
000f08   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000f0a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f0c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000f0e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000f10   0e03     movlw   0x03             	MOVLW	0x03
000f12   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f14   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000f16   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000f18   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f1a   ffe9
000f1c   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f1e   ffea
000f20   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	296; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=0x00;
000f22   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000f24   0d05     mullw   0x05             	MULLW	0x05
000f26   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000f28   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000f2a   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000f2c   f000
000f2e   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000f30   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f32   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000f34   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000f36   0e04     movlw   0x04             	MOVLW	0x04
000f38   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000f3a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
000f3c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
000f3e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f40   ffe9
000f42   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f44   ffea
000f46   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	298; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
000f48   0e01     movlw   0x01             	MOVLW	0x01
000f4a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
000f4c   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
000f4e   ef99     goto    0x001932         	GOTO	_00418_DS_
000f50   f00c
                                           _00364_DS_:
                                           ;	.line	300; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] == timevalue[t]){
000f52   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
000f54   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000f56   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000f58   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
000f5a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
000f5c   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
000f5e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
000f60   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000f62   ffe9
000f64   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000f66   ffea
000f68   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
000f6a   f000
000f6c   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
000f6e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
000f70   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
000f72   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000f74   6a02     clrf    0x02, 0x0        	CLRF	r0x02
000f76   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
000f78   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
000f7a   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
000f7c   ffe9
000f7e   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
000f80   ffea
000f82   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
000f84   f001
000f86   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000f88   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
000f8a   e002     bz      0x000f90         	BZ	_00502_DS_
000f8c   ef99     goto    0x001932         	GOTO	_00418_DS_
000f8e   f00c
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00502_DS_:
000f90   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	301; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA] |= mask[s];
000f92   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000f94   0d05     mullw   0x05             	MULLW	0x05
000f96   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000f98   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
000f9a   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
000f9c   f000
000f9e   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000fa0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
000fa2   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000fa4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x02
                                           ; removed redundant BANKSEL
000fa6   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
000fa8   0d05     mullw   0x05             	MULLW	0x05
000faa   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
000fac   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
000fae   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
000fb0   f002
000fb2   0e00     movlw   0x00             	MOVLW	LOW(_timings)
000fb4   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
000fb6   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
000fb8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
000fba   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
000fbc   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
000fbe   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
000fc0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000fc2   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000fc4   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
000fc6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000fc8   6a06     clrf    0x06, 0x0        	CLRF	r0x06
000fca   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
000fcc   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
000fce   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
000fd0   fff6
000fd2   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
000fd4   fff7
000fd6   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
000fd8   fff8
000fda   0009     tblrd*+                  	TBLRD*+	
000fdc   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
000fde   f004
000fe0   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
000fe2   ffe9
000fe4   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
000fe6   ffea
000fe8   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
000fea   f002
000fec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000fee   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
000ff0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
000ff2   ffe9
000ff4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
000ff6   ffea
000ff8   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
000ffa   ffef
000ffc   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	302; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos++;
000ffe   2b2d     incf    0x2d, 0x1, 0x1   	INCF	_SortServoTimings_numservos_1_32, F, B
                                           ;	.line	304; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;      		
001000   ef99     goto    0x001932         	GOTO	_00418_DS_
001002   f00c
                                           _00369_DS_:
                                           ;	.line	307; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (mask[s] & mascaratotal[pB] & activatedservos[pB]){
001004   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001006   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001008   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00100a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00100c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00100e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001010   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001012   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001014   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001016   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001018   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
00101a   fff6
00101c   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00101e   fff7
001020   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
001022   fff8
001024   0009     tblrd*+                  	TBLRD*+	
001026   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001028   f000
00102a   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 1)
00102c   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_mascaratotal + 1), W, B
00102e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001030   0104     movlb   0x4              	BANKSEL	(_activatedservos + 1)
001032   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
001034   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001036   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001038   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00103a   ef99     goto    0x001932         	GOTO	_00418_DS_
00103c   f00c
                                           ;	.line	310; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] < timevalue[t]){
00103e   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001040   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001042   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001044   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001046   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001048   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
00104a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00104c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00104e   ffe9
001050   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001052   ffea
001054   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001056   f000
001058   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
00105a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
00105c   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
00105e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001060   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001062   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001064   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001066   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001068   ffe9
00106a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00106c   ffea
00106e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001070   f001
001072   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001074   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
001076   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001078   d08d     bra     0x001194         	BRA	_00373_DS_
                                           ;	.line	311; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=servovalues[s];
00107a   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
00107c   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
00107e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001080   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001082   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001084   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001086   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001088   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
00108a   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00108c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00108e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001090   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
001092   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001094   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
001096   ffe9
001098   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
00109a   ffea
00109c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00109e   f002
0010a0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0010a2   ffe9
0010a4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0010a6   ffea
0010a8   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0010aa   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
0010ac   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	312; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=0x00;
0010ae   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0010b0   0d05     mullw   0x05             	MULLW	0x05
0010b2   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0010b4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0010b6   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0010b8   f000
0010ba   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0010bc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0010be   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0010c0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0010c2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0010c4   ffe9
0010c6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0010c8   ffea
0010ca   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	313; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=mask[s];
0010cc   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0010ce   0d05     mullw   0x05             	MULLW	0x05
0010d0   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0010d2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0010d4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0010d6   f000
0010d8   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0010da   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0010dc   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0010de   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0010e0   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0010e2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0010e4   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0010e6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0010e8   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0010ea   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0010ec   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0010ee   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0010f0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0010f2   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0010f4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0010f6   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
0010f8   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
0010fa   fff6
0010fc   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
0010fe   fff7
001100   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001102   fff8
001104   0009     tblrd*+                  	TBLRD*+	
001106   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001108   f002
00110a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00110c   ffe9
00110e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001110   ffea
001112   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001114   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001116   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	315; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=0x00;
001118   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00111a   0d05     mullw   0x05             	MULLW	0x05
00111c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00111e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001120   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001122   f000
001124   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001126   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001128   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00112a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00112c   0e02     movlw   0x02             	MOVLW	0x02
00112e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001130   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001132   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001134   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001136   ffe9
001138   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00113a   ffea
00113c   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	318; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=0x00;
00113e   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001140   0d05     mullw   0x05             	MULLW	0x05
001142   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001144   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001146   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001148   f000
00114a   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00114c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00114e   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001150   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001152   0e03     movlw   0x03             	MOVLW	0x03
001154   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001156   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001158   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00115a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00115c   ffe9
00115e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001160   ffea
001162   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	321; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=0x00;
001164   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001166   0d05     mullw   0x05             	MULLW	0x05
001168   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00116a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00116c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00116e   f000
001170   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001172   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001174   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001176   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001178   0e04     movlw   0x04             	MOVLW	0x04
00117a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00117c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00117e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001180   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001182   ffe9
001184   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001186   ffea
001188   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	323; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
00118a   0e01     movlw   0x01             	MOVLW	0x01
00118c   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
00118e   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
001190   ef99     goto    0x001932         	GOTO	_00418_DS_
001192   f00c
                                           _00373_DS_:
                                           ;	.line	325; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] == timevalue[t]){
001194   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001196   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001198   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00119a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00119c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00119e   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
0011a0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0011a2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0011a4   ffe9
0011a6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0011a8   ffea
0011aa   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0011ac   f000
0011ae   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
0011b0   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
0011b2   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
0011b4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0011b6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0011b8   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
0011ba   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0011bc   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0011be   ffe9
0011c0   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0011c2   ffea
0011c4   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0011c6   f001
0011c8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011ca   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
0011cc   e002     bz      0x0011d2         	BZ	_00507_DS_
0011ce   ef99     goto    0x001932         	GOTO	_00418_DS_
0011d0   f00c
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00507_DS_:
0011d2   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	326; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB] |= mask[s];
0011d4   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0011d6   0d05     mullw   0x05             	MULLW	0x05
0011d8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0011da   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0011dc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0011de   f000
0011e0   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0011e2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0011e4   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0011e6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0011e8   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0011ea   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x02
                                           ; removed redundant BANKSEL
0011ec   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0011ee   0d05     mullw   0x05             	MULLW	0x05
0011f0   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0011f2   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0011f4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0011f6   f002
0011f8   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0011fa   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0011fc   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0011fe   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001200   4a02     infsnz  0x02, 0x1, 0x0   	INFSNZ	r0x02, F
001202   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
001204   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001206   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001208   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00120a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00120c   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00120e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001210   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001212   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001214   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001216   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001218   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00121a   fff6
00121c   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
00121e   fff7
001220   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
001222   fff8
001224   0009     tblrd*+                  	TBLRD*+	
001226   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
001228   f004
00122a   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00122c   ffe9
00122e   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001230   ffea
001232   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001234   f002
001236   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001238   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
00123a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00123c   ffe9
00123e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001240   ffea
001242   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
001244   ffef
001246   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	327; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos++;
001248   2b2d     incf    0x2d, 0x1, 0x1   	INCF	_SortServoTimings_numservos_1_32, F, B
                                           ;	.line	329; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
00124a   ef99     goto    0x001932         	GOTO	_00418_DS_
00124c   f00c
                                           _00378_DS_:
                                           ;	.line	333; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (mask[s] & mascaratotal[pC] & activatedservos[pC]){
00124e   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001250   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001252   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001254   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001256   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001258   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
00125a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00125c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00125e   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001260   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001262   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
001264   fff6
001266   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
001268   fff7
00126a   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
00126c   fff8
00126e   0009     tblrd*+                  	TBLRD*+	
001270   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001272   f000
001274   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 2)
001276   51fd     movf    0xfd, 0x0, 0x1   	MOVF	(_mascaratotal + 2), W, B
001278   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00127a   0104     movlb   0x4              	BANKSEL	(_activatedservos + 2)
00127c   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
00127e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001280   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001282   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
001284   ef99     goto    0x001932         	GOTO	_00418_DS_
001286   f00c
                                           ;	.line	336; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] < timevalue[t]){
001288   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
00128a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
00128c   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00128e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001290   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001292   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
001294   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001296   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001298   ffe9
00129a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00129c   ffea
00129e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0012a0   f000
0012a2   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
0012a4   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
0012a6   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
0012a8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0012aa   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0012ac   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
0012ae   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0012b0   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0012b2   ffe9
0012b4   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0012b6   ffea
0012b8   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0012ba   f001
0012bc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012be   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
0012c0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0012c2   d08d     bra     0x0013de         	BRA	_00382_DS_
                                           ;	.line	337; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=servovalues[s];
0012c4   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
0012c6   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
0012c8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0012ca   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0012cc   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
0012ce   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0012d0   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
0012d2   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0012d4   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0012d6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0012d8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0012da   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
0012dc   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0012de   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0012e0   ffe9
0012e2   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0012e4   ffea
0012e6   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0012e8   f002
0012ea   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0012ec   ffe9
0012ee   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0012f0   ffea
0012f2   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0012f4   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
0012f6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	338; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=0x00;
0012f8   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0012fa   0d05     mullw   0x05             	MULLW	0x05
0012fc   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0012fe   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001300   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001302   f000
001304   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001306   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001308   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00130a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00130c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00130e   ffe9
001310   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001312   ffea
001314   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	339; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=0x00;
001316   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001318   0d05     mullw   0x05             	MULLW	0x05
00131a   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00131c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00131e   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001320   f000
001322   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001324   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001326   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001328   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00132a   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
00132c   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00132e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001330   ffe9
001332   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001334   ffea
001336   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	340; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=mask[s];
001338   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00133a   0d05     mullw   0x05             	MULLW	0x05
00133c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00133e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001340   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001342   f000
001344   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001346   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001348   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00134a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00134c   0e02     movlw   0x02             	MOVLW	0x02
00134e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001350   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001352   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001354   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001356   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001358   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00135a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00135c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00135e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001360   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001362   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001364   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001366   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001368   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
00136a   fff6
00136c   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
00136e   fff7
001370   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001372   fff8
001374   0009     tblrd*+                  	TBLRD*+	
001376   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001378   f002
00137a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00137c   ffe9
00137e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001380   ffea
001382   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001384   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001386   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	342; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=0x00;
001388   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00138a   0d05     mullw   0x05             	MULLW	0x05
00138c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00138e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001390   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001392   f000
001394   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001396   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001398   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00139a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00139c   0e03     movlw   0x03             	MOVLW	0x03
00139e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0013a0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0013a2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0013a4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0013a6   ffe9
0013a8   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0013aa   ffea
0013ac   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	345; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=0x00;
0013ae   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0013b0   0d05     mullw   0x05             	MULLW	0x05
0013b2   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0013b4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0013b6   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0013b8   f000
0013ba   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0013bc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0013be   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0013c0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0013c2   0e04     movlw   0x04             	MOVLW	0x04
0013c4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0013c6   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0013c8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0013ca   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0013cc   ffe9
0013ce   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0013d0   ffea
0013d2   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	347; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
0013d4   0e01     movlw   0x01             	MOVLW	0x01
0013d6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
0013d8   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
0013da   ef99     goto    0x001932         	GOTO	_00418_DS_
0013dc   f00c
                                           _00382_DS_:
                                           ;	.line	349; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] == timevalue[t]){
0013de   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
0013e0   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0013e2   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0013e4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0013e6   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0013e8   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
0013ea   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0013ec   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0013ee   ffe9
0013f0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0013f2   ffea
0013f4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0013f6   f000
0013f8   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
0013fa   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
0013fc   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
0013fe   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001400   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001402   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001404   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001406   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001408   ffe9
00140a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00140c   ffea
00140e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001410   f001
001412   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001414   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001416   e002     bz      0x00141c         	BZ	_00512_DS_
001418   ef99     goto    0x001932         	GOTO	_00418_DS_
00141a   f00c
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00512_DS_:
00141c   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	350; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC] |= mask[s];
00141e   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001420   0d05     mullw   0x05             	MULLW	0x05
001422   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001424   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001426   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001428   f000
00142a   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00142c   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00142e   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001430   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001432   0e02     movlw   0x02             	MOVLW	0x02
001434   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001436   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001438   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x02
                                           ; removed redundant BANKSEL
00143a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00143c   0d05     mullw   0x05             	MULLW	0x05
00143e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001440   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001442   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
001444   f002
001446   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001448   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
00144a   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00144c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00144e   0e02     movlw   0x02             	MOVLW	0x02
001450   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
001452   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001454   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
001456   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001458   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
00145a   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00145c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00145e   6a05     clrf    0x05, 0x0        	CLRF	r0x05
001460   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001462   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001464   6a06     clrf    0x06, 0x0        	CLRF	r0x06
001466   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001468   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
00146a   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
00146c   fff6
00146e   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
001470   fff7
001472   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
001474   fff8
001476   0009     tblrd*+                  	TBLRD*+	
001478   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
00147a   f004
00147c   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00147e   ffe9
001480   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001482   ffea
001484   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001486   f002
001488   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00148a   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
00148c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00148e   ffe9
001490   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001492   ffea
001494   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
001496   ffef
001498   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	351; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos++;
00149a   2b2d     incf    0x2d, 0x1, 0x1   	INCF	_SortServoTimings_numservos_1_32, F, B
                                           ;	.line	353; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
00149c   ef99     goto    0x001932         	GOTO	_00418_DS_
00149e   f00c
                                           _00387_DS_:
                                           ;	.line	358; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (mask[s] & mascaratotal[pD] & activatedservos[pD]){
0014a0   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0014a2   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0014a4   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0014a6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0014a8   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0014aa   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0014ac   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0014ae   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0014b0   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0014b2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0014b4   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0014b6   fff6
0014b8   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0014ba   fff7
0014bc   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0014be   fff8
0014c0   0009     tblrd*+                  	TBLRD*+	
0014c2   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0014c4   f000
0014c6   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 3)
0014c8   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_mascaratotal + 3), W, B
0014ca   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0014cc   0104     movlb   0x4              	BANKSEL	(_activatedservos + 3)
0014ce   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_activatedservos + 3), W, B
0014d0   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0014d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0014d4   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
0014d6   ef99     goto    0x001932         	GOTO	_00418_DS_
0014d8   f00c
                                           ;	.line	361; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] < timevalue[t]){
0014da   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
0014dc   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0014de   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0014e0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0014e2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0014e4   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
0014e6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0014e8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0014ea   ffe9
0014ec   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0014ee   ffea
0014f0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0014f2   f000
0014f4   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
0014f6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
0014f8   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
0014fa   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0014fc   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0014fe   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001500   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001502   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001504   ffe9
001506   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001508   ffea
00150a   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00150c   f001
00150e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001510   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
001512   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001514   d08c     bra     0x00162e         	BRA	_00391_DS_
                                           ;	.line	362; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=servovalues[s];
001516   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
001518   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
00151a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00151c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00151e   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001520   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001522   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001524   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001526   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001528   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00152a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00152c   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
00152e   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001530   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
001532   ffe9
001534   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001536   ffea
001538   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00153a   f002
00153c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00153e   ffe9
001540   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001542   ffea
001544   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001546   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001548   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	363; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=0x00;
00154a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00154c   0d05     mullw   0x05             	MULLW	0x05
00154e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001550   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001552   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001554   f000
001556   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001558   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00155a   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00155c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00155e   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001560   ffe9
001562   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001564   ffea
001566   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	364; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=0x00;
001568   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00156a   0d05     mullw   0x05             	MULLW	0x05
00156c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00156e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001570   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001572   f000
001574   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001576   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001578   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00157a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00157c   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
00157e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001580   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001582   ffe9
001584   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001586   ffea
001588   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	365; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=0x00;
00158a   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00158c   0d05     mullw   0x05             	MULLW	0x05
00158e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001590   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001592   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001594   f000
001596   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001598   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00159a   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00159c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00159e   0e02     movlw   0x02             	MOVLW	0x02
0015a0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0015a2   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0015a4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0015a6   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0015a8   ffe9
0015aa   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0015ac   ffea
0015ae   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	366; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=mask[s];
0015b0   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0015b2   0d05     mullw   0x05             	MULLW	0x05
0015b4   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0015b6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0015b8   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0015ba   f000
0015bc   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0015be   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0015c0   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0015c2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0015c4   0e03     movlw   0x03             	MOVLW	0x03
0015c6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0015c8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0015ca   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0015cc   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0015ce   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0015d0   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0015d2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0015d4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0015d6   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0015d8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0015da   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0015dc   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0015de   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
0015e0   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
0015e2   fff6
0015e4   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
0015e6   fff7
0015e8   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
0015ea   fff8
0015ec   0009     tblrd*+                  	TBLRD*+	
0015ee   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
0015f0   f002
0015f2   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0015f4   ffe9
0015f6   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0015f8   ffea
0015fa   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0015fc   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
0015fe   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	368; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=0x00;
001600   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001602   0d05     mullw   0x05             	MULLW	0x05
001604   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001606   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001608   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00160a   f000
00160c   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00160e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001610   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001612   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001614   0e04     movlw   0x04             	MOVLW	0x04
001616   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001618   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00161a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00161c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00161e   ffe9
001620   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001622   ffea
001624   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	370; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
001626   0e01     movlw   0x01             	MOVLW	0x01
001628   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
00162a   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
00162c   d182     bra     0x001932         	BRA	_00418_DS_
                                           _00391_DS_:
                                           ;	.line	372; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] == timevalue[t]){
00162e   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001630   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001632   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001634   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001636   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001638   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
00163a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00163c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00163e   ffe9
001640   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001642   ffea
001644   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001646   f000
001648   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
00164a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
00164c   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
00164e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001650   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001652   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
001654   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001656   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
001658   ffe9
00165a   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00165c   ffea
00165e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001660   f001
001662   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001664   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
001666   e001     bz      0x00166a         	BZ	_00517_DS_
001668   d164     bra     0x001932         	BRA	_00418_DS_
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00517_DS_:
00166a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	373; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD] |= mask[s];
00166c   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00166e   0d05     mullw   0x05             	MULLW	0x05
001670   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001672   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001674   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001676   f000
001678   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00167a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00167c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00167e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001680   0e03     movlw   0x03             	MOVLW	0x03
001682   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001684   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001686   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x02
                                           ; removed redundant BANKSEL
001688   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00168a   0d05     mullw   0x05             	MULLW	0x05
00168c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00168e   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
001690   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
001692   f002
001694   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001696   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
001698   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00169a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00169c   0e03     movlw   0x03             	MOVLW	0x03
00169e   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0016a0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0016a2   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0016a4   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0016a6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0016a8   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0016aa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016ac   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0016ae   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0016b0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0016b2   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0016b4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0016b6   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
0016b8   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
0016ba   fff6
0016bc   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
0016be   fff7
0016c0   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
0016c2   fff8
0016c4   0009     tblrd*+                  	TBLRD*+	
0016c6   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
0016c8   f004
0016ca   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
0016cc   ffe9
0016ce   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
0016d0   ffea
0016d2   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0016d4   f002
0016d6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0016d8   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
0016da   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0016dc   ffe9
0016de   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0016e0   ffea
0016e2   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
0016e4   ffef
0016e6   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	374; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos++;
0016e8   2b2d     incf    0x2d, 0x1, 0x1   	INCF	_SortServoTimings_numservos_1_32, F, B
                                           ;	.line	376; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	break;
0016ea   d123     bra     0x001932         	BRA	_00418_DS_
                                           _00396_DS_:
                                           ;	.line	381; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (mask[s] & mascaratotal[pE] & activatedservos[pE]){
0016ec   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0016ee   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0016f0   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0016f2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0016f4   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0016f6   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0016f8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0016fa   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0016fc   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0016fe   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001700   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
001702   fff6
001704   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
001706   fff7
001708   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
00170a   fff8
00170c   0009     tblrd*+                  	TBLRD*+	
00170e   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001710   f000
001712   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 4)
001714   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_mascaratotal + 4), W, B
001716   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
001718   0104     movlb   0x4              	BANKSEL	(_activatedservos + 4)
00171a   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_activatedservos + 4), W, B
00171c   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00171e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001720   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
001722   d107     bra     0x001932         	BRA	_00418_DS_
                                           ;	.line	384; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] < timevalue[t]){
001724   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001726   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001728   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00172a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00172c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00172e   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
001730   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001732   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001734   ffe9
001736   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001738   ffea
00173a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00173c   f000
00173e   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
001740   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
001742   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
001744   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001746   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001748   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
00174a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00174c   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00174e   ffe9
001750   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
001752   ffea
001754   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
001756   f001
001758   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00175a   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00175c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00175e   d08b     bra     0x001876         	BRA	_00400_DS_
                                           ;	.line	385; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timevalue[t]=servovalues[s];
001760   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
                                           ; removed redundant BANKSEL
001762   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
001764   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
001766   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001768   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
00176a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00176c   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
00176e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001770   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001772   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001774   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001776   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
001778   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00177a   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
00177c   ffe9
00177e   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001780   ffea
001782   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
001784   f002
001786   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001788   ffe9
00178a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00178c   ffea
00178e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
001790   ffef
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001792   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	386; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pA]=0x00;
001794   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001796   0d05     mullw   0x05             	MULLW	0x05
001798   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00179a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00179c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00179e   f000
0017a0   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0017a2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0017a4   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0017a6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0017a8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0017aa   ffe9
0017ac   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0017ae   ffea
0017b0   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	387; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pB]=0x00;
0017b2   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0017b4   0d05     mullw   0x05             	MULLW	0x05
0017b6   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0017b8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0017ba   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0017bc   f000
0017be   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0017c0   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0017c2   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0017c4   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0017c6   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
0017c8   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0017ca   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0017cc   ffe9
0017ce   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0017d0   ffea
0017d2   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	388; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pC]=0x00;
0017d4   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0017d6   0d05     mullw   0x05             	MULLW	0x05
0017d8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0017da   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0017dc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0017de   f000
0017e0   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0017e2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0017e4   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0017e6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0017e8   0e02     movlw   0x02             	MOVLW	0x02
0017ea   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0017ec   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0017ee   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0017f0   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0017f2   ffe9
0017f4   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0017f6   ffea
0017f8   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	389; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pD]=0x00;
0017fa   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0017fc   0d05     mullw   0x05             	MULLW	0x05
0017fe   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001800   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001802   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001804   f000
001806   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001808   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00180a   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00180c   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00180e   0e03     movlw   0x03             	MOVLW	0x03
001810   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001812   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001814   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001816   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001818   ffe9
00181a   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00181c   ffea
00181e   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	390; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE]=mask[s];
001820   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001822   0d05     mullw   0x05             	MULLW	0x05
001824   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001826   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001828   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00182a   f000
00182c   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00182e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001830   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001832   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001834   0e04     movlw   0x04             	MOVLW	0x04
001836   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001838   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00183a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
00183c   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00183e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
001840   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
001842   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001844   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001846   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001848   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00184a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
00184c   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
00184e   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001850   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001852   fff6
001854   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001856   fff7
001858   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
00185a   fff8
00185c   0009     tblrd*+                  	TBLRD*+	
00185e   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001860   f002
001862   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001864   ffe9
001866   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001868   ffea
00186a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00186c   ffef
                                           ;	.line	391; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos=1;
00186e   0e01     movlw   0x01             	MOVLW	0x01
001870   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
001872   6f2d     movwf   0x2d, 0x1        	MOVWF	_SortServoTimings_numservos_1_32, B
001874   d05e     bra     0x001932         	BRA	_00418_DS_
                                           _00400_DS_:
                                           ;	.line	393; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	else if (servovalues[s] == timevalue[t]){
001876   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
001878   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
00187a   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
00187c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00187e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001880   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
001882   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001884   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001886   ffe9
001888   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00188a   ffea
00188c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00188e   f000
001890   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
001892   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
001894   252b     addwf   0x2b, 0x0, 0x1   	ADDWF	_SortServoTimings_t_1_32, W, B
001896   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001898   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00189a   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
00189c   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00189e   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
0018a0   ffe9
0018a2   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
0018a4   ffea
0018a6   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0018a8   f001
0018aa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0018ac   1801     xorwf   0x01, 0x0, 0x0   	XORWF	r0x01, W
0018ae   e001     bz      0x0018b2         	BZ	_00522_DS_
0018b0   d040     bra     0x001932         	BRA	_00418_DS_
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00522_DS_:
0018b2   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	394; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timings[t][pE] |= mask[s];
0018b4   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0018b6   0d05     mullw   0x05             	MULLW	0x05
0018b8   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0018ba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0018bc   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0018be   f000
0018c0   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0018c2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0018c4   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0018c6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0018c8   0e04     movlw   0x04             	MOVLW	0x04
0018ca   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0018cc   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0018ce   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x02
                                           ; removed redundant BANKSEL
0018d0   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0018d2   0d05     mullw   0x05             	MULLW	0x05
0018d4   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0018d6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0018d8   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0018da   f002
0018dc   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0018de   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0018e0   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0018e2   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0018e4   0e04     movlw   0x04             	MOVLW	0x04
0018e6   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0018e8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0018ea   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
0018ec   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0018ee   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
0018f0   252e     addwf   0x2e, 0x0, 0x1   	ADDWF	_SortServoTimings_s_1_32, W, B
0018f2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018f4   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0018f6   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0018f8   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0018fa   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0018fc   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0018fe   2206     addwfc  0x06, 0x1, 0x0   	ADDWFC	r0x06, F
001900   c004     movff   0x004, 0xff6     	MOVFF	r0x04, TBLPTRL
001902   fff6
001904   c005     movff   0x005, 0xff7     	MOVFF	r0x05, TBLPTRH
001906   fff7
001908   c006     movff   0x006, 0xff8     	MOVFF	r0x06, TBLPTRU
00190a   fff8
00190c   0009     tblrd*+                  	TBLRD*+	
00190e   cff5     movff   0xff5, 0x004     	MOVFF	TABLAT, r0x04
001910   f004
001912   c002     movff   0x002, 0xfe9     	MOVFF	r0x02, FSR0L
001914   ffe9
001916   c003     movff   0x003, 0xfea     	MOVFF	r0x03, FSR0H
001918   ffea
00191a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00191c   f002
00191e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001920   1204     iorwf   0x04, 0x1, 0x0   	IORWF	r0x04, F
001922   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001924   ffe9
001926   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001928   ffea
00192a   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
00192c   ffef
00192e   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	395; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	numservos++;
001930   2b2d     incf    0x2d, 0x1, 0x1   	INCF	_SortServoTimings_numservos_1_32, F, B
                                           _00418_DS_:
001932   0105     movlb   0x5              	BANKSEL	_SortServoTimings_s_1_32
                                           ;	.line	276; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(s=0;s<TotalPICpins;s++)
001934   2b2e     incf    0x2e, 0x1, 0x1   	INCF	_SortServoTimings_s_1_32, F, B
001936   efab     goto    0x000d56         	GOTO	_00417_DS_
001938   f006
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
                                           _00406_DS_:
00193a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	401; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[pA] |= timings[t][pA];
00193c   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00193e   0d05     mullw   0x05             	MULLW	0x05
001940   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001942   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001944   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001946   f000
001948   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00194a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00194c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00194e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001950   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001952   ffe9
001954   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001956   ffea
001958   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00195a   f000
00195c   0104     movlb   0x4              	BANKSEL	_mascaratotal
00195e   51fb     movf    0xfb, 0x0, 0x1   	MOVF	_mascaratotal, W, B
001960   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001962   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
001964   6ffb     movwf   0xfb, 0x1        	MOVWF	_mascaratotal, B
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001966   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	402; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[pB] |= timings[t][pB];
001968   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00196a   0d05     mullw   0x05             	MULLW	0x05
00196c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00196e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001970   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001972   f000
001974   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001976   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001978   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00197a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00197c   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
00197e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001980   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001982   ffe9
001984   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001986   ffea
001988   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00198a   f000
00198c   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 1)
00198e   51fc     movf    0xfc, 0x0, 0x1   	MOVF	(_mascaratotal + 1), W, B
001990   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001992   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
001994   6ffc     movwf   0xfc, 0x1        	MOVWF	(_mascaratotal + 1), B
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
001996   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	404; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[pC] |= timings[t][pC];
001998   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
00199a   0d05     mullw   0x05             	MULLW	0x05
00199c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00199e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0019a0   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0019a2   f000
0019a4   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0019a6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0019a8   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0019aa   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0019ac   0e02     movlw   0x02             	MOVLW	0x02
0019ae   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0019b0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0019b2   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0019b4   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0019b6   ffe9
0019b8   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0019ba   ffea
0019bc   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0019be   f000
0019c0   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 2)
0019c2   51fd     movf    0xfd, 0x0, 0x1   	MOVF	(_mascaratotal + 2), W, B
0019c4   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0019c6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0019c8   6ffd     movwf   0xfd, 0x1        	MOVWF	(_mascaratotal + 2), B
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
0019ca   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	407; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[pD] |= timings[t][pD];
0019cc   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
0019ce   0d05     mullw   0x05             	MULLW	0x05
0019d0   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0019d2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0019d4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0019d6   f000
0019d8   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0019da   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0019dc   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0019de   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0019e0   0e03     movlw   0x03             	MOVLW	0x03
0019e2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0019e4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0019e6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0019e8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0019ea   ffe9
0019ec   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0019ee   ffea
0019f0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0019f2   f000
0019f4   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 3)
0019f6   51fe     movf    0xfe, 0x0, 0x1   	MOVF	(_mascaratotal + 3), W, B
0019f8   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
0019fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0019fc   6ffe     movwf   0xfe, 0x1        	MOVWF	(_mascaratotal + 3), B
                                           ; ;multiply lit val:0x05 by variable _SortServoTimings_t_1_32 and store in r0x00
0019fe   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	410; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	mascaratotal[pE] |= timings[t][pE];
001a00   512b     movf    0x2b, 0x0, 0x1   	MOVF	_SortServoTimings_t_1_32, W, B
001a02   0d05     mullw   0x05             	MULLW	0x05
001a04   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
001a06   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001a08   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
001a0a   f000
001a0c   0e00     movlw   0x00             	MOVLW	LOW(_timings)
001a0e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001a10   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
001a12   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001a14   0e04     movlw   0x04             	MOVLW	0x04
001a16   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001a18   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001a1a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
001a1c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
001a1e   ffe9
001a20   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
001a22   ffea
001a24   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
001a26   f000
001a28   0104     movlb   0x4              	BANKSEL	(_mascaratotal + 4)
001a2a   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_mascaratotal + 4), W, B
001a2c   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
001a2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
001a30   6fff     movwf   0xff, 0x1        	MOVWF	(_mascaratotal + 4), B
001a32   0105     movlb   0x5              	BANKSEL	_SortServoTimings_numservos_1_32
                                           ;	.line	413; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	totalservos += numservos;
001a34   512d     movf    0x2d, 0x0, 0x1   	MOVF	_SortServoTimings_numservos_1_32, W, B
001a36   0105     movlb   0x5              	BANKSEL	_SortServoTimings_totalservos_1_32
001a38   272c     addwf   0x2c, 0x1, 0x1   	ADDWF	_SortServoTimings_totalservos_1_32, F, B
001a3a   0105     movlb   0x5              	BANKSEL	_SortServoTimings_t_1_32
                                           ;	.line	414; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	t++;
001a3c   2b2b     incf    0x2b, 0x1, 0x1   	INCF	_SortServoTimings_t_1_32, F, B
001a3e   efa0     goto    0x000d40         	GOTO	_00407_DS_
001a40   f006
                                           _00409_DS_:
001a42   0104     movlb   0x4              	BANKSEL	_needreordering
                                           ;	.line	417; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	needreordering=0;  // This indicates that servo timings are sorted.
001a44   6bf1     clrf    0xf1, 0x1        	CLRF	_needreordering, B
001a46   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
001a48   f006
001a4a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
001a4c   f005
001a4e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001a50   f004
001a52   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001a54   f003
001a56   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001a58   f002
001a5a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001a5c   f001
001a5e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001a60   f000
001a62   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServosPulseUp	code
                                           _ServosPulseUp:
003646   0104     movlb   0x4              	BANKSEL	_activatedservos
                                           ;	.line	228; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTA = PORTA | activatedservos[pA];
003648   51f6     movf    0xf6, 0x0, 0x1   	MOVF	_activatedservos, W, B
00364a   1280     iorwf   0x80, 0x1, 0x0   	IORWF	_PORTA, F
                                           ; removed redundant BANKSEL
                                           ;	.line	229; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTB = PORTB | activatedservos[pB];
00364c   51f7     movf    0xf7, 0x0, 0x1   	MOVF	(_activatedservos + 1), W, B
00364e   1281     iorwf   0x81, 0x1, 0x0   	IORWF	_PORTB, F
                                           ; removed redundant BANKSEL
                                           ;	.line	231; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTC = PORTC | activatedservos[pC];
003650   51f8     movf    0xf8, 0x0, 0x1   	MOVF	(_activatedservos + 2), W, B
003652   1282     iorwf   0x82, 0x1, 0x0   	IORWF	_PORTC, F
                                           ; removed redundant BANKSEL
                                           ;	.line	234; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTD = PORTD | activatedservos[pD];
003654   51f9     movf    0xf9, 0x0, 0x1   	MOVF	(_activatedservos + 3), W, B
003656   1283     iorwf   0x83, 0x1, 0x0   	IORWF	_PORTD, F
                                           ; removed redundant BANKSEL
                                           ;	.line	237; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTE = PORTE | activatedservos[pE];
003658   51fa     movf    0xfa, 0x0, 0x1   	MOVF	(_activatedservos + 4), W, B
00365a   1284     iorwf   0x84, 0x1, 0x0   	IORWF	_PORTE, F
00365c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ServosPulseDown	code
                                           _ServosPulseDown:
                                           ;	.line	185; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	static void ServosPulseDown()
0027da   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0027dc   ffe5
0027de   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0027e0   ffd9
0027e2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0027e4   ffe5
0027e6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0027e8   ffe5
0027ea   0105     movlb   0x5              	BANKSEL	_ServosPulseDown_timingindex_1_28
                                           ;	.line	187; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	volatile unsigned char timingindex = 0;
0027ec   6b2a     clrf    0x2a, 0x1        	CLRF	_ServosPulseDown_timingindex_1_28, B
0027ee   0104     movlb   0x4              	BANKSEL	_timedivision
                                           ;	.line	189; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(timedivision=0;timedivision < 251;timedivision++)
0027f0   6bf2     clrf    0xf2, 0x1        	CLRF	_timedivision, B
                                           _00331_DS_:
                                           ;	.line	191; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	if (timevalue[timingindex] == timedivision)
0027f2   0e00     movlw   0x00             	MOVLW	LOW(_timevalue)
0027f4   0105     movlb   0x5              	BANKSEL	_ServosPulseDown_timingindex_1_28
0027f6   252a     addwf   0x2a, 0x0, 0x1   	ADDWF	_ServosPulseDown_timingindex_1_28, W, B
0027f8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0027fa   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0027fc   0e05     movlw   0x05             	MOVLW	HIGH(_timevalue)
0027fe   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002800   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002802   ffe9
002804   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
002806   ffea
002808   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00280a   f000
00280c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00280e   0104     movlb   0x4              	BANKSEL	_timedivision
002810   19f2     xorwf   0xf2, 0x0, 0x1   	XORWF	_timedivision, W, B
002812   e001     bz      0x002816         	BZ	_00342_DS_
002814   d06a     bra     0x0028ea         	BRA	_00329_DS_
                                           ; ;multiply lit val:0x05 by variable _ServosPulseDown_timingindex_1_28 and store in r0x00
                                           _00342_DS_:
002816   0105     movlb   0x5              	BANKSEL	_ServosPulseDown_timingindex_1_28
                                           ;	.line	193; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTA = PORTA ^ timings[timingindex][pA];
002818   512a     movf    0x2a, 0x0, 0x1   	MOVF	_ServosPulseDown_timingindex_1_28, W, B
00281a   0d05     mullw   0x05             	MULLW	0x05
00281c   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00281e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002820   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
002822   f000
002824   0e00     movlw   0x00             	MOVLW	LOW(_timings)
002826   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002828   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00282a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00282c   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00282e   ffe9
002830   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
002832   ffea
002834   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
002836   f000
002838   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00283a   1a80     xorwf   0x80, 0x1, 0x0   	XORWF	_PORTA, F
                                           ; ;multiply lit val:0x05 by variable _ServosPulseDown_timingindex_1_28 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	194; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTB = PORTB ^ timings[timingindex][pB];
00283c   512a     movf    0x2a, 0x0, 0x1   	MOVF	_ServosPulseDown_timingindex_1_28, W, B
00283e   0d05     mullw   0x05             	MULLW	0x05
002840   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
002842   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002844   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
002846   f000
002848   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00284a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00284c   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
00284e   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002850   4a00     infsnz  0x00, 0x1, 0x0   	INFSNZ	r0x00, F
002852   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002854   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002856   ffe9
002858   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
00285a   ffea
00285c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00285e   f000
002860   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002862   1a81     xorwf   0x81, 0x1, 0x0   	XORWF	_PORTB, F
                                           ; ;multiply lit val:0x05 by variable _ServosPulseDown_timingindex_1_28 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	196; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTC = PORTC ^ timings[timingindex][pC];
002864   512a     movf    0x2a, 0x0, 0x1   	MOVF	_ServosPulseDown_timingindex_1_28, W, B
002866   0d05     mullw   0x05             	MULLW	0x05
002868   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
00286a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00286c   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00286e   f000
002870   0e00     movlw   0x00             	MOVLW	LOW(_timings)
002872   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002874   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
002876   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002878   0e02     movlw   0x02             	MOVLW	0x02
00287a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00287c   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00287e   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002880   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
002882   ffe9
002884   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
002886   ffea
002888   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00288a   f000
00288c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00288e   1a82     xorwf   0x82, 0x1, 0x0   	XORWF	_PORTC, F
                                           ; ;multiply lit val:0x05 by variable _ServosPulseDown_timingindex_1_28 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	199; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTD = PORTD ^ timings[timingindex][pD];
002890   512a     movf    0x2a, 0x0, 0x1   	MOVF	_ServosPulseDown_timingindex_1_28, W, B
002892   0d05     mullw   0x05             	MULLW	0x05
002894   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
002896   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002898   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
00289a   f000
00289c   0e00     movlw   0x00             	MOVLW	LOW(_timings)
00289e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0028a0   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0028a2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0028a4   0e03     movlw   0x03             	MOVLW	0x03
0028a6   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0028a8   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0028aa   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0028ac   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028ae   ffe9
0028b0   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0028b2   ffea
0028b4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0028b6   f000
0028b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028ba   1a83     xorwf   0x83, 0x1, 0x0   	XORWF	_PORTD, F
                                           ; ;multiply lit val:0x05 by variable _ServosPulseDown_timingindex_1_28 and store in r0x00
                                           ; removed redundant BANKSEL
                                           ;	.line	202; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PORTE = PORTE ^ timings[timingindex][pE];
0028bc   512a     movf    0x2a, 0x0, 0x1   	MOVF	_ServosPulseDown_timingindex_1_28, W, B
0028be   0d05     mullw   0x05             	MULLW	0x05
0028c0   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
0028c2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0028c4   cff3     movff   0xff3, 0x000     	MOVFF	PRODL, r0x00
0028c6   f000
0028c8   0e00     movlw   0x00             	MOVLW	LOW(_timings)
0028ca   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0028cc   0e04     movlw   0x04             	MOVLW	HIGH(_timings)
0028ce   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0028d0   0e04     movlw   0x04             	MOVLW	0x04
0028d2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0028d4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0028d6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0028d8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0028da   ffe9
0028dc   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0028de   ffea
0028e0   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0028e2   f000
0028e4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028e6   1a84     xorwf   0x84, 0x1, 0x0   	XORWF	_PORTE, F
                                           ; removed redundant BANKSEL
                                           ;	.line	204; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	timingindex++;
0028e8   2b2a     incf    0x2a, 0x1, 0x1   	INCF	_ServosPulseDown_timingindex_1_28, F, B
                                           _00329_DS_:
0028ea   0e07     movlw   0x07             	movlw	7
0028ec   6f29     movwf   0x29, 0x1        	movwf	_loopvar
                                           bucle:
0028ee   0000     nop                      	NOP
0028f0   0000     nop                      	NOP
0028f2   0000     nop                      	NOP
0028f4   0000     nop                      	NOP
0028f6   0000     nop                      	NOP
0028f8   0000     nop                      	NOP
0028fa   0000     nop                      	NOP
0028fc   2f29     decfsz  0x29, 0x1, 0x1   	decfsz	_loopvar,1
0028fe   ef77     goto    0x0028ee         	goto	bucle
002900   f014
                                           	
002902   0104     movlb   0x4              	BANKSEL	_timedivision
                                           ;	.line	189; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(timedivision=0;timedivision < 251;timedivision++)
002904   2bf2     incf    0xf2, 0x1, 0x1   	INCF	_timedivision, F, B
002906   0efb     movlw   0xfb             	MOVLW	0xfb
                                           ; removed redundant BANKSEL
002908   5df2     subwf   0xf2, 0x0, 0x1   	SUBWF	_timedivision, W, B
00290a   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00290c   d772     bra     0x0027f2         	BRA	_00331_DS_
00290e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002910   f001
002912   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002914   f000
002916   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002918   ffd9
00291a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__servos_init	code
                                           _servos_init:
                                           ;	.line	152; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	void servos_init()
002f7a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002f7c   ffe5
002f7e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002f80   ffe5
002f82   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002f84   ffe5
                                           ;	.line	157; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(a=0;a<TotalPICpins;a++)
002f86   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00302_DS_:
                                           ;	.line	159; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	servovalues[a]=255;  //Filling up the servovalues table to 255.
002f88   0ed2     movlw   0xd2             	MOVLW	LOW(_servovalues)
002f8a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002f8c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f8e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002f90   0e04     movlw   0x04             	MOVLW	HIGH(_servovalues)
002f92   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002f94   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002f96   ffe9
002f98   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
002f9a   ffea
002f9c   68ef     setf    0xef, 0x0        	SETF	INDF0
                                           ;	.line	160; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	maxminpos[0][a]= DefaultSERVOMIN; // Setting min servo position to 1000 usec.
002f9e   0e96     movlw   0x96             	MOVLW	LOW(_maxminpos)
002fa0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002fa2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002fa4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002fa6   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos)
002fa8   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002faa   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002fac   ffe9
002fae   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
002fb0   ffea
002fb2   0e40     movlw   0x40             	MOVLW	0x40
002fb4   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	161; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	maxminpos[1][a]= DefaultSERVOMAX; // Setting max servo position to 2000 usec.
002fb6   0eb4     movlw   0xb4             	MOVLW	LOW(_maxminpos + 30)
002fb8   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002fba   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002fbc   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002fbe   0e04     movlw   0x04             	MOVLW	HIGH(_maxminpos + 30)
002fc0   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002fc2   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002fc4   ffe9
002fc6   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
002fc8   ffea
002fca   0ec0     movlw   0xc0             	MOVLW	0xc0
002fcc   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	157; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(a=0;a<TotalPICpins;a++)
002fce   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002fd0   0e1e     movlw   0x1e             	MOVLW	0x1e
002fd2   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002fd4   e3d9     bnc     0x002f88         	BNC	_00302_DS_
                                           ;	.line	165; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(a=0;a<TotalPICports;a++)
002fd6   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00304_DS_:
                                           ;	.line	166; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	activatedservos[a]=0x00;  // Setting all pins as deactivated as servo.
002fd8   0ef6     movlw   0xf6             	MOVLW	LOW(_activatedservos)
002fda   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002fdc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002fde   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002fe0   0e04     movlw   0x04             	MOVLW	HIGH(_activatedservos)
002fe2   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002fe4   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
002fe6   ffe9
002fe8   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
002fea   ffea
002fec   6aef     clrf    0xef, 0x0        	CLRF	INDF0
                                           ;	.line	165; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	for(a=0;a<TotalPICports;a++)
002fee   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
002ff0   0e05     movlw   0x05             	MOVLW	0x05
002ff2   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
002ff4   e3f1     bnc     0x002fd8         	BNC	_00304_DS_
                                           ;	.line	168; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	INTCONbits.GIEH    = 0; // Disable global HP interrupts
002ff6   9ef2     bcf     0xf2, 0x7, 0x0   	BCF	_INTCONbits, 7
                                           ;	.line	169; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	INTCONbits.GIEL    = 0; // Disable global LP interrupts
002ff8   9cf2     bcf     0xf2, 0x6, 0x0   	BCF	_INTCONbits, 6
                                           ;	.line	171; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	T1CON=0x01; 			//timer 1 prescaler 1 source is internal oscillator
002ffa   0e01     movlw   0x01             	MOVLW	0x01
002ffc   6ecd     movwf   0xcd, 0x0        	MOVWF	_T1CON
                                           ;	.line	172; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1H=0xFF; 			// First value on timer to start up...
002ffe   0eff     movlw   0xff             	MOVLW	0xff
003000   68cf     setf    0xcf, 0x0        	SETF	_TMR1H
                                           ;	.line	173; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	TMR1L=0x00; 			// ...now the first interrupt will be generated by timer after 9 ms.
003002   6ace     clrf    0xce, 0x0        	CLRF	_TMR1L
                                           ;	.line	174; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	IPR1bits.TMR1IP = 1; 	// INT_HIGH_PRIORITY
003004   809f     bsf     0x9f, 0x0, 0x0   	BSF	_IPR1bits, 0
                                           ;	.line	175; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PIR1bits.TMR1IF = 0; 	// Setting flag to 0
003006   909e     bcf     0x9e, 0x0, 0x0   	BCF	_PIR1bits, 0
                                           ;	.line	176; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	PIE1bits.TMR1IE = 1; 	// INT_ENABLE
003008   809d     bsf     0x9d, 0x0, 0x0   	BSF	_PIE1bits, 0
                                           ;	.line	177; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	T1CONbits.TMR1ON   = 1; // Starting TMR1
00300a   80cd     bsf     0xcd, 0x0, 0x0   	BSF	_T1CONbits, 0
                                           ;	.line	179; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	INTCONbits.GIEH    = 1; // Enable global HP interrupts
00300c   8ef2     bsf     0xf2, 0x7, 0x0   	BSF	_INTCONbits, 7
                                           ;	.line	180; /home/vbasel/.icaro/v4/firmware/libraries/servos.c	INTCONbits.GIEL    = 1; // Enable global LP interrupts
00300e   8cf2     bsf     0xf2, 0x6, 0x0   	BSF	_INTCONbits, 6
003010   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003012   f002
003014   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003016   f001
003018   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00301a   f000
00301c   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__toggle	code
                                           _toggle:
                                           ;	.line	47; /home/vbasel/.icaro/v4/firmware/core/digitalt.c	void toggle(u8 pin)
00358e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003590   ffe5
003592   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003594   ffd9
003596   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003598   ffe5
00359a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00359c   ffe5
00359e   0e02     movlw   0x02             	MOVLW	0x02
0035a0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0035a2   f000
                                           ;	.line	50; /home/vbasel/.icaro/v4/firmware/core/digitalt.c	state = digitalread(pin);
0035a4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035a8   ec86     call    0x00230c, 0x0call    0x00230c, 0x0 	CALL	_digitalread
0035aa   f011
0035ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0035ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	51; /home/vbasel/.icaro/v4/firmware/core/digitalt.c	digitalwrite(pin, state^1);
0035b0   7001     btg     0x01, 0x0, 0x0   	BTG	r0x01, 0
0035b2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0035b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035b6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035ba   ec32     call    0x001a64, 0x0call    0x001a64, 0x0 	CALL	_digitalwrite
0035bc   f00d
0035be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0035c0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0035c2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0035c4   f001
0035c6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0035c8   f000
0035ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0035cc   ffd9
0035ce   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalread	code
                                           _digitalread:
                                           ;	.line	48; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	u8 digitalread(u8 pin)
00230c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00230e   ffe5
002310   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002312   ffd9
002314   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002316   ffe5
002318   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00231a   ffe5
00231c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00231e   ffe5
002320   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002322   ffe5
002324   0e02     movlw   0x02             	MOVLW	0x02
002326   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002328   f000
                                           ;	.line	54; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	switch (port[pin])
00232a   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
00232c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00232e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002330   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002332   0e31     movlw   0x31             	MOVLW	HIGH(_port)
002334   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002336   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002338   0e00     movlw   0x00             	MOVLW	UPPER(_port)
00233a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00233c   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00233e   fff6
002340   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002342   fff7
002344   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002346   fff8
002348   0009     tblrd*+                  	TBLRD*+	
00234a   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00234c   f001
00234e   0e05     movlw   0x05             	MOVLW	0x05
002350   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
002352   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002354   d0a4     bra     0x00249e         	BRA	_00258_DS_
002356   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002358   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
00235a   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
00235c   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
00235e   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
002360   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002362   0bfc     andlw   0xfc             	ANDLW	0xfc
002364   0f74     addlw   0x74             	ADDLW	LOW(_00290_DS_)
002366   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002368   0e23     movlw   0x23             	MOVLW	HIGH(_00290_DS_)
00236a   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
00236c   0e00     movlw   0x00             	MOVLW	UPPER(_00290_DS_)
00236e   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
002370   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
002372   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00290_DS_:
002374   efc4     goto    0x002388         	GOTO	_00253_DS_
002376   f011
002378   efe0     goto    0x0023c0         	GOTO	_00254_DS_
00237a   f011
00237c   effc     goto    0x0023f8         	GOTO	_00255_DS_
00237e   f011
002380   ef18     goto    0x002430         	GOTO	_00256_DS_
002382   f012
002384   ef34     goto    0x002468         	GOTO	_00257_DS_
002386   f012
                                           _00253_DS_:
                                           ;	.line	57; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return ((PORTA & mask[pin])!=0);
002388   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00238a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00238c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00238e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002390   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002392   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002394   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002396   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002398   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00239a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00239c   fff6
00239e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
0023a0   fff7
0023a2   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
0023a4   fff8
0023a6   0009     tblrd*+                  	TBLRD*+	
0023a8   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
0023aa   f001
0023ac   5080     movf    0x80, 0x0, 0x0   	MOVF	_PORTA, W
0023ae   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
0023b0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023b2   e003     bz      0x0023ba         	BZ	_00261_DS_
0023b4   0e01     movlw   0x01             	MOVLW	0x01
0023b6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023b8   d001     bra     0x0023bc         	BRA	_00262_DS_
                                           _00261_DS_:
0023ba   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00262_DS_:
0023bc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023be   d070     bra     0x0024a0         	BRA	_00259_DS_
                                           _00254_DS_:
                                           ;	.line	60; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return ((PORTB & mask[pin])!=0);
0023c0   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0023c2   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0023c4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023c6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0023c8   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
0023ca   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0023cc   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0023ce   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
0023d0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0023d2   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
0023d4   fff6
0023d6   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
0023d8   fff7
0023da   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
0023dc   fff8
0023de   0009     tblrd*+                  	TBLRD*+	
0023e0   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
0023e2   f001
0023e4   5081     movf    0x81, 0x0, 0x0   	MOVF	_PORTB, W
0023e6   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
0023e8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023ea   e003     bz      0x0023f2         	BZ	_00263_DS_
0023ec   0e01     movlw   0x01             	MOVLW	0x01
0023ee   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023f0   d001     bra     0x0023f4         	BRA	_00264_DS_
                                           _00263_DS_:
0023f2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00264_DS_:
0023f4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023f6   d054     bra     0x0024a0         	BRA	_00259_DS_
                                           _00255_DS_:
                                           ;	.line	63; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return ((PORTC & mask[pin])!=0);
0023f8   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
0023fa   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0023fc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023fe   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002400   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002402   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002404   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002406   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002408   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00240a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00240c   fff6
00240e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002410   fff7
002412   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002414   fff8
002416   0009     tblrd*+                  	TBLRD*+	
002418   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00241a   f001
00241c   5082     movf    0x82, 0x0, 0x0   	MOVF	_PORTC, W
00241e   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
002420   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002422   e003     bz      0x00242a         	BZ	_00265_DS_
002424   0e01     movlw   0x01             	MOVLW	0x01
002426   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002428   d001     bra     0x00242c         	BRA	_00266_DS_
                                           _00265_DS_:
00242a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00266_DS_:
00242c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00242e   d038     bra     0x0024a0         	BRA	_00259_DS_
                                           _00256_DS_:
                                           ;	.line	70; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return ((PORTD & mask[pin])!=0);
002430   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
002432   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
002434   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002436   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002438   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
00243a   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00243c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00243e   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002440   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
002442   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
002444   fff6
002446   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002448   fff7
00244a   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
00244c   fff8
00244e   0009     tblrd*+                  	TBLRD*+	
002450   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
002452   f001
002454   5083     movf    0x83, 0x0, 0x0   	MOVF	_PORTD, W
002456   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
002458   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00245a   e003     bz      0x002462         	BZ	_00267_DS_
00245c   0e01     movlw   0x01             	MOVLW	0x01
00245e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002460   d001     bra     0x002464         	BRA	_00268_DS_
                                           _00267_DS_:
002462   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00268_DS_:
002464   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002466   d01c     bra     0x0024a0         	BRA	_00259_DS_
                                           _00257_DS_:
                                           ;	.line	73; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return ((PORTE & mask[pin])!=0);
002468   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00246a   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00246c   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
00246e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002470   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
002472   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002474   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
002476   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002478   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
00247a   fff6
00247c   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
00247e   fff7
002480   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
002482   fff8
002484   0009     tblrd*+                  	TBLRD*+	
002486   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
002488   f000
00248a   5084     movf    0x84, 0x0, 0x0   	MOVF	_PORTE, W
00248c   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
00248e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002490   e003     bz      0x002498         	BZ	_00269_DS_
002492   0e01     movlw   0x01             	MOVLW	0x01
002494   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002496   d001     bra     0x00249a         	BRA	_00270_DS_
                                           _00269_DS_:
002498   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           _00270_DS_:
00249a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00249c   d001     bra     0x0024a0         	BRA	_00259_DS_
                                           _00258_DS_:
                                           ;	.line	77; /home/vbasel/.icaro/v4/firmware/core/digitalr.c	return 0;
00249e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00259_DS_:
0024a0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0024a2   f003
0024a4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0024a6   f002
0024a8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0024aa   f001
0024ac   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0024ae   f000
0024b0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0024b2   ffd9
0024b4   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalwrite	code
                                           _digitalwrite:
                                           ;	.line	48; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	void digitalwrite(u8 pin, u8 state)
001a64   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001a66   ffe5
001a68   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001a6a   ffd9
001a6c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001a6e   ffe5
001a70   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001a72   ffe5
001a74   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001a76   ffe5
001a78   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001a7a   ffe5
001a7c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001a7e   ffe5
001a80   0e02     movlw   0x02             	MOVLW	0x02
001a82   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001a84   f000
001a86   0e03     movlw   0x03             	MOVLW	0x03
001a88   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001a8a   f001
                                           ;	.line	54; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	switch (port[pin])
001a8c   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
001a8e   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001a90   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001a92   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001a94   0e31     movlw   0x31             	MOVLW	HIGH(_port)
001a96   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001a98   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001a9a   0e00     movlw   0x00             	MOVLW	UPPER(_port)
001a9c   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001a9e   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001aa0   fff6
001aa2   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001aa4   fff7
001aa6   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001aa8   fff8
001aaa   0009     tblrd*+                  	TBLRD*+	
001aac   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001aae   f002
001ab0   0e05     movlw   0x05             	MOVLW	0x05
001ab2   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001ab4   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001ab6   d0f8     bra     0x001ca8         	BRA	_00227_DS_
001ab8   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
001aba   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
001abc   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
001abe   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001ac0   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
001ac2   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001ac4   0bfc     andlw   0xfc             	ANDLW	0xfc
001ac6   0fd6     addlw   0xd6             	ADDLW	LOW(_00248_DS_)
001ac8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001aca   0e1a     movlw   0x1a             	MOVLW	HIGH(_00248_DS_)
001acc   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
001ace   0e00     movlw   0x00             	MOVLW	UPPER(_00248_DS_)
001ad0   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
001ad2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001ad4   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00248_DS_:
001ad6   ef75     goto    0x001aea         	GOTO	_00206_DS_
001ad8   f00d
001ada   efa2     goto    0x001b44         	GOTO	_00210_DS_
001adc   f00d
001ade   efcf     goto    0x001b9e         	GOTO	_00214_DS_
001ae0   f00d
001ae2   effc     goto    0x001bf8         	GOTO	_00218_DS_
001ae4   f00d
001ae6   ef29     goto    0x001c52         	GOTO	_00222_DS_
001ae8   f00e
                                           _00206_DS_:
                                           ;	.line	57; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	if (state) LATA=LATA | mask[pin];
001aea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001aec   e015     bz      0x001b18         	BZ	_00208_DS_
001aee   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001af0   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001af2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001af4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001af6   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001af8   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001afa   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001afc   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001afe   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001b00   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001b02   fff6
001b04   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001b06   fff7
001b08   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001b0a   fff8
001b0c   0009     tblrd*+                  	TBLRD*+	
001b0e   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001b10   f002
001b12   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b14   1289     iorwf   0x89, 0x1, 0x0   	IORWF	_LATA, F
001b16   d0c8     bra     0x001ca8         	BRA	_00227_DS_
                                           _00208_DS_:
                                           ;	.line	58; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	else LATA=LATA & (255-mask[pin]);
001b18   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001b1a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b1c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001b1e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001b20   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001b22   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001b24   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001b26   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001b28   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001b2a   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001b2c   fff6
001b2e   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001b30   fff7
001b32   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001b34   fff8
001b36   0009     tblrd*+                  	TBLRD*+	
001b38   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001b3a   f002
001b3c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b3e   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001b40   1689     andwf   0x89, 0x1, 0x0   	ANDWF	_LATA, F
                                           ;	.line	59; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	break;
001b42   d0b2     bra     0x001ca8         	BRA	_00227_DS_
                                           _00210_DS_:
                                           ;	.line	61; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	if (state) LATB=LATB | mask[pin]; 
001b44   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b46   e015     bz      0x001b72         	BZ	_00212_DS_
001b48   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001b4a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b4c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001b4e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001b50   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001b52   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001b54   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001b56   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001b58   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001b5a   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001b5c   fff6
001b5e   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001b60   fff7
001b62   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001b64   fff8
001b66   0009     tblrd*+                  	TBLRD*+	
001b68   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001b6a   f002
001b6c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b6e   128a     iorwf   0x8a, 0x1, 0x0   	IORWF	_LATB, F
001b70   d09b     bra     0x001ca8         	BRA	_00227_DS_
                                           _00212_DS_:
                                           ;	.line	62; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	else LATB=LATB & (255-mask[pin]);
001b72   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001b74   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001b76   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001b78   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001b7a   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001b7c   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001b7e   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001b80   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001b82   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001b84   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001b86   fff6
001b88   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001b8a   fff7
001b8c   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001b8e   fff8
001b90   0009     tblrd*+                  	TBLRD*+	
001b92   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001b94   f002
001b96   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b98   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001b9a   168a     andwf   0x8a, 0x1, 0x0   	ANDWF	_LATB, F
                                           ;	.line	63; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	break;
001b9c   d085     bra     0x001ca8         	BRA	_00227_DS_
                                           _00214_DS_:
                                           ;	.line	65; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	if (state) LATC=LATC | mask[pin];
001b9e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ba0   e015     bz      0x001bcc         	BZ	_00216_DS_
001ba2   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001ba4   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001ba6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001ba8   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001baa   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001bac   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001bae   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001bb0   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001bb2   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001bb4   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001bb6   fff6
001bb8   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001bba   fff7
001bbc   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001bbe   fff8
001bc0   0009     tblrd*+                  	TBLRD*+	
001bc2   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001bc4   f002
001bc6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001bc8   128b     iorwf   0x8b, 0x1, 0x0   	IORWF	_LATC, F
001bca   d06e     bra     0x001ca8         	BRA	_00227_DS_
                                           _00216_DS_:
                                           ;	.line	66; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	else LATC=LATC & (255-mask[pin]);
001bcc   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001bce   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001bd0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001bd2   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001bd4   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001bd6   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001bd8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001bda   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001bdc   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001bde   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001be0   fff6
001be2   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001be4   fff7
001be6   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001be8   fff8
001bea   0009     tblrd*+                  	TBLRD*+	
001bec   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001bee   f002
001bf0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001bf2   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001bf4   168b     andwf   0x8b, 0x1, 0x0   	ANDWF	_LATC, F
                                           ;	.line	67; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	break;
001bf6   d058     bra     0x001ca8         	BRA	_00227_DS_
                                           _00218_DS_:
                                           ;	.line	72; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	if (state) LATD=LATD | mask[pin]; 
001bf8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001bfa   e015     bz      0x001c26         	BZ	_00220_DS_
001bfc   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001bfe   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001c00   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001c02   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001c04   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001c06   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001c08   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001c0a   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001c0c   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001c0e   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001c10   fff6
001c12   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001c14   fff7
001c16   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001c18   fff8
001c1a   0009     tblrd*+                  	TBLRD*+	
001c1c   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001c1e   f002
001c20   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c22   128c     iorwf   0x8c, 0x1, 0x0   	IORWF	_LATD, F
001c24   d041     bra     0x001ca8         	BRA	_00227_DS_
                                           _00220_DS_:
                                           ;	.line	73; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	else LATD=LATD & (255-mask[pin]);
001c26   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001c28   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001c2a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001c2c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001c2e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001c30   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001c32   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001c34   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001c36   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001c38   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001c3a   fff6
001c3c   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001c3e   fff7
001c40   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001c42   fff8
001c44   0009     tblrd*+                  	TBLRD*+	
001c46   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001c48   f002
001c4a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c4c   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001c4e   168c     andwf   0x8c, 0x1, 0x0   	ANDWF	_LATD, F
                                           ;	.line	74; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	break;
001c50   d02b     bra     0x001ca8         	BRA	_00227_DS_
                                           _00222_DS_:
                                           ;	.line	76; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	if (state) LATE=LATE | mask[pin]; 
001c52   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c54   e015     bz      0x001c80         	BZ	_00224_DS_
001c56   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001c58   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001c5a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001c5c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c5e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001c60   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001c62   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001c64   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001c66   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001c68   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
001c6a   fff6
001c6c   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
001c6e   fff7
001c70   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
001c72   fff8
001c74   0009     tblrd*+                  	TBLRD*+	
001c76   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
001c78   f001
001c7a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c7c   128d     iorwf   0x8d, 0x1, 0x0   	IORWF	_LATE, F
001c7e   d014     bra     0x001ca8         	BRA	_00227_DS_
                                           _00224_DS_:
                                           ;	.line	77; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	else LATE=LATE & (255-mask[pin]);
001c80   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001c82   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001c84   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001c86   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001c88   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001c8a   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001c8c   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001c8e   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001c90   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
001c92   fff6
001c94   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
001c96   fff7
001c98   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
001c9a   fff8
001c9c   0009     tblrd*+                  	TBLRD*+	
001c9e   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001ca0   f000
001ca2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001ca4   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
001ca6   168d     andwf   0x8d, 0x1, 0x0   	ANDWF	_LATE, F
                                           _00227_DS_:
                                           ;	.line	80; /home/vbasel/.icaro/v4/firmware/core/digitalw.c	}
001ca8   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001caa   f004
001cac   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001cae   f003
001cb0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001cb2   f002
001cb4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001cb6   f001
001cb8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001cba   f000
001cbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001cbe   ffd9
001cc0   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__pinmode	code
                                           _pinmode:
                                           ;	.line	44; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	void pinmode(u8 pin, u8 state)
001cc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001cc4   ffe5
001cc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001cc8   ffd9
001cca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
001ccc   ffe5
001cce   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
001cd0   ffe5
001cd2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
001cd4   ffe5
001cd6   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
001cd8   ffe5
001cda   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
001cdc   ffe5
001cde   0e02     movlw   0x02             	MOVLW	0x02
001ce0   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
001ce2   f000
001ce4   0e03     movlw   0x03             	MOVLW	0x03
001ce6   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
001ce8   f001
                                           ;	.line	46; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	switch (port[pin])
001cea   0ea8     movlw   0xa8             	MOVLW	LOW(_port)
001cec   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001cee   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001cf0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001cf2   0e31     movlw   0x31             	MOVLW	HIGH(_port)
001cf4   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001cf6   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001cf8   0e00     movlw   0x00             	MOVLW	UPPER(_port)
001cfa   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001cfc   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001cfe   fff6
001d00   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001d02   fff7
001d04   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001d06   fff8
001d08   0009     tblrd*+                  	TBLRD*+	
001d0a   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001d0c   f002
001d0e   0e05     movlw   0x05             	MOVLW	0x05
001d10   5c02     subwf   0x02, 0x0, 0x0   	SUBWF	r0x02, W
001d12   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
001d14   d0f8     bra     0x001f06         	BRA	_00180_DS_
001d16   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
001d18   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
001d1a   3402     rlcf    0x02, 0x0, 0x0   	RLCF	r0x02, W
001d1c   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001d1e   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
001d20   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
001d22   0bfc     andlw   0xfc             	ANDLW	0xfc
001d24   0f34     addlw   0x34             	ADDLW	LOW(_00201_DS_)
001d26   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d28   0e1d     movlw   0x1d             	MOVLW	HIGH(_00201_DS_)
001d2a   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
001d2c   0e00     movlw   0x00             	MOVLW	UPPER(_00201_DS_)
001d2e   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
001d30   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
001d32   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _00201_DS_:
001d34   efa4     goto    0x001d48         	GOTO	_00159_DS_
001d36   f00e
001d38   efd1     goto    0x001da2         	GOTO	_00163_DS_
001d3a   f00e
001d3c   effe     goto    0x001dfc         	GOTO	_00167_DS_
001d3e   f00e
001d40   ef2b     goto    0x001e56         	GOTO	_00171_DS_
001d42   f00f
001d44   ef58     goto    0x001eb0         	GOTO	_00175_DS_
001d46   f00f
                                           _00159_DS_:
                                           ;	.line	49; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	if (state) TRISA=TRISA | mask[pin];
001d48   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001d4a   e015     bz      0x001d76         	BZ	_00161_DS_
001d4c   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001d4e   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001d50   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001d52   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001d54   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001d56   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001d58   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001d5a   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001d5c   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001d5e   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001d60   fff6
001d62   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001d64   fff7
001d66   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001d68   fff8
001d6a   0009     tblrd*+                  	TBLRD*+	
001d6c   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001d6e   f002
001d70   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d72   1292     iorwf   0x92, 0x1, 0x0   	IORWF	_TRISA, F
001d74   d0c8     bra     0x001f06         	BRA	_00180_DS_
                                           _00161_DS_:
                                           ;	.line	50; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	else TRISA=TRISA & (255-mask[pin]);
001d76   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001d78   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001d7a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001d7c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001d7e   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001d80   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001d82   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001d84   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001d86   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001d88   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001d8a   fff6
001d8c   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001d8e   fff7
001d90   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001d92   fff8
001d94   0009     tblrd*+                  	TBLRD*+	
001d96   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001d98   f002
001d9a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001d9c   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001d9e   1692     andwf   0x92, 0x1, 0x0   	ANDWF	_TRISA, F
                                           ;	.line	51; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	break;
001da0   d0b2     bra     0x001f06         	BRA	_00180_DS_
                                           _00163_DS_:
                                           ;	.line	53; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	if (state) TRISB=TRISB | mask[pin];
001da2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001da4   e015     bz      0x001dd0         	BZ	_00165_DS_
001da6   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001da8   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001daa   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001dac   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001dae   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001db0   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001db2   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001db4   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001db6   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001db8   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001dba   fff6
001dbc   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001dbe   fff7
001dc0   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001dc2   fff8
001dc4   0009     tblrd*+                  	TBLRD*+	
001dc6   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001dc8   f002
001dca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001dcc   1293     iorwf   0x93, 0x1, 0x0   	IORWF	_TRISB, F
001dce   d09b     bra     0x001f06         	BRA	_00180_DS_
                                           _00165_DS_:
                                           ;	.line	54; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	else TRISB=TRISB & (255-mask[pin]);
001dd0   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001dd2   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001dd4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001dd6   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001dd8   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001dda   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001ddc   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001dde   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001de0   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001de2   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001de4   fff6
001de6   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001de8   fff7
001dea   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001dec   fff8
001dee   0009     tblrd*+                  	TBLRD*+	
001df0   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001df2   f002
001df4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001df6   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001df8   1693     andwf   0x93, 0x1, 0x0   	ANDWF	_TRISB, F
                                           ;	.line	55; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	break;
001dfa   d085     bra     0x001f06         	BRA	_00180_DS_
                                           _00167_DS_:
                                           ;	.line	57; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	if (state) TRISC=TRISC | mask[pin];
001dfc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001dfe   e015     bz      0x001e2a         	BZ	_00169_DS_
001e00   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001e02   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001e04   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001e06   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e08   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001e0a   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001e0c   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001e0e   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001e10   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001e12   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001e14   fff6
001e16   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001e18   fff7
001e1a   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001e1c   fff8
001e1e   0009     tblrd*+                  	TBLRD*+	
001e20   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001e22   f002
001e24   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e26   1294     iorwf   0x94, 0x1, 0x0   	IORWF	_TRISC, F
001e28   d06e     bra     0x001f06         	BRA	_00180_DS_
                                           _00169_DS_:
                                           ;	.line	58; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	else TRISC=TRISC & (255-mask[pin]);
001e2a   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001e2c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001e2e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001e30   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e32   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001e34   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001e36   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001e38   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001e3a   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001e3c   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001e3e   fff6
001e40   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001e42   fff7
001e44   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001e46   fff8
001e48   0009     tblrd*+                  	TBLRD*+	
001e4a   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001e4c   f002
001e4e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e50   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001e52   1694     andwf   0x94, 0x1, 0x0   	ANDWF	_TRISC, F
                                           ;	.line	59; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	break;
001e54   d058     bra     0x001f06         	BRA	_00180_DS_
                                           _00171_DS_:
                                           ;	.line	64; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	if (state) TRISD=TRISD | mask[pin];
001e56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001e58   e015     bz      0x001e84         	BZ	_00173_DS_
001e5a   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001e5c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001e5e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001e60   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e62   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001e64   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001e66   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001e68   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001e6a   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001e6c   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001e6e   fff6
001e70   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001e72   fff7
001e74   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001e76   fff8
001e78   0009     tblrd*+                  	TBLRD*+	
001e7a   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001e7c   f002
001e7e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001e80   1295     iorwf   0x95, 0x1, 0x0   	IORWF	_TRISD, F
001e82   d041     bra     0x001f06         	BRA	_00180_DS_
                                           _00173_DS_:
                                           ;	.line	65; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	else TRISD=TRISD & (255-mask[pin]);
001e84   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001e86   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001e88   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
001e8a   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001e8c   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001e8e   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001e90   6a04     clrf    0x04, 0x0        	CLRF	r0x04
001e92   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001e94   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
001e96   c002     movff   0x002, 0xff6     	MOVFF	r0x02, TBLPTRL
001e98   fff6
001e9a   c003     movff   0x003, 0xff7     	MOVFF	r0x03, TBLPTRH
001e9c   fff7
001e9e   c004     movff   0x004, 0xff8     	MOVFF	r0x04, TBLPTRU
001ea0   fff8
001ea2   0009     tblrd*+                  	TBLRD*+	
001ea4   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
001ea6   f002
001ea8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001eaa   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
001eac   1695     andwf   0x95, 0x1, 0x0   	ANDWF	_TRISD, F
                                           ;	.line	66; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	break;
001eae   d02b     bra     0x001f06         	BRA	_00180_DS_
                                           _00175_DS_:
                                           ;	.line	68; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	if (state) TRISE=TRISE | mask[pin];
001eb0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001eb2   e015     bz      0x001ede         	BZ	_00177_DS_
001eb4   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001eb6   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
001eb8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
001eba   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001ebc   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001ebe   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001ec0   6a03     clrf    0x03, 0x0        	CLRF	r0x03
001ec2   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001ec4   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
001ec6   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
001ec8   fff6
001eca   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
001ecc   fff7
001ece   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
001ed0   fff8
001ed2   0009     tblrd*+                  	TBLRD*+	
001ed4   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
001ed6   f001
001ed8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001eda   1296     iorwf   0x96, 0x1, 0x0   	IORWF	_TRISE, F
001edc   d014     bra     0x001f06         	BRA	_00180_DS_
                                           _00177_DS_:
                                           ;	.line	69; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	else TRISE=TRISE & (255-mask[pin]);
001ede   6a01     clrf    0x01, 0x0        	CLRF	r0x01
001ee0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
001ee2   0e8a     movlw   0x8a             	MOVLW	LOW(_mask)
001ee4   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
001ee6   0e31     movlw   0x31             	MOVLW	HIGH(_mask)
001ee8   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
001eea   0e00     movlw   0x00             	MOVLW	UPPER(_mask)
001eec   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
001eee   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
001ef0   fff6
001ef2   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
001ef4   fff7
001ef6   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
001ef8   fff8
001efa   0009     tblrd*+                  	TBLRD*+	
001efc   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
001efe   f000
001f00   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f02   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
001f04   1696     andwf   0x96, 0x1, 0x0   	ANDWF	_TRISE, F
                                           _00180_DS_:
                                           ;	.line	72; /home/vbasel/.icaro/v4/firmware/core/digitalp.c	}
001f06   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
001f08   f004
001f0a   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
001f0c   f003
001f0e   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
001f10   f002
001f12   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
001f14   f001
001f16   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
001f18   f000
001f1a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001f1c   ffd9
001f1e   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Delayms	code
                                           _Delayms:
                                           ;	.line	93; /home/vbasel/.icaro/v4/firmware/core/delayms.c	void Delayms(u16 milliseconds)
002bfe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002c00   ffe5
002c02   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002c04   ffd9
002c06   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002c08   ffe5
002c0a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002c0c   ffe5
002c0e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002c10   ffe5
002c12   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002c14   ffe5
002c16   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002c18   ffe5
002c1a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002c1c   ffe5
002c1e   0e02     movlw   0x02             	MOVLW	0x02
002c20   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002c22   f000
002c24   0e03     movlw   0x03             	MOVLW	0x03
002c26   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002c28   f001
                                           ;	.line	100; /home/vbasel/.icaro/v4/firmware/core/delayms.c	u16 n100tcy = System_getPeripheralFrequency() / 100000;
002c2a   ec93     call    0x002126, 0x0call    0x002126, 0x0 	CALL	_System_getCpuFrequency
002c2c   f010
002c2e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002c30   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
002c32   f003
002c34   cff4     movff   0xff4, 0x004     	MOVFF	PRODH, r0x04
002c36   f004
002c38   cfe9     movff   0xfe9, 0x005     	MOVFF	FSR0L, r0x05
002c3a   f005
002c3c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002c3e   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
002c40   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
002c42   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
002c44   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
002c46   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002c48   3205     rrcf    0x05, 0x1, 0x0   	RRCF	r0x05, F
002c4a   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
002c4c   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
002c4e   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
002c50   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002c52   0e01     movlw   0x01             	MOVLW	0x01
002c54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c56   0e86     movlw   0x86             	MOVLW	0x86
002c58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c5a   0ea0     movlw   0xa0             	MOVLW	0xa0
002c5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c5e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002c60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c62   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c66   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002c68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c6a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c6e   ec8e     call    0x00291c, 0x0call    0x00291c, 0x0 	CALL	__divulong
002c70   f014
002c72   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002c74   0e08     movlw   0x08             	MOVLW	0x08
002c76   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00151_DS_:
                                           ;	.line	101; /home/vbasel/.icaro/v4/firmware/core/delayms.c	while (milliseconds--)
002c78   c000     movff   0x000, 0x004     	MOVFF	r0x00, r0x04
002c7a   f004
002c7c   c001     movff   0x001, 0x005     	MOVFF	r0x01, r0x05
002c7e   f005
002c80   0eff     movlw   0xff             	MOVLW	0xff
002c82   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002c84   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002c86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c88   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
002c8a   e008     bz      0x002c9c         	BZ	_00154_DS_
                                           ;	.line	102; /home/vbasel/.icaro/v4/firmware/core/delayms.c	delay100tcy(n100tcy-3);
002c8c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c8e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002c90   0efd     movlw   0xfd             	MOVLW	0xfd
002c92   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
002c94   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002c96   ece3     call    0x0031c6, 0x0call    0x0031c6, 0x0 	CALL	_delay100tcy
002c98   f018
002c9a   d7ee     bra     0x002c78         	BRA	_00151_DS_
                                           _00154_DS_:
002c9c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002c9e   f005
002ca0   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002ca2   f004
002ca4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002ca6   f003
002ca8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002caa   f002
002cac   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002cae   f001
002cb0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002cb2   f000
002cb4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002cb6   ffd9
002cb8   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__System_getCpuFrequency	code
                                           _System_getCpuFrequency:
                                           ;	.line	227; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	u32 System_getCpuFrequency() 
002126   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002128   ffe5
00212a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00212c   ffe5
00212e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002130   ffe5
002132   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002134   ffe5
002136   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002138   ffe5
00213a   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
00213c   ffe5
                                           ;	.line	242; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	if (OSCCONbits.SCS == 0)
00213e   50d3     movf    0xd3, 0x0, 0x0   	MOVF	_OSCCONbits, W
002140   0b03     andlw   0x03             	ANDLW	0x03
002142   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002144   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002146   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
002148   d091     bra     0x00226c         	BRA	_00116_DS_
                                           ;	.line	268; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	CPUDIV  = ( System_readFlashMemory(__CONFIG1L) & 0b00011000 ) >> 3;
00214a   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00214c   0e30     movlw   0x30             	MOVLW	0x30
00214e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002150   0e00     movlw   0x00             	MOVLW	0x00
002152   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002154   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002156   ecb6     call    0x002d6c, 0x0call    0x002d6c, 0x0 	CALL	_System_readFlashMemory
002158   f016
00215a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00215c   0e04     movlw   0x04             	MOVLW	0x04
00215e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002160   0e18     movlw   0x18             	MOVLW	0x18
002162   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
002164   6a01     clrf    0x01, 0x0        	CLRF	r0x01
002166   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002168   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
00216a   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
00216c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00216e   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
002170   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
002172   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002174   3201     rrcf    0x01, 0x1, 0x0   	RRCF	r0x01, F
002176   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	269; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	CPUDIV_XTAL = cpudiv_xtal[CPUDIV];
002178   0e66     movlw   0x66             	MOVLW	LOW(_cpudiv_xtal)
00217a   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
00217c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00217e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002180   0e31     movlw   0x31             	MOVLW	HIGH(_cpudiv_xtal)
002182   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002184   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002186   0e00     movlw   0x00             	MOVLW	UPPER(_cpudiv_xtal)
002188   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00218a   c001     movff   0x001, 0xff6     	MOVFF	r0x01, TBLPTRL
00218c   fff6
00218e   c002     movff   0x002, 0xff7     	MOVFF	r0x02, TBLPTRH
002190   fff7
002192   c003     movff   0x003, 0xff8     	MOVFF	r0x03, TBLPTRU
002194   fff8
002196   0009     tblrd*+                  	TBLRD*+	
002198   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
00219a   f001
                                           ;	.line	270; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	fosc  = System_readFlashMemory(__CONFIG1H) & 0b00001111;
00219c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00219e   0e30     movlw   0x30             	MOVLW	0x30
0021a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021a2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0021a4   0e01     movlw   0x01             	MOVLW	0x01
0021a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021a8   ecb6     call    0x002d6c, 0x0call    0x002d6c, 0x0 	CALL	_System_readFlashMemory
0021aa   f016
0021ac   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021ae   0e04     movlw   0x04             	MOVLW	0x04
0021b0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0021b2   0e0f     movlw   0x0f             	MOVLW	0x0f
0021b4   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
                                           ;	.line	284; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	CPUDIV = cpudiv[CPUDIV];
0021b6   0e62     movlw   0x62             	MOVLW	LOW(_cpudiv)
0021b8   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
0021ba   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0021bc   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0021be   0e31     movlw   0x31             	MOVLW	HIGH(_cpudiv)
0021c0   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
0021c2   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0021c4   0e00     movlw   0x00             	MOVLW	UPPER(_cpudiv)
0021c6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0021c8   c003     movff   0x003, 0xff6     	MOVFF	r0x03, TBLPTRL
0021ca   fff6
0021cc   c004     movff   0x004, 0xff7     	MOVFF	r0x04, TBLPTRH
0021ce   fff7
0021d0   c005     movff   0x005, 0xff8     	MOVFF	r0x05, TBLPTRU
0021d2   fff8
0021d4   0009     tblrd*+                  	TBLRD*+	
0021d6   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0021d8   f000
                                           ;	.line	292; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	fosc >>=1;
0021da   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
0021dc   3202     rrcf    0x02, 0x1, 0x0   	RRCF	r0x02, F
                                           ;	.line	293; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	if( (fosc==0) || (fosc==2) || (fosc==6) )
0021de   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021e0   e006     bz      0x0021ee         	BZ	_00110_DS_
0021e2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021e4   0a02     xorlw   0x02             	XORLW	0x02
0021e6   e003     bz      0x0021ee         	BZ	_00110_DS_
0021e8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021ea   0a06     xorlw   0x06             	XORLW	0x06
0021ec   e11f     bnz     0x00222c         	BNZ	_00111_DS_
                                           _00110_DS_:
                                           ;	.line	295; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return CRYSTAL / CPUDIV_XTAL;
0021ee   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0021f0   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0021f2   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0021f4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0021f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021f8   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
0021fa   0e7a     movlw   0x7a             	MOVLW	0x7a
0021fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021fe   0e12     movlw   0x12             	MOVLW	0x12
002200   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002202   0e00     movlw   0x00             	MOVLW	0x00
002204   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002206   ec5b     call    0x0024b6, 0x0call    0x0024b6, 0x0 	CALL	__divslong
002208   f012
00220a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00220c   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00220e   f002
002210   cff4     movff   0xff4, 0x003     	MOVFF	PRODH, r0x03
002212   f003
002214   cfe9     movff   0xfe9, 0x004     	MOVFF	FSR0L, r0x04
002216   f004
002218   0e08     movlw   0x08             	MOVLW	0x08
00221a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00221c   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00221e   ffe9
002220   c003     movff   0x003, 0xff4     	MOVFF	r0x03, PRODH
002222   fff4
002224   c002     movff   0x002, 0xff3     	MOVFF	r0x02, PRODL
002226   fff3
002228   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00222a   d063     bra     0x0022f2         	BRA	_00121_DS_
                                           _00111_DS_:
                                           ;	.line	299; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return 96000000UL / CPUDIV;
00222c   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
00222e   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002230   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002232   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002234   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002236   0e05     movlw   0x05             	MOVLW	0x05
002238   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00223a   0eb8     movlw   0xb8             	MOVLW	0xb8
00223c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00223e   0ed8     movlw   0xd8             	MOVLW	0xd8
002240   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002242   0e00     movlw   0x00             	MOVLW	0x00
002244   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002246   ec8e     call    0x00291c, 0x0call    0x00291c, 0x0 	CALL	__divulong
002248   f014
00224a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00224c   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00224e   f001
002250   cff4     movff   0xff4, 0x002     	MOVFF	PRODH, r0x02
002252   f002
002254   cfe9     movff   0xfe9, 0x003     	MOVFF	FSR0L, r0x03
002256   f003
002258   0e08     movlw   0x08             	MOVLW	0x08
00225a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00225c   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
00225e   ffe9
002260   c002     movff   0x002, 0xff4     	MOVFF	r0x02, PRODH
002262   fff4
002264   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
002266   fff3
002268   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00226a   d043     bra     0x0022f2         	BRA	_00121_DS_
                                           _00116_DS_:
                                           ;	.line	312; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	if (OSCCONbits.SCS == 1)
00226c   50d3     movf    0xd3, 0x0, 0x0   	MOVF	_OSCCONbits, W
00226e   0b03     andlw   0x03             	ANDLW	0x03
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
002270   0a01     xorlw   0x01             	XORLW	0x01
002272   e106     bnz     0x002280         	BNZ	_00118_DS_
                                           ;	.line	313; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return 32768;
002274   6ae9     clrf    0xe9, 0x0        	CLRF	FSR0L
002276   6af4     clrf    0xf4, 0x0        	CLRF	PRODH
002278   0e80     movlw   0x80             	MOVLW	0x80
00227a   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
00227c   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
00227e   d039     bra     0x0022f2         	BRA	_00121_DS_
                                           _00118_DS_:
                                           ;	.line	316; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	if (OSCCONbits.SCS >= 2)
002280   50d3     movf    0xd3, 0x0, 0x0   	MOVF	_OSCCONbits, W
002282   0b03     andlw   0x03             	ANDLW	0x03
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
002284   0f80     addlw   0x80             	ADDLW	0x80
002286   0f7e     addlw   0x7e             	ADDLW	0x7e
002288   e330     bnc     0x0022ea         	BNC	_00120_DS_
                                           ;	.line	317; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return ircf[OSCCONbits.IRCF];
00228a   50d3     movf    0xd3, 0x0, 0x0   	MOVF	_OSCCONbits, W
00228c   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
00228e   0b07     andlw   0x07             	ANDLW	0x07
002290   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002292   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002294   6ae5     clrf    0xe5, 0x0        	CLRF	POSTDEC1
002296   0e04     movlw   0x04             	MOVLW	0x04
002298   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00229a   ec02     call    0x003204, 0x0call    0x003204, 0x0 	CALL	__mulint
00229c   f019
00229e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022a0   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0022a2   f001
0022a4   0e04     movlw   0x04             	MOVLW	0x04
0022a6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0022a8   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0022aa   0e6a     movlw   0x6a             	MOVLW	LOW(_ircf)
0022ac   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0022ae   0e31     movlw   0x31             	MOVLW	HIGH(_ircf)
0022b0   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0022b2   0e00     movlw   0x00             	MOVLW	UPPER(_ircf)
0022b4   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0022b6   c000     movff   0x000, 0xff6     	MOVFF	r0x00, TBLPTRL
0022b8   fff6
0022ba   c001     movff   0x001, 0xff7     	MOVFF	r0x01, TBLPTRH
0022bc   fff7
0022be   c002     movff   0x002, 0xff8     	MOVFF	r0x02, TBLPTRU
0022c0   fff8
0022c2   0009     tblrd*+                  	TBLRD*+	
0022c4   cff5     movff   0xff5, 0x000     	MOVFF	TABLAT, r0x00
0022c6   f000
0022c8   0009     tblrd*+                  	TBLRD*+	
0022ca   cff5     movff   0xff5, 0x001     	MOVFF	TABLAT, r0x01
0022cc   f001
0022ce   0009     tblrd*+                  	TBLRD*+	
0022d0   cff5     movff   0xff5, 0x002     	MOVFF	TABLAT, r0x02
0022d2   f002
0022d4   0009     tblrd*+                  	TBLRD*+	
0022d6   cff5     movff   0xff5, 0x003     	MOVFF	TABLAT, r0x03
0022d8   f003
0022da   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
0022dc   ffe9
0022de   c002     movff   0x002, 0xff4     	MOVFF	r0x02, PRODH
0022e0   fff4
0022e2   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0022e4   fff3
0022e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022e8   d004     bra     0x0022f2         	BRA	_00121_DS_
                                           _00120_DS_:
                                           ;	.line	319; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return 0;
0022ea   6ae9     clrf    0xe9, 0x0        	CLRF	FSR0L
0022ec   6af4     clrf    0xf4, 0x0        	CLRF	PRODH
0022ee   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
0022f0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00121_DS_:
0022f2   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0022f4   f005
0022f6   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0022f8   f004
0022fa   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0022fc   f003
0022fe   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002300   f002
002302   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002304   f001
002306   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002308   f000
00230a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__System_readFlashMemory	code
                                           _System_readFlashMemory:
                                           ;	.line	190; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	u16 System_readFlashMemory(u32 address)
002d6c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002d6e   ffe5
002d70   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
002d72   ffd9
002d74   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
002d76   ffe5
002d78   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002d7a   ffe5
002d7c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002d7e   ffe5
002d80   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
002d82   ffe5
002d84   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
002d86   ffe5
002d88   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
002d8a   ffe5
002d8c   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
002d8e   ffe5
002d90   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
002d92   ffe5
002d94   0e02     movlw   0x02             	MOVLW	0x02
002d96   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
002d98   f000
002d9a   0e03     movlw   0x03             	MOVLW	0x03
002d9c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
002d9e   f001
002da0   0e04     movlw   0x04             	MOVLW	0x04
002da2   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
002da4   f002
002da6   0e05     movlw   0x05             	MOVLW	0x05
002da8   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
002daa   f003
                                           ;	.line	194; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	TBLPTRU = address >> 16;
002dac   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002dae   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002db0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002db2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002db4   6a06     clrf    0x06, 0x0        	CLRF	r0x06
002db6   6a07     clrf    0x07, 0x0        	CLRF	r0x07
002db8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002dba   6ef8     movwf   0xf8, 0x0        	MOVWF	_TBLPTRU
                                           ;	.line	195; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	TBLPTRH = address >> 8;
002dbc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002dbe   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002dc0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002dc2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002dc4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002dc6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002dc8   6a07     clrf    0x07, 0x0        	CLRF	r0x07
002dca   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002dcc   6ef7     movwf   0xf7, 0x0        	MOVWF	_TBLPTRH
                                           ;	.line	196; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	TBLPTRL = address;
002dce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002dd0   6ef6     movwf   0xf6, 0x0        	MOVWF	_TBLPTRL
002dd2   0009     tblrd*+                  	tblrd*+
                                           ;	.line	198; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	l8 = TABLAT;
002dd4   cff5     movff   0xff5, 0x000     	MOVFF	_TABLAT, r0x00
002dd6   f000
002dd8   0009     tblrd*+                  	tblrd*+
                                           ;	.line	200; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	h8 = TABLAT;
002dda   cff5     movff   0xff5, 0x001     	MOVFF	_TABLAT, r0x01
002ddc   f001
                                           ;	.line	202; /home/vbasel/.icaro/v4/firmware/core/oscillator.c	return ((h8 << 8) + l8);
002dde   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002de0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002de2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002de4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
002de6   6a05     clrf    0x05, 0x0        	CLRF	r0x05
002de8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002dea   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
002dec   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002dee   2204     addwfc  0x04, 0x1, 0x0   	ADDWFC	r0x04, F
002df0   c004     movff   0x004, 0xff3     	MOVFF	r0x04, PRODL
002df2   fff3
002df4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002df6   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002df8   f007
002dfa   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002dfc   f006
002dfe   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002e00   f005
002e02   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
002e04   f004
002e06   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002e08   f003
002e0a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002e0c   f002
002e0e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002e10   f001
002e12   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
002e14   f000
002e16   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002e18   ffd9
002e1a   0012     return  0x0              	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _cpudiv:
003162   0302     mulwf   0x02, 0x1        	DB	0x02, 0x03, 0x04, 0x06
003164   0604     decf    0x04, 0x1, 0x0   
                                           ; ; Starting pCode block for Ival
                                           _cpudiv_xtal:
003166   0201     mulwf   0x01, 0x0        	DB	0x01, 0x02, 0x03, 0x04
003168   0403     decf    0x03, 0x0, 0x0   
                                           ; ; Starting pCode block for Ival
                                           _ircf:
00316a   7a12     btg     0x12, 0x5, 0x0   	DB	0x12, 0x7a, 0x00, 0x00, 0x48, 0xe8, 0x01, 0x00, 0x90, 0xd0, 0x03, 0x00
00316c   0000     nop                      
00316e   e848     dw      0xe848           
003170   0001     halt                     
003172   d090     bra     0x003294         
003174   0003     sleep                    
003176   a120     btfss   0x20, 0x0, 0x1   	DB	0x20, 0xa1, 0x07, 0x00, 0x40, 0x42, 0x0f, 0x00, 0x80, 0x84, 0x1e, 0x00
003178   0007     daw                      
00317a   4240     rrncf   0x40, 0x1, 0x0   
00317c   000f     tblwt+*                  
00317e   8480     bsf     0x80, 0x2, 0x0   
003180   001e     dw      0x001e           
003182   0900     iorlw   0x00             	DB	0x00, 0x09, 0x3d, 0x00, 0x00, 0x12, 0x7a, 0x00
003184   003d     dw      0x003d           
003186   1200     iorwf   0x00, 0x1, 0x0   
003188   007a     dw      0x007a           
                                           ; ; Starting pCode block for Ival
                                           _mask:
00318a   0201     mulwf   0x01, 0x0        	DB	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x40, 0x80, 0x01, 0x02
00318c   0804     sublw   0x04             
00318e   2010     addwfc  0x10, 0x0, 0x0   
003190   8040     bsf     0x40, 0x0, 0x0   
003192   8040     bsf     0x40, 0x0, 0x0   
003194   0201     mulwf   0x01, 0x0        
003196   0104     movlb   0x4              	DB	0x04, 0x01, 0x02, 0x04, 0x08, 0x20, 0x01, 0x02, 0x04, 0x01, 0x02, 0x04
003198   0402     decf    0x02, 0x0, 0x0   
00319a   2008     addwfc  0x08, 0x0, 0x0   
00319c   0201     mulwf   0x01, 0x0        
00319e   0104     movlb   0x4              
0031a0   0402     decf    0x02, 0x0, 0x0   
0031a2   1008     iorwf   0x08, 0x0, 0x0   	DB	0x08, 0x10, 0x20, 0x40, 0x80, 0x10
0031a4   4020     rrncf   0x20, 0x0, 0x0   
0031a6   1080     iorwf   0x80, 0x0, 0x0   
                                           ; ; Starting pCode block for Ival
                                           _port:
0031a8   0101     movlb   0x1              	DB	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02
0031aa   0101     movlb   0x1              
0031ac   0101     movlb   0x1              
0031ae   0101     movlb   0x1              
0031b0   0202     mulwf   0x02, 0x0        
0031b2   0202     mulwf   0x02, 0x0        
0031b4   0002     dw      0x0002           	DB	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03
0031b6   0000     nop                      
0031b8   0000     nop                      
0031ba   0404     decf    0x04, 0x0, 0x0   
0031bc   0304     mulwf   0x04, 0x1        
0031be   0303     mulwf   0x03, 0x1        
0031c0   0303     mulwf   0x03, 0x1        	DB	0x03, 0x03, 0x03, 0x03, 0x03, 0x00
0031c2   0303     mulwf   0x03, 0x1        
0031c4   0003     sleep                    
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 9488 (0x2510) bytes ( 7.24%)
                                           ;           	 4744 (0x1288) words
                                           ; udata size:	  291 (0x0123) bytes (16.24%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
